/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2020-2021. All rights reserved.
 * Generated by VRTF CM-Generator
 */

#ifndef ARA_COM_SAMPLE_CALIBRATEERROR_INVALID_ERROR_DOMAIN_H
#define ARA_COM_SAMPLE_CALIBRATEERROR_INVALID_ERROR_DOMAIN_H

#include "ara/com/types.h"
#include "ara/core/exception.h"
#include "ara/core/error_code.h"
#include "ara/core/map.h"

namespace ara {
namespace com {
namespace sample {
namespace calibrateerror {

enum class InvalidErrc : ara::core::ErrorDomain::CodeType {
    UserError = 8
};

class InvalidException : public ara::core::Exception {
public:
    explicit InvalidException(ara::core::ErrorCode&& err) noexcept
        : Exception(std::move(err)) {}
};

class InvalidErrorDomain : public ara::core::ErrorDomain {
public:
    using Errc = InvalidErrc;
    using Exception = InvalidException;

    constexpr static  ErrorDomain::IdType InvalidErrorDomainId = 12138;

    constexpr InvalidErrorDomain() noexcept
        : ErrorDomain(InvalidErrorDomainId) {}

    char const * Name() const noexcept override
    {
        return "Invalid";
    }
    char const * Message(ara::core::ErrorDomain::CodeType errorCode) const noexcept override
    {
        static ara::core::Map<ara::core::ErrorDomain::CodeType, const char*> mapCode = {
            {ara::core::ErrorDomain::CodeType(InvalidErrc::UserError), "UserError"}};
        return mapCode[errorCode];
    }
    void ThrowAsException(ara::core::ErrorCode const &errorCode) const noexcept(false) override
    {
        ara::core::ThrowOrTerminate<Exception>(errorCode);
    }
};

constexpr InvalidErrorDomain g_InvalidErrorDomain;

constexpr ara::core::ErrorDomain const& GetInvalidErrorDomain() noexcept
{
    return g_InvalidErrorDomain;
}

constexpr ara::core::ErrorCode MakeErrorCode(InvalidErrc code,
                                             ara::core::ErrorDomain::SupportDataType data) noexcept
{
    return ara::core::ErrorCode(static_cast<ara::core::ErrorDomain::CodeType>(code),
                                GetInvalidErrorDomain(), data);
}
} // namespace calibrateerror
} // namespace sample
} // namespace com
} // namespace ara

#endif // ARA_COM_SAMPLE_CALIBRATEERROR_INVALID_ERROR_DOMAIN_H
