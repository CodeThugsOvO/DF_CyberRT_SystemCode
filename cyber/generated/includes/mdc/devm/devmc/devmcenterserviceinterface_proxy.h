/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2020-2021. All rights reserved.
 * Generated by VRTF CM-Generator
 */

#ifndef MDC_DEVM_DEVMC_DEVMCENTERSERVICEINTERFACE_PROXY_H
#define MDC_DEVM_DEVMC_DEVMCENTERSERVICEINTERFACE_PROXY_H

#include "ara/com/internal/proxy/proxy_adapter.h"
#include "ara/com/internal/proxy/event_adapter.h"
#include "ara/com/internal/proxy/field_adapter.h"
#include "ara/com/internal/proxy/method_adapter.h"
#include "mdc/devm/devmc/devmcenterserviceinterface_common.h"
#include <string>
#include <cfloat>
#include <cmath>

namespace mdc {
namespace devm {
namespace devmc {
namespace proxy {
namespace events {
    using FaultReportDmEvent = ara::com::internal::proxy::event::EventAdapter<::mdc::devm::FaultDmData>;
    using FaultReportPhmEvent = ara::com::internal::proxy::event::EventAdapter<::mdc::devm::FaultPhmData>;
    static constexpr ara::com::internal::EntityId FaultReportDmEventId = 26251; //FaultReportDmEvent_event_hash
    static constexpr ara::com::internal::EntityId FaultReportPhmEventId = 25313; //FaultReportPhmEvent_event_hash
}

namespace fields {
}

namespace methods {
static constexpr ara::com::internal::EntityId CanNetMgrCtrlId = 34824; //CanNetMgrCtrl_method_hash
static constexpr ara::com::internal::EntityId CheckUpdateConditionId = 4626; //CheckUpdateCondition_method_hash
static constexpr ara::com::internal::EntityId DidOperateId = 57911; //DidOperate_method_hash
static constexpr ara::com::internal::EntityId DoSensorActionId = 12021; //DoSensorAction_method_hash
static constexpr ara::com::internal::EntityId DoSystemActionId = 47289; //DoSystemAction_method_hash
static constexpr ara::com::internal::EntityId GetClockId = 5762; //GetClock_method_hash
static constexpr ara::com::internal::EntityId GetConfigId = 6396; //GetConfig_method_hash
static constexpr ara::com::internal::EntityId GetDevAttributeId = 2317; //GetDevAttribute_method_hash
static constexpr ara::com::internal::EntityId GetDeviceInfoId = 1421; //GetDeviceInfo_method_hash
static constexpr ara::com::internal::EntityId GetDeviceListId = 1107; //GetDeviceList_method_hash
static constexpr ara::com::internal::EntityId GetMasterModeId = 16509; //GetMasterMode_method_hash
static constexpr ara::com::internal::EntityId GetPowerOptTypeId = 63831; //GetPowerOptType_method_hash
static constexpr ara::com::internal::EntityId GetStateId = 64093; //GetState_method_hash
static constexpr ara::com::internal::EntityId GetStatisticsInfoId = 20523; //GetStatisticsInfo_method_hash
static constexpr ara::com::internal::EntityId GetSysPowerOffInfoId = 26982; //GetSysPowerOffInfo_method_hash
static constexpr ara::com::internal::EntityId GetTemperatureId = 29020; //GetTemperature_method_hash
static constexpr ara::com::internal::EntityId GetUpdateStateId = 28103; //GetUpdateState_method_hash
static constexpr ara::com::internal::EntityId GetUpgradableDeviceListId = 45397; //GetUpgradableDeviceList_method_hash
static constexpr ara::com::internal::EntityId GetUpgradeInfoId = 52553; //GetUpgradeInfo_method_hash
static constexpr ara::com::internal::EntityId GetVoltageId = 32576; //GetVoltage_method_hash
static constexpr ara::com::internal::EntityId GetWorkModeId = 52134; //GetWorkMode_method_hash
static constexpr ara::com::internal::EntityId RebootId = 56393; //Reboot_method_hash
static constexpr ara::com::internal::EntityId RollbackId = 28344; //Rollback_method_hash
static constexpr ara::com::internal::EntityId SensorMsgProxyId = 9755; //SensorMsgProxy_method_hash
static constexpr ara::com::internal::EntityId SetCanCtrlConfigId = 56119; //SetCanCtrlConfig_method_hash
static constexpr ara::com::internal::EntityId SetConfigId = 43974; //SetConfig_method_hash
static constexpr ara::com::internal::EntityId SetMasterModeId = 13507; //SetMasterMode_method_hash
static constexpr ara::com::internal::EntityId SetMcuSystemStatusId = 20332; //SetMcuSystemStatus_method_hash
static constexpr ara::com::internal::EntityId SetSleepReasonId = 19582; //SetSleepReason_method_hash
static constexpr ara::com::internal::EntityId SetSysPowerOffInfoReadedId = 59997; //SetSysPowerOffInfoReaded_method_hash
static constexpr ara::com::internal::EntityId SetWorkModeId = 50407; //SetWorkMode_method_hash
static constexpr ara::com::internal::EntityId TranConfigId = 27071; //TranConfig_method_hash
static constexpr ara::com::internal::EntityId UpdateId = 64985; //Update_method_hash
static constexpr ara::com::internal::EntityId UpdateSyncStartId = 63722; //UpdateSyncStart_method_hash


class CanNetMgrCtrl {
public:
    struct Output {
        ::int32_t result;

        static bool IsPlane()
        {
            return true;
        }

        using IsEnumerableTag = void;
        template<typename F>
        void enumerate(F& fun)
        {
            fun(result);
        }

        template<typename F>
        void enumerate(F& fun) const
        {
            fun(result);
        }

        bool operator == (const Output& t) const
        {
           return (result == t.result);
        }
    };

    CanNetMgrCtrl(std::shared_ptr<vrtf::vcc::Proxy>& proxy, ara::com::internal::EntityId entityId): method_(proxy, entityId){}
    void Initialize(std::shared_ptr<vrtf::vcc::Proxy>& proxy, ara::com::internal::EntityId entityId)
    {
        method_.Initialize(proxy, entityId);
    }
    ara::core::Future<Output> operator()(const ::UInt8& ctrlType)
    {
        return method_(ctrlType);
    }

    ara::com::internal::proxy::method::MethodAdapter<Output, ::UInt8> GetMethod()
    {
        return method_;
    }

private:
    ara::com::internal::proxy::method::MethodAdapter<Output, ::UInt8> method_;
};

class CheckUpdateCondition {
public:
    struct Output {
        ::Int32 result;

        static bool IsPlane()
        {
            return false;
        }

        using IsEnumerableTag = void;
        template<typename F>
        void enumerate(F& fun)
        {
            fun(result);
        }

        template<typename F>
        void enumerate(F& fun) const
        {
            fun(result);
        }

        bool operator == (const Output& t) const
        {
           return (result == t.result);
        }
    };

    CheckUpdateCondition(std::shared_ptr<vrtf::vcc::Proxy>& proxy, ara::com::internal::EntityId entityId): method_(proxy, entityId){}
    void Initialize(std::shared_ptr<vrtf::vcc::Proxy>& proxy, ara::com::internal::EntityId entityId)
    {
        method_.Initialize(proxy, entityId);
    }
    ara::core::Future<Output> operator()(const ::String& devName)
    {
        return method_(devName);
    }

    ara::com::internal::proxy::method::MethodAdapter<Output, ::String> GetMethod()
    {
        return method_;
    }

private:
    ara::com::internal::proxy::method::MethodAdapter<Output, ::String> method_;
};

class DidOperate {
public:
    struct Output {
        ::mdc::devm::Uint8List rxData;
        ::Int32 result;

        static bool IsPlane()
        {
            return false;
        }

        using IsEnumerableTag = void;
        template<typename F>
        void enumerate(F& fun)
        {
            fun(rxData);
            fun(result);
        }

        template<typename F>
        void enumerate(F& fun) const
        {
            fun(rxData);
            fun(result);
        }

        bool operator == (const Output& t) const
        {
           return (rxData == t.rxData) && (result == t.result);
        }
    };

    DidOperate(std::shared_ptr<vrtf::vcc::Proxy>& proxy, ara::com::internal::EntityId entityId): method_(proxy, entityId){}
    void Initialize(std::shared_ptr<vrtf::vcc::Proxy>& proxy, ara::com::internal::EntityId entityId)
    {
        method_.Initialize(proxy, entityId);
    }
    ara::core::Future<Output> operator()(const ::String& devName, const ::UInt16& did, const ::UInt8& didAction, const ::mdc::devm::Uint8List& txData)
    {
        return method_(devName, did, didAction, txData);
    }

    ara::com::internal::proxy::method::MethodAdapter<Output, ::String, ::UInt16, ::UInt8, ::mdc::devm::Uint8List> GetMethod()
    {
        return method_;
    }

private:
    ara::com::internal::proxy::method::MethodAdapter<Output, ::String, ::UInt16, ::UInt8, ::mdc::devm::Uint8List> method_;
};

class DoSensorAction {
public:
    struct Output {
        ::Int32 result;

        static bool IsPlane()
        {
            return false;
        }

        using IsEnumerableTag = void;
        template<typename F>
        void enumerate(F& fun)
        {
            fun(result);
        }

        template<typename F>
        void enumerate(F& fun) const
        {
            fun(result);
        }

        bool operator == (const Output& t) const
        {
           return (result == t.result);
        }
    };

    DoSensorAction(std::shared_ptr<vrtf::vcc::Proxy>& proxy, ara::com::internal::EntityId entityId): method_(proxy, entityId){}
    void Initialize(std::shared_ptr<vrtf::vcc::Proxy>& proxy, ara::com::internal::EntityId entityId)
    {
        method_.Initialize(proxy, entityId);
    }
    ara::core::Future<Output> operator()(const ::StringList& devNameList, const ::UInt8& action)
    {
        return method_(devNameList, action);
    }

    ara::com::internal::proxy::method::MethodAdapter<Output, ::StringList, ::UInt8> GetMethod()
    {
        return method_;
    }

private:
    ara::com::internal::proxy::method::MethodAdapter<Output, ::StringList, ::UInt8> method_;
};

class DoSystemAction {
public:
    struct Output {
        ::Int32 result;

        static bool IsPlane()
        {
            return true;
        }

        using IsEnumerableTag = void;
        template<typename F>
        void enumerate(F& fun)
        {
            fun(result);
        }

        template<typename F>
        void enumerate(F& fun) const
        {
            fun(result);
        }

        bool operator == (const Output& t) const
        {
           return (result == t.result);
        }
    };

    DoSystemAction(std::shared_ptr<vrtf::vcc::Proxy>& proxy, ara::com::internal::EntityId entityId): method_(proxy, entityId){}
    void Initialize(std::shared_ptr<vrtf::vcc::Proxy>& proxy, ara::com::internal::EntityId entityId)
    {
        method_.Initialize(proxy, entityId);
    }
    ara::core::Future<Output> operator()(const ::UInt8& type, const ::UInt8& action)
    {
        return method_(type, action);
    }

    ara::com::internal::proxy::method::MethodAdapter<Output, ::UInt8, ::UInt8> GetMethod()
    {
        return method_;
    }

private:
    ara::com::internal::proxy::method::MethodAdapter<Output, ::UInt8, ::UInt8> method_;
};

class GetClock {
public:
    struct Output {
        ::String clock;

        static bool IsPlane()
        {
            return false;
        }

        using IsEnumerableTag = void;
        template<typename F>
        void enumerate(F& fun)
        {
            fun(clock);
        }

        template<typename F>
        void enumerate(F& fun) const
        {
            fun(clock);
        }

        bool operator == (const Output& t) const
        {
           return (clock == t.clock);
        }
    };

    GetClock(std::shared_ptr<vrtf::vcc::Proxy>& proxy, ara::com::internal::EntityId entityId): method_(proxy, entityId){}
    void Initialize(std::shared_ptr<vrtf::vcc::Proxy>& proxy, ara::com::internal::EntityId entityId)
    {
        method_.Initialize(proxy, entityId);
    }
    ara::core::Future<Output> operator()()
    {
        return method_();
    }

    ara::com::internal::proxy::method::MethodAdapter<Output> GetMethod()
    {
        return method_;
    }

private:
    ara::com::internal::proxy::method::MethodAdapter<Output> method_;
};

class GetConfig {
public:
    struct Output {
        ::mdc::devm::Uint8List config;

        static bool IsPlane()
        {
            return false;
        }

        using IsEnumerableTag = void;
        template<typename F>
        void enumerate(F& fun)
        {
            fun(config);
        }

        template<typename F>
        void enumerate(F& fun) const
        {
            fun(config);
        }

        bool operator == (const Output& t) const
        {
           return (config == t.config);
        }
    };

    GetConfig(std::shared_ptr<vrtf::vcc::Proxy>& proxy, ara::com::internal::EntityId entityId): method_(proxy, entityId){}
    void Initialize(std::shared_ptr<vrtf::vcc::Proxy>& proxy, ara::com::internal::EntityId entityId)
    {
        method_.Initialize(proxy, entityId);
    }
    ara::core::Future<Output> operator()(const ::String& devName, const ::String& cfgKey)
    {
        return method_(devName, cfgKey);
    }

    ara::com::internal::proxy::method::MethodAdapter<Output, ::String, ::String> GetMethod()
    {
        return method_;
    }

private:
    ara::com::internal::proxy::method::MethodAdapter<Output, ::String, ::String> method_;
};

class GetDevAttribute {
public:
    struct Output {
        ::String result;

        static bool IsPlane()
        {
            return false;
        }

        using IsEnumerableTag = void;
        template<typename F>
        void enumerate(F& fun)
        {
            fun(result);
        }

        template<typename F>
        void enumerate(F& fun) const
        {
            fun(result);
        }

        bool operator == (const Output& t) const
        {
           return (result == t.result);
        }
    };

    GetDevAttribute(std::shared_ptr<vrtf::vcc::Proxy>& proxy, ara::com::internal::EntityId entityId): method_(proxy, entityId){}
    void Initialize(std::shared_ptr<vrtf::vcc::Proxy>& proxy, ara::com::internal::EntityId entityId)
    {
        method_.Initialize(proxy, entityId);
    }
    ara::core::Future<Output> operator()(const ::String& devName, const ::UInt8& attrNo)
    {
        return method_(devName, attrNo);
    }

    ara::com::internal::proxy::method::MethodAdapter<Output, ::String, ::UInt8> GetMethod()
    {
        return method_;
    }

private:
    ara::com::internal::proxy::method::MethodAdapter<Output, ::String, ::UInt8> method_;
};

class GetDeviceInfo {
public:
    struct Output {
        ::mdc::devm::DeviceInfo devInfo;

        static bool IsPlane()
        {
            return false;
        }

        using IsEnumerableTag = void;
        template<typename F>
        void enumerate(F& fun)
        {
            fun(devInfo);
        }

        template<typename F>
        void enumerate(F& fun) const
        {
            fun(devInfo);
        }

        bool operator == (const Output& t) const
        {
           return (devInfo == t.devInfo);
        }
    };

    GetDeviceInfo(std::shared_ptr<vrtf::vcc::Proxy>& proxy, ara::com::internal::EntityId entityId): method_(proxy, entityId){}
    void Initialize(std::shared_ptr<vrtf::vcc::Proxy>& proxy, ara::com::internal::EntityId entityId)
    {
        method_.Initialize(proxy, entityId);
    }
    ara::core::Future<Output> operator()(const ::String& devName)
    {
        return method_(devName);
    }

    ara::com::internal::proxy::method::MethodAdapter<Output, ::String> GetMethod()
    {
        return method_;
    }

private:
    ara::com::internal::proxy::method::MethodAdapter<Output, ::String> method_;
};

class GetDeviceList {
public:
    struct Output {
        ::mdc::devm::DeviceList deviceList;

        static bool IsPlane()
        {
            return false;
        }

        using IsEnumerableTag = void;
        template<typename F>
        void enumerate(F& fun)
        {
            fun(deviceList);
        }

        template<typename F>
        void enumerate(F& fun) const
        {
            fun(deviceList);
        }

        bool operator == (const Output& t) const
        {
           return (deviceList == t.deviceList);
        }
    };

    GetDeviceList(std::shared_ptr<vrtf::vcc::Proxy>& proxy, ara::com::internal::EntityId entityId): method_(proxy, entityId){}
    void Initialize(std::shared_ptr<vrtf::vcc::Proxy>& proxy, ara::com::internal::EntityId entityId)
    {
        method_.Initialize(proxy, entityId);
    }
    ara::core::Future<Output> operator()()
    {
        return method_();
    }

    ara::com::internal::proxy::method::MethodAdapter<Output> GetMethod()
    {
        return method_;
    }

private:
    ara::com::internal::proxy::method::MethodAdapter<Output> method_;
};

class GetMasterMode {
public:
    struct Output {
        ::UInt8 mode;

        static bool IsPlane()
        {
            return true;
        }

        using IsEnumerableTag = void;
        template<typename F>
        void enumerate(F& fun)
        {
            fun(mode);
        }

        template<typename F>
        void enumerate(F& fun) const
        {
            fun(mode);
        }

        bool operator == (const Output& t) const
        {
           return (mode == t.mode);
        }
    };

    GetMasterMode(std::shared_ptr<vrtf::vcc::Proxy>& proxy, ara::com::internal::EntityId entityId): method_(proxy, entityId){}
    void Initialize(std::shared_ptr<vrtf::vcc::Proxy>& proxy, ara::com::internal::EntityId entityId)
    {
        method_.Initialize(proxy, entityId);
    }
    ara::core::Future<Output> operator()(const ::UInt8& type)
    {
        return method_(type);
    }

    ara::com::internal::proxy::method::MethodAdapter<Output, ::UInt8> GetMethod()
    {
        return method_;
    }

private:
    ara::com::internal::proxy::method::MethodAdapter<Output, ::UInt8> method_;
};

class GetPowerOptType {
public:
    struct Output {
        ::uint8_t optType;
        ::int32_t result;

        static bool IsPlane()
        {
            return true;
        }

        using IsEnumerableTag = void;
        template<typename F>
        void enumerate(F& fun)
        {
            fun(optType);
            fun(result);
        }

        template<typename F>
        void enumerate(F& fun) const
        {
            fun(optType);
            fun(result);
        }

        bool operator == (const Output& t) const
        {
           return (optType == t.optType) && (result == t.result);
        }
    };

    GetPowerOptType(std::shared_ptr<vrtf::vcc::Proxy>& proxy, ara::com::internal::EntityId entityId): method_(proxy, entityId){}
    void Initialize(std::shared_ptr<vrtf::vcc::Proxy>& proxy, ara::com::internal::EntityId entityId)
    {
        method_.Initialize(proxy, entityId);
    }
    ara::core::Future<Output> operator()()
    {
        return method_();
    }

    ara::com::internal::proxy::method::MethodAdapter<Output> GetMethod()
    {
        return method_;
    }

private:
    ara::com::internal::proxy::method::MethodAdapter<Output> method_;
};

class GetState {
public:
    struct Output {
        ::mdc::devm::WorkStatusType State;

        static bool IsPlane()
        {
            return true;
        }

        using IsEnumerableTag = void;
        template<typename F>
        void enumerate(F& fun)
        {
            fun(State);
        }

        template<typename F>
        void enumerate(F& fun) const
        {
            fun(State);
        }

        bool operator == (const Output& t) const
        {
           return (State == t.State);
        }
    };

    GetState(std::shared_ptr<vrtf::vcc::Proxy>& proxy, ara::com::internal::EntityId entityId): method_(proxy, entityId){}
    void Initialize(std::shared_ptr<vrtf::vcc::Proxy>& proxy, ara::com::internal::EntityId entityId)
    {
        method_.Initialize(proxy, entityId);
    }
    ara::core::Future<Output> operator()()
    {
        return method_();
    }

    ara::com::internal::proxy::method::MethodAdapter<Output> GetMethod()
    {
        return method_;
    }

private:
    ara::com::internal::proxy::method::MethodAdapter<Output> method_;
};

class GetStatisticsInfo {
public:
    struct Output {
        ::String statisticsInfo;

        static bool IsPlane()
        {
            return false;
        }

        using IsEnumerableTag = void;
        template<typename F>
        void enumerate(F& fun)
        {
            fun(statisticsInfo);
        }

        template<typename F>
        void enumerate(F& fun) const
        {
            fun(statisticsInfo);
        }

        bool operator == (const Output& t) const
        {
           return (statisticsInfo == t.statisticsInfo);
        }
    };

    GetStatisticsInfo(std::shared_ptr<vrtf::vcc::Proxy>& proxy, ara::com::internal::EntityId entityId): method_(proxy, entityId){}
    void Initialize(std::shared_ptr<vrtf::vcc::Proxy>& proxy, ara::com::internal::EntityId entityId)
    {
        method_.Initialize(proxy, entityId);
    }
    ara::core::Future<Output> operator()(const ::String& devName)
    {
        return method_(devName);
    }

    ara::com::internal::proxy::method::MethodAdapter<Output, ::String> GetMethod()
    {
        return method_;
    }

private:
    ara::com::internal::proxy::method::MethodAdapter<Output, ::String> method_;
};

class GetSysPowerOffInfo {
public:
    struct Output {
        ::mdc::devm::PowerOffInfoType powerOffInfo;
        ::Int32 result;

        static bool IsPlane()
        {
            return true;
        }

        using IsEnumerableTag = void;
        template<typename F>
        void enumerate(F& fun)
        {
            fun(powerOffInfo);
            fun(result);
        }

        template<typename F>
        void enumerate(F& fun) const
        {
            fun(powerOffInfo);
            fun(result);
        }

        bool operator == (const Output& t) const
        {
           return (powerOffInfo == t.powerOffInfo) && (result == t.result);
        }
    };

    GetSysPowerOffInfo(std::shared_ptr<vrtf::vcc::Proxy>& proxy, ara::com::internal::EntityId entityId): method_(proxy, entityId){}
    void Initialize(std::shared_ptr<vrtf::vcc::Proxy>& proxy, ara::com::internal::EntityId entityId)
    {
        method_.Initialize(proxy, entityId);
    }
    ara::core::Future<Output> operator()()
    {
        return method_();
    }

    ara::com::internal::proxy::method::MethodAdapter<Output> GetMethod()
    {
        return method_;
    }

private:
    ara::com::internal::proxy::method::MethodAdapter<Output> method_;
};

class GetTemperature {
public:
    struct Output {
        ::String temperature;

        static bool IsPlane()
        {
            return false;
        }

        using IsEnumerableTag = void;
        template<typename F>
        void enumerate(F& fun)
        {
            fun(temperature);
        }

        template<typename F>
        void enumerate(F& fun) const
        {
            fun(temperature);
        }

        bool operator == (const Output& t) const
        {
           return (temperature == t.temperature);
        }
    };

    GetTemperature(std::shared_ptr<vrtf::vcc::Proxy>& proxy, ara::com::internal::EntityId entityId): method_(proxy, entityId){}
    void Initialize(std::shared_ptr<vrtf::vcc::Proxy>& proxy, ara::com::internal::EntityId entityId)
    {
        method_.Initialize(proxy, entityId);
    }
    ara::core::Future<Output> operator()()
    {
        return method_();
    }

    ara::com::internal::proxy::method::MethodAdapter<Output> GetMethod()
    {
        return method_;
    }

private:
    ara::com::internal::proxy::method::MethodAdapter<Output> method_;
};

class GetUpdateState {
public:
    struct Output {
        ::UInt8 progress;
        ::Int32 errorCode;

        static bool IsPlane()
        {
            return false;
        }

        using IsEnumerableTag = void;
        template<typename F>
        void enumerate(F& fun)
        {
            fun(progress);
            fun(errorCode);
        }

        template<typename F>
        void enumerate(F& fun) const
        {
            fun(progress);
            fun(errorCode);
        }

        bool operator == (const Output& t) const
        {
           return (progress == t.progress) && (errorCode == t.errorCode);
        }
    };

    GetUpdateState(std::shared_ptr<vrtf::vcc::Proxy>& proxy, ara::com::internal::EntityId entityId): method_(proxy, entityId){}
    void Initialize(std::shared_ptr<vrtf::vcc::Proxy>& proxy, ara::com::internal::EntityId entityId)
    {
        method_.Initialize(proxy, entityId);
    }
    ara::core::Future<Output> operator()(const ::String& devName, const ::String& packgName)
    {
        return method_(devName, packgName);
    }

    ara::com::internal::proxy::method::MethodAdapter<Output, ::String, ::String> GetMethod()
    {
        return method_;
    }

private:
    ara::com::internal::proxy::method::MethodAdapter<Output, ::String, ::String> method_;
};

class GetUpgradableDeviceList {
public:
    struct Output {
        ::mdc::devm::UpgradeDevList upgradeDevList;

        static bool IsPlane()
        {
            return false;
        }

        using IsEnumerableTag = void;
        template<typename F>
        void enumerate(F& fun)
        {
            fun(upgradeDevList);
        }

        template<typename F>
        void enumerate(F& fun) const
        {
            fun(upgradeDevList);
        }

        bool operator == (const Output& t) const
        {
           return (upgradeDevList == t.upgradeDevList);
        }
    };

    GetUpgradableDeviceList(std::shared_ptr<vrtf::vcc::Proxy>& proxy, ara::com::internal::EntityId entityId): method_(proxy, entityId){}
    void Initialize(std::shared_ptr<vrtf::vcc::Proxy>& proxy, ara::com::internal::EntityId entityId)
    {
        method_.Initialize(proxy, entityId);
    }
    ara::core::Future<Output> operator()()
    {
        return method_();
    }

    ara::com::internal::proxy::method::MethodAdapter<Output> GetMethod()
    {
        return method_;
    }

private:
    ara::com::internal::proxy::method::MethodAdapter<Output> method_;
};

class GetUpgradeInfo {
public:
    struct Output {
        ::mdc::devm::UpgradeInfo upgradeInfo;

        static bool IsPlane()
        {
            return false;
        }

        using IsEnumerableTag = void;
        template<typename F>
        void enumerate(F& fun)
        {
            fun(upgradeInfo);
        }

        template<typename F>
        void enumerate(F& fun) const
        {
            fun(upgradeInfo);
        }

        bool operator == (const Output& t) const
        {
           return (upgradeInfo == t.upgradeInfo);
        }
    };

    GetUpgradeInfo(std::shared_ptr<vrtf::vcc::Proxy>& proxy, ara::com::internal::EntityId entityId): method_(proxy, entityId){}
    void Initialize(std::shared_ptr<vrtf::vcc::Proxy>& proxy, ara::com::internal::EntityId entityId)
    {
        method_.Initialize(proxy, entityId);
    }
    ara::core::Future<Output> operator()(const ::String& devName)
    {
        return method_(devName);
    }

    ara::com::internal::proxy::method::MethodAdapter<Output, ::String> GetMethod()
    {
        return method_;
    }

private:
    ara::com::internal::proxy::method::MethodAdapter<Output, ::String> method_;
};

class GetVoltage {
public:
    struct Output {
        ::String voltage;

        static bool IsPlane()
        {
            return false;
        }

        using IsEnumerableTag = void;
        template<typename F>
        void enumerate(F& fun)
        {
            fun(voltage);
        }

        template<typename F>
        void enumerate(F& fun) const
        {
            fun(voltage);
        }

        bool operator == (const Output& t) const
        {
           return (voltage == t.voltage);
        }
    };

    GetVoltage(std::shared_ptr<vrtf::vcc::Proxy>& proxy, ara::com::internal::EntityId entityId): method_(proxy, entityId){}
    void Initialize(std::shared_ptr<vrtf::vcc::Proxy>& proxy, ara::com::internal::EntityId entityId)
    {
        method_.Initialize(proxy, entityId);
    }
    ara::core::Future<Output> operator()()
    {
        return method_();
    }

    ara::com::internal::proxy::method::MethodAdapter<Output> GetMethod()
    {
        return method_;
    }

private:
    ara::com::internal::proxy::method::MethodAdapter<Output> method_;
};

class GetWorkMode {
public:
    struct Output {
        ::UInt8 mode;
        ::Int32 result;

        static bool IsPlane()
        {
            return true;
        }

        using IsEnumerableTag = void;
        template<typename F>
        void enumerate(F& fun)
        {
            fun(mode);
            fun(result);
        }

        template<typename F>
        void enumerate(F& fun) const
        {
            fun(mode);
            fun(result);
        }

        bool operator == (const Output& t) const
        {
           return (mode == t.mode) && (result == t.result);
        }
    };

    GetWorkMode(std::shared_ptr<vrtf::vcc::Proxy>& proxy, ara::com::internal::EntityId entityId): method_(proxy, entityId){}
    void Initialize(std::shared_ptr<vrtf::vcc::Proxy>& proxy, ara::com::internal::EntityId entityId)
    {
        method_.Initialize(proxy, entityId);
    }
    ara::core::Future<Output> operator()()
    {
        return method_();
    }

    ara::com::internal::proxy::method::MethodAdapter<Output> GetMethod()
    {
        return method_;
    }

private:
    ara::com::internal::proxy::method::MethodAdapter<Output> method_;
};

class Reboot {
public:
    struct Output {
        ::Int32 result;

        static bool IsPlane()
        {
            return true;
        }

        using IsEnumerableTag = void;
        template<typename F>
        void enumerate(F& fun)
        {
            fun(result);
        }

        template<typename F>
        void enumerate(F& fun) const
        {
            fun(result);
        }

        bool operator == (const Output& t) const
        {
           return (result == t.result);
        }
    };

    Reboot(std::shared_ptr<vrtf::vcc::Proxy>& proxy, ara::com::internal::EntityId entityId): method_(proxy, entityId){}
    void Initialize(std::shared_ptr<vrtf::vcc::Proxy>& proxy, ara::com::internal::EntityId entityId)
    {
        method_.Initialize(proxy, entityId);
    }
    ara::core::Future<Output> operator()()
    {
        return method_();
    }

    ara::com::internal::proxy::method::MethodAdapter<Output> GetMethod()
    {
        return method_;
    }

private:
    ara::com::internal::proxy::method::MethodAdapter<Output> method_;
};

class Rollback {
public:
    struct Output {
        ::Int32 result;

        static bool IsPlane()
        {
            return false;
        }

        using IsEnumerableTag = void;
        template<typename F>
        void enumerate(F& fun)
        {
            fun(result);
        }

        template<typename F>
        void enumerate(F& fun) const
        {
            fun(result);
        }

        bool operator == (const Output& t) const
        {
           return (result == t.result);
        }
    };

    Rollback(std::shared_ptr<vrtf::vcc::Proxy>& proxy, ara::com::internal::EntityId entityId): method_(proxy, entityId){}
    void Initialize(std::shared_ptr<vrtf::vcc::Proxy>& proxy, ara::com::internal::EntityId entityId)
    {
        method_.Initialize(proxy, entityId);
    }
    ara::core::Future<Output> operator()(const ::String& devName)
    {
        return method_(devName);
    }

    ara::com::internal::proxy::method::MethodAdapter<Output, ::String> GetMethod()
    {
        return method_;
    }

private:
    ara::com::internal::proxy::method::MethodAdapter<Output, ::String> method_;
};

class SensorMsgProxy {
public:
    struct Output {
        ::mdc::devm::Uint8List respData;
        ::Int32 result;

        static bool IsPlane()
        {
            return false;
        }

        using IsEnumerableTag = void;
        template<typename F>
        void enumerate(F& fun)
        {
            fun(respData);
            fun(result);
        }

        template<typename F>
        void enumerate(F& fun) const
        {
            fun(respData);
            fun(result);
        }

        bool operator == (const Output& t) const
        {
           return (respData == t.respData) && (result == t.result);
        }
    };

    SensorMsgProxy(std::shared_ptr<vrtf::vcc::Proxy>& proxy, ara::com::internal::EntityId entityId): method_(proxy, entityId){}
    void Initialize(std::shared_ptr<vrtf::vcc::Proxy>& proxy, ara::com::internal::EntityId entityId)
    {
        method_.Initialize(proxy, entityId);
    }
    ara::core::Future<Output> operator()(const ::String& devName, const ::mdc::devm::SensorInMsg& reqMsgData)
    {
        return method_(devName, reqMsgData);
    }

    ara::com::internal::proxy::method::MethodAdapter<Output, ::String, ::mdc::devm::SensorInMsg> GetMethod()
    {
        return method_;
    }

private:
    ara::com::internal::proxy::method::MethodAdapter<Output, ::String, ::mdc::devm::SensorInMsg> method_;
};

class SetCanCtrlConfig {
public:
    struct Output {
        ::Int32 result;

        static bool IsPlane()
        {
            return false;
        }

        using IsEnumerableTag = void;
        template<typename F>
        void enumerate(F& fun)
        {
            fun(result);
        }

        template<typename F>
        void enumerate(F& fun) const
        {
            fun(result);
        }

        bool operator == (const Output& t) const
        {
           return (result == t.result);
        }
    };

    SetCanCtrlConfig(std::shared_ptr<vrtf::vcc::Proxy>& proxy, ara::com::internal::EntityId entityId): method_(proxy, entityId){}
    void Initialize(std::shared_ptr<vrtf::vcc::Proxy>& proxy, ara::com::internal::EntityId entityId)
    {
        method_.Initialize(proxy, entityId);
    }
    ara::core::Future<Output> operator()(const ::mdc::devm::CanCtrlConfig& canControlConfig)
    {
        return method_(canControlConfig);
    }

    ara::com::internal::proxy::method::MethodAdapter<Output, ::mdc::devm::CanCtrlConfig> GetMethod()
    {
        return method_;
    }

private:
    ara::com::internal::proxy::method::MethodAdapter<Output, ::mdc::devm::CanCtrlConfig> method_;
};

class SetConfig {
public:
    struct Output {
        ::Int32 result;

        static bool IsPlane()
        {
            return false;
        }

        using IsEnumerableTag = void;
        template<typename F>
        void enumerate(F& fun)
        {
            fun(result);
        }

        template<typename F>
        void enumerate(F& fun) const
        {
            fun(result);
        }

        bool operator == (const Output& t) const
        {
           return (result == t.result);
        }
    };

    SetConfig(std::shared_ptr<vrtf::vcc::Proxy>& proxy, ara::com::internal::EntityId entityId): method_(proxy, entityId){}
    void Initialize(std::shared_ptr<vrtf::vcc::Proxy>& proxy, ara::com::internal::EntityId entityId)
    {
        method_.Initialize(proxy, entityId);
    }
    ara::core::Future<Output> operator()(const ::String& devName, const ::mdc::devm::Items& itemList)
    {
        return method_(devName, itemList);
    }

    ara::com::internal::proxy::method::MethodAdapter<Output, ::String, ::mdc::devm::Items> GetMethod()
    {
        return method_;
    }

private:
    ara::com::internal::proxy::method::MethodAdapter<Output, ::String, ::mdc::devm::Items> method_;
};

class SetMasterMode {
public:
    struct Output {
        ::Int32 result;

        static bool IsPlane()
        {
            return true;
        }

        using IsEnumerableTag = void;
        template<typename F>
        void enumerate(F& fun)
        {
            fun(result);
        }

        template<typename F>
        void enumerate(F& fun) const
        {
            fun(result);
        }

        bool operator == (const Output& t) const
        {
           return (result == t.result);
        }
    };

    SetMasterMode(std::shared_ptr<vrtf::vcc::Proxy>& proxy, ara::com::internal::EntityId entityId): method_(proxy, entityId){}
    void Initialize(std::shared_ptr<vrtf::vcc::Proxy>& proxy, ara::com::internal::EntityId entityId)
    {
        method_.Initialize(proxy, entityId);
    }
    ara::core::Future<Output> operator()(const ::UInt8& mode, const ::UInt8& type)
    {
        return method_(mode, type);
    }

    ara::com::internal::proxy::method::MethodAdapter<Output, ::UInt8, ::UInt8> GetMethod()
    {
        return method_;
    }

private:
    ara::com::internal::proxy::method::MethodAdapter<Output, ::UInt8, ::UInt8> method_;
};

class SetMcuSystemStatus {
public:
    struct Output {
        ::UInt8 result;

        static bool IsPlane()
        {
            return true;
        }

        using IsEnumerableTag = void;
        template<typename F>
        void enumerate(F& fun)
        {
            fun(result);
        }

        template<typename F>
        void enumerate(F& fun) const
        {
            fun(result);
        }

        bool operator == (const Output& t) const
        {
           return (result == t.result);
        }
    };

    SetMcuSystemStatus(std::shared_ptr<vrtf::vcc::Proxy>& proxy, ara::com::internal::EntityId entityId): method_(proxy, entityId){}
    void Initialize(std::shared_ptr<vrtf::vcc::Proxy>& proxy, ara::com::internal::EntityId entityId)
    {
        method_.Initialize(proxy, entityId);
    }
    ara::core::Future<Output> operator()(const ::UInt8& type)
    {
        return method_(type);
    }

    ara::com::internal::proxy::method::MethodAdapter<Output, ::UInt8> GetMethod()
    {
        return method_;
    }

private:
    ara::com::internal::proxy::method::MethodAdapter<Output, ::UInt8> method_;
};

class SetSleepReason {
public:
    struct Output {
        ::UInt8 result;

        static bool IsPlane()
        {
            return true;
        }

        using IsEnumerableTag = void;
        template<typename F>
        void enumerate(F& fun)
        {
            fun(result);
        }

        template<typename F>
        void enumerate(F& fun) const
        {
            fun(result);
        }

        bool operator == (const Output& t) const
        {
           return (result == t.result);
        }
    };

    SetSleepReason(std::shared_ptr<vrtf::vcc::Proxy>& proxy, ara::com::internal::EntityId entityId): method_(proxy, entityId){}
    void Initialize(std::shared_ptr<vrtf::vcc::Proxy>& proxy, ara::com::internal::EntityId entityId)
    {
        method_.Initialize(proxy, entityId);
    }
    ara::core::Future<Output> operator()(const ::UInt8& reason)
    {
        return method_(reason);
    }

    ara::com::internal::proxy::method::MethodAdapter<Output, ::UInt8> GetMethod()
    {
        return method_;
    }

private:
    ara::com::internal::proxy::method::MethodAdapter<Output, ::UInt8> method_;
};

class SetSysPowerOffInfoReaded {
public:
    struct Output {
        ::Int32 result;

        static bool IsPlane()
        {
            return true;
        }

        using IsEnumerableTag = void;
        template<typename F>
        void enumerate(F& fun)
        {
            fun(result);
        }

        template<typename F>
        void enumerate(F& fun) const
        {
            fun(result);
        }

        bool operator == (const Output& t) const
        {
           return (result == t.result);
        }
    };

    SetSysPowerOffInfoReaded(std::shared_ptr<vrtf::vcc::Proxy>& proxy, ara::com::internal::EntityId entityId): method_(proxy, entityId){}
    void Initialize(std::shared_ptr<vrtf::vcc::Proxy>& proxy, ara::com::internal::EntityId entityId)
    {
        method_.Initialize(proxy, entityId);
    }
    ara::core::Future<Output> operator()()
    {
        return method_();
    }

    ara::com::internal::proxy::method::MethodAdapter<Output> GetMethod()
    {
        return method_;
    }

private:
    ara::com::internal::proxy::method::MethodAdapter<Output> method_;
};

class SetWorkMode {
public:
    struct Output {
        ::Int32 result;

        static bool IsPlane()
        {
            return true;
        }

        using IsEnumerableTag = void;
        template<typename F>
        void enumerate(F& fun)
        {
            fun(result);
        }

        template<typename F>
        void enumerate(F& fun) const
        {
            fun(result);
        }

        bool operator == (const Output& t) const
        {
           return (result == t.result);
        }
    };

    SetWorkMode(std::shared_ptr<vrtf::vcc::Proxy>& proxy, ara::com::internal::EntityId entityId): method_(proxy, entityId){}
    void Initialize(std::shared_ptr<vrtf::vcc::Proxy>& proxy, ara::com::internal::EntityId entityId)
    {
        method_.Initialize(proxy, entityId);
    }
    ara::core::Future<Output> operator()(const ::UInt8& mode)
    {
        return method_(mode);
    }

    ara::com::internal::proxy::method::MethodAdapter<Output, ::UInt8> GetMethod()
    {
        return method_;
    }

private:
    ara::com::internal::proxy::method::MethodAdapter<Output, ::UInt8> method_;
};

class TranConfig {
public:
    struct Output {
        ::Int32 result;

        static bool IsPlane()
        {
            return false;
        }

        using IsEnumerableTag = void;
        template<typename F>
        void enumerate(F& fun)
        {
            fun(result);
        }

        template<typename F>
        void enumerate(F& fun) const
        {
            fun(result);
        }

        bool operator == (const Output& t) const
        {
           return (result == t.result);
        }
    };

    TranConfig(std::shared_ptr<vrtf::vcc::Proxy>& proxy, ara::com::internal::EntityId entityId): method_(proxy, entityId){}
    void Initialize(std::shared_ptr<vrtf::vcc::Proxy>& proxy, ara::com::internal::EntityId entityId)
    {
        method_.Initialize(proxy, entityId);
    }
    ara::core::Future<Output> operator()(const ::String& devName, const ::mdc::devm::Uint8List& config)
    {
        return method_(devName, config);
    }

    ara::com::internal::proxy::method::MethodAdapter<Output, ::String, ::mdc::devm::Uint8List> GetMethod()
    {
        return method_;
    }

private:
    ara::com::internal::proxy::method::MethodAdapter<Output, ::String, ::mdc::devm::Uint8List> method_;
};

class Update {
public:
    struct Output {
        ::Int32 result;

        static bool IsPlane()
        {
            return false;
        }

        using IsEnumerableTag = void;
        template<typename F>
        void enumerate(F& fun)
        {
            fun(result);
        }

        template<typename F>
        void enumerate(F& fun) const
        {
            fun(result);
        }

        bool operator == (const Output& t) const
        {
           return (result == t.result);
        }
    };

    Update(std::shared_ptr<vrtf::vcc::Proxy>& proxy, ara::com::internal::EntityId entityId): method_(proxy, entityId){}
    void Initialize(std::shared_ptr<vrtf::vcc::Proxy>& proxy, ara::com::internal::EntityId entityId)
    {
        method_.Initialize(proxy, entityId);
    }
    ara::core::Future<Output> operator()(const ::String& devName, const ::String& packgName, const ::String& filePath)
    {
        return method_(devName, packgName, filePath);
    }

    ara::com::internal::proxy::method::MethodAdapter<Output, ::String, ::String, ::String> GetMethod()
    {
        return method_;
    }

private:
    ara::com::internal::proxy::method::MethodAdapter<Output, ::String, ::String, ::String> method_;
};

class UpdateSyncStart {
public:
    struct Output {
        ::Int32 result;

        static bool IsPlane()
        {
            return false;
        }

        using IsEnumerableTag = void;
        template<typename F>
        void enumerate(F& fun)
        {
            fun(result);
        }

        template<typename F>
        void enumerate(F& fun) const
        {
            fun(result);
        }

        bool operator == (const Output& t) const
        {
           return (result == t.result);
        }
    };

    UpdateSyncStart(std::shared_ptr<vrtf::vcc::Proxy>& proxy, ara::com::internal::EntityId entityId): method_(proxy, entityId){}
    void Initialize(std::shared_ptr<vrtf::vcc::Proxy>& proxy, ara::com::internal::EntityId entityId)
    {
        method_.Initialize(proxy, entityId);
    }
    ara::core::Future<Output> operator()(const ::String& devName, const ::String& pkgName)
    {
        return method_(devName, pkgName);
    }

    ara::com::internal::proxy::method::MethodAdapter<Output, ::String, ::String> GetMethod()
    {
        return method_;
    }

private:
    ara::com::internal::proxy::method::MethodAdapter<Output, ::String, ::String> method_;
};
} // namespace methods

class DevmCenterServiceInterfaceProxy {
private:
    std::unique_ptr<ara::com::internal::proxy::ProxyAdapter> proxyAdapter;
public:
    using HandleType = vrtf::vcc::api::types::HandleType;
    class ConstructionToken {
    public:
        ConstructionToken(std::unique_ptr<ara::com::internal::proxy::ProxyAdapter> proxy): ptr(std::move(proxy)){}
        ConstructionToken(ConstructionToken&& other) : ptr(std::move(other.ptr)) {}
        ConstructionToken& operator=(ConstructionToken && other)
        {
            if (&other != this) {
                ptr = std::move(other.ptr);
            }
            return *this;
        }
        ConstructionToken(const ConstructionToken&) = delete;
        ConstructionToken& operator = (const ConstructionToken&) = delete;
        std::unique_ptr<ara::com::internal::proxy::ProxyAdapter> GetProxyAdapter()
        {
            return std::move(ptr);
        }
    private:
        std::unique_ptr<ara::com::internal::proxy::ProxyAdapter> ptr;
    };

    virtual ~DevmCenterServiceInterfaceProxy()
    {
        FaultReportDmEvent.UnsetReceiveHandler();
        FaultReportDmEvent.Unsubscribe();
        FaultReportPhmEvent.UnsetReceiveHandler();
        FaultReportPhmEvent.Unsubscribe();
    }

    explicit DevmCenterServiceInterfaceProxy(const vrtf::vcc::api::types::HandleType &handle)
        : proxyAdapter(std::make_unique<ara::com::internal::proxy::ProxyAdapter>(::mdc::devm::devmc::DevmCenterServiceInterface::ServiceIdentifier, handle)),
          FaultReportDmEvent(proxyAdapter->GetProxy(), events::FaultReportDmEventId, proxyAdapter->GetHandle(), ::mdc::devm::devmc::DevmCenterServiceInterface::ServiceIdentifier),
          FaultReportPhmEvent(proxyAdapter->GetProxy(), events::FaultReportPhmEventId, proxyAdapter->GetHandle(), ::mdc::devm::devmc::DevmCenterServiceInterface::ServiceIdentifier),
          CanNetMgrCtrl(proxyAdapter->GetProxy(), methods::CanNetMgrCtrlId),
          CheckUpdateCondition(proxyAdapter->GetProxy(), methods::CheckUpdateConditionId),
          DidOperate(proxyAdapter->GetProxy(), methods::DidOperateId),
          DoSensorAction(proxyAdapter->GetProxy(), methods::DoSensorActionId),
          DoSystemAction(proxyAdapter->GetProxy(), methods::DoSystemActionId),
          GetClock(proxyAdapter->GetProxy(), methods::GetClockId),
          GetConfig(proxyAdapter->GetProxy(), methods::GetConfigId),
          GetDevAttribute(proxyAdapter->GetProxy(), methods::GetDevAttributeId),
          GetDeviceInfo(proxyAdapter->GetProxy(), methods::GetDeviceInfoId),
          GetDeviceList(proxyAdapter->GetProxy(), methods::GetDeviceListId),
          GetMasterMode(proxyAdapter->GetProxy(), methods::GetMasterModeId),
          GetPowerOptType(proxyAdapter->GetProxy(), methods::GetPowerOptTypeId),
          GetState(proxyAdapter->GetProxy(), methods::GetStateId),
          GetStatisticsInfo(proxyAdapter->GetProxy(), methods::GetStatisticsInfoId),
          GetSysPowerOffInfo(proxyAdapter->GetProxy(), methods::GetSysPowerOffInfoId),
          GetTemperature(proxyAdapter->GetProxy(), methods::GetTemperatureId),
          GetUpdateState(proxyAdapter->GetProxy(), methods::GetUpdateStateId),
          GetUpgradableDeviceList(proxyAdapter->GetProxy(), methods::GetUpgradableDeviceListId),
          GetUpgradeInfo(proxyAdapter->GetProxy(), methods::GetUpgradeInfoId),
          GetVoltage(proxyAdapter->GetProxy(), methods::GetVoltageId),
          GetWorkMode(proxyAdapter->GetProxy(), methods::GetWorkModeId),
          Reboot(proxyAdapter->GetProxy(), methods::RebootId),
          Rollback(proxyAdapter->GetProxy(), methods::RollbackId),
          SensorMsgProxy(proxyAdapter->GetProxy(), methods::SensorMsgProxyId),
          SetCanCtrlConfig(proxyAdapter->GetProxy(), methods::SetCanCtrlConfigId),
          SetConfig(proxyAdapter->GetProxy(), methods::SetConfigId),
          SetMasterMode(proxyAdapter->GetProxy(), methods::SetMasterModeId),
          SetMcuSystemStatus(proxyAdapter->GetProxy(), methods::SetMcuSystemStatusId),
          SetSleepReason(proxyAdapter->GetProxy(), methods::SetSleepReasonId),
          SetSysPowerOffInfoReaded(proxyAdapter->GetProxy(), methods::SetSysPowerOffInfoReadedId),
          SetWorkMode(proxyAdapter->GetProxy(), methods::SetWorkModeId),
          TranConfig(proxyAdapter->GetProxy(), methods::TranConfigId),
          Update(proxyAdapter->GetProxy(), methods::UpdateId),
          UpdateSyncStart(proxyAdapter->GetProxy(), methods::UpdateSyncStartId){
            ara::core::Result<void> resultCanNetMgrCtrl = proxyAdapter->InitializeMethod<methods::CanNetMgrCtrl::Output>(methods::CanNetMgrCtrlId);
            ThrowError(resultCanNetMgrCtrl);
            ara::core::Result<void> resultCheckUpdateCondition = proxyAdapter->InitializeMethod<methods::CheckUpdateCondition::Output>(methods::CheckUpdateConditionId);
            ThrowError(resultCheckUpdateCondition);
            ara::core::Result<void> resultDidOperate = proxyAdapter->InitializeMethod<methods::DidOperate::Output>(methods::DidOperateId);
            ThrowError(resultDidOperate);
            ara::core::Result<void> resultDoSensorAction = proxyAdapter->InitializeMethod<methods::DoSensorAction::Output>(methods::DoSensorActionId);
            ThrowError(resultDoSensorAction);
            ara::core::Result<void> resultDoSystemAction = proxyAdapter->InitializeMethod<methods::DoSystemAction::Output>(methods::DoSystemActionId);
            ThrowError(resultDoSystemAction);
            ara::core::Result<void> resultGetClock = proxyAdapter->InitializeMethod<methods::GetClock::Output>(methods::GetClockId);
            ThrowError(resultGetClock);
            ara::core::Result<void> resultGetConfig = proxyAdapter->InitializeMethod<methods::GetConfig::Output>(methods::GetConfigId);
            ThrowError(resultGetConfig);
            ara::core::Result<void> resultGetDevAttribute = proxyAdapter->InitializeMethod<methods::GetDevAttribute::Output>(methods::GetDevAttributeId);
            ThrowError(resultGetDevAttribute);
            ara::core::Result<void> resultGetDeviceInfo = proxyAdapter->InitializeMethod<methods::GetDeviceInfo::Output>(methods::GetDeviceInfoId);
            ThrowError(resultGetDeviceInfo);
            ara::core::Result<void> resultGetDeviceList = proxyAdapter->InitializeMethod<methods::GetDeviceList::Output>(methods::GetDeviceListId);
            ThrowError(resultGetDeviceList);
            ara::core::Result<void> resultGetMasterMode = proxyAdapter->InitializeMethod<methods::GetMasterMode::Output>(methods::GetMasterModeId);
            ThrowError(resultGetMasterMode);
            ara::core::Result<void> resultGetPowerOptType = proxyAdapter->InitializeMethod<methods::GetPowerOptType::Output>(methods::GetPowerOptTypeId);
            ThrowError(resultGetPowerOptType);
            ara::core::Result<void> resultGetState = proxyAdapter->InitializeMethod<methods::GetState::Output>(methods::GetStateId);
            ThrowError(resultGetState);
            ara::core::Result<void> resultGetStatisticsInfo = proxyAdapter->InitializeMethod<methods::GetStatisticsInfo::Output>(methods::GetStatisticsInfoId);
            ThrowError(resultGetStatisticsInfo);
            ara::core::Result<void> resultGetSysPowerOffInfo = proxyAdapter->InitializeMethod<methods::GetSysPowerOffInfo::Output>(methods::GetSysPowerOffInfoId);
            ThrowError(resultGetSysPowerOffInfo);
            ara::core::Result<void> resultGetTemperature = proxyAdapter->InitializeMethod<methods::GetTemperature::Output>(methods::GetTemperatureId);
            ThrowError(resultGetTemperature);
            ara::core::Result<void> resultGetUpdateState = proxyAdapter->InitializeMethod<methods::GetUpdateState::Output>(methods::GetUpdateStateId);
            ThrowError(resultGetUpdateState);
            ara::core::Result<void> resultGetUpgradableDeviceList = proxyAdapter->InitializeMethod<methods::GetUpgradableDeviceList::Output>(methods::GetUpgradableDeviceListId);
            ThrowError(resultGetUpgradableDeviceList);
            ara::core::Result<void> resultGetUpgradeInfo = proxyAdapter->InitializeMethod<methods::GetUpgradeInfo::Output>(methods::GetUpgradeInfoId);
            ThrowError(resultGetUpgradeInfo);
            ara::core::Result<void> resultGetVoltage = proxyAdapter->InitializeMethod<methods::GetVoltage::Output>(methods::GetVoltageId);
            ThrowError(resultGetVoltage);
            ara::core::Result<void> resultGetWorkMode = proxyAdapter->InitializeMethod<methods::GetWorkMode::Output>(methods::GetWorkModeId);
            ThrowError(resultGetWorkMode);
            ara::core::Result<void> resultReboot = proxyAdapter->InitializeMethod<methods::Reboot::Output>(methods::RebootId);
            ThrowError(resultReboot);
            ara::core::Result<void> resultRollback = proxyAdapter->InitializeMethod<methods::Rollback::Output>(methods::RollbackId);
            ThrowError(resultRollback);
            ara::core::Result<void> resultSensorMsgProxy = proxyAdapter->InitializeMethod<methods::SensorMsgProxy::Output>(methods::SensorMsgProxyId);
            ThrowError(resultSensorMsgProxy);
            ara::core::Result<void> resultSetCanCtrlConfig = proxyAdapter->InitializeMethod<methods::SetCanCtrlConfig::Output>(methods::SetCanCtrlConfigId);
            ThrowError(resultSetCanCtrlConfig);
            ara::core::Result<void> resultSetConfig = proxyAdapter->InitializeMethod<methods::SetConfig::Output>(methods::SetConfigId);
            ThrowError(resultSetConfig);
            ara::core::Result<void> resultSetMasterMode = proxyAdapter->InitializeMethod<methods::SetMasterMode::Output>(methods::SetMasterModeId);
            ThrowError(resultSetMasterMode);
            ara::core::Result<void> resultSetMcuSystemStatus = proxyAdapter->InitializeMethod<methods::SetMcuSystemStatus::Output>(methods::SetMcuSystemStatusId);
            ThrowError(resultSetMcuSystemStatus);
            ara::core::Result<void> resultSetSleepReason = proxyAdapter->InitializeMethod<methods::SetSleepReason::Output>(methods::SetSleepReasonId);
            ThrowError(resultSetSleepReason);
            ara::core::Result<void> resultSetSysPowerOffInfoReaded = proxyAdapter->InitializeMethod<methods::SetSysPowerOffInfoReaded::Output>(methods::SetSysPowerOffInfoReadedId);
            ThrowError(resultSetSysPowerOffInfoReaded);
            ara::core::Result<void> resultSetWorkMode = proxyAdapter->InitializeMethod<methods::SetWorkMode::Output>(methods::SetWorkModeId);
            ThrowError(resultSetWorkMode);
            ara::core::Result<void> resultTranConfig = proxyAdapter->InitializeMethod<methods::TranConfig::Output>(methods::TranConfigId);
            ThrowError(resultTranConfig);
            ara::core::Result<void> resultUpdate = proxyAdapter->InitializeMethod<methods::Update::Output>(methods::UpdateId);
            ThrowError(resultUpdate);
            ara::core::Result<void> resultUpdateSyncStart = proxyAdapter->InitializeMethod<methods::UpdateSyncStart::Output>(methods::UpdateSyncStartId);
            ThrowError(resultUpdateSyncStart);
        }

    void ThrowError(ara::core::Result<void>& result)
    {
        if (!(result.HasValue())) {
#ifndef NOT_SUPPORT_EXCEPTIONS
            ara::core::ErrorCode errorcode(result.Error());
            throw ara::com::ComException(std::move(errorcode));
#else
            std::cerr << "Error: Not support exception, create skeleton failed!"<< std::endl;
#endif
        }
    }

    DevmCenterServiceInterfaceProxy(const DevmCenterServiceInterfaceProxy&) = delete;
    DevmCenterServiceInterfaceProxy& operator=(const DevmCenterServiceInterfaceProxy&) = delete;

    DevmCenterServiceInterfaceProxy(DevmCenterServiceInterfaceProxy&& other) = default;
    DevmCenterServiceInterfaceProxy& operator=(DevmCenterServiceInterfaceProxy&& other) = default;
    DevmCenterServiceInterfaceProxy(ConstructionToken&& token) noexcept
        : proxyAdapter(token.GetProxyAdapter()),
          FaultReportDmEvent(proxyAdapter->GetProxy(), events::FaultReportDmEventId, proxyAdapter->GetHandle(), ::mdc::devm::devmc::DevmCenterServiceInterface::ServiceIdentifier),
          FaultReportPhmEvent(proxyAdapter->GetProxy(), events::FaultReportPhmEventId, proxyAdapter->GetHandle(), ::mdc::devm::devmc::DevmCenterServiceInterface::ServiceIdentifier),
          CanNetMgrCtrl(proxyAdapter->GetProxy(), methods::CanNetMgrCtrlId),
          CheckUpdateCondition(proxyAdapter->GetProxy(), methods::CheckUpdateConditionId),
          DidOperate(proxyAdapter->GetProxy(), methods::DidOperateId),
          DoSensorAction(proxyAdapter->GetProxy(), methods::DoSensorActionId),
          DoSystemAction(proxyAdapter->GetProxy(), methods::DoSystemActionId),
          GetClock(proxyAdapter->GetProxy(), methods::GetClockId),
          GetConfig(proxyAdapter->GetProxy(), methods::GetConfigId),
          GetDevAttribute(proxyAdapter->GetProxy(), methods::GetDevAttributeId),
          GetDeviceInfo(proxyAdapter->GetProxy(), methods::GetDeviceInfoId),
          GetDeviceList(proxyAdapter->GetProxy(), methods::GetDeviceListId),
          GetMasterMode(proxyAdapter->GetProxy(), methods::GetMasterModeId),
          GetPowerOptType(proxyAdapter->GetProxy(), methods::GetPowerOptTypeId),
          GetState(proxyAdapter->GetProxy(), methods::GetStateId),
          GetStatisticsInfo(proxyAdapter->GetProxy(), methods::GetStatisticsInfoId),
          GetSysPowerOffInfo(proxyAdapter->GetProxy(), methods::GetSysPowerOffInfoId),
          GetTemperature(proxyAdapter->GetProxy(), methods::GetTemperatureId),
          GetUpdateState(proxyAdapter->GetProxy(), methods::GetUpdateStateId),
          GetUpgradableDeviceList(proxyAdapter->GetProxy(), methods::GetUpgradableDeviceListId),
          GetUpgradeInfo(proxyAdapter->GetProxy(), methods::GetUpgradeInfoId),
          GetVoltage(proxyAdapter->GetProxy(), methods::GetVoltageId),
          GetWorkMode(proxyAdapter->GetProxy(), methods::GetWorkModeId),
          Reboot(proxyAdapter->GetProxy(), methods::RebootId),
          Rollback(proxyAdapter->GetProxy(), methods::RollbackId),
          SensorMsgProxy(proxyAdapter->GetProxy(), methods::SensorMsgProxyId),
          SetCanCtrlConfig(proxyAdapter->GetProxy(), methods::SetCanCtrlConfigId),
          SetConfig(proxyAdapter->GetProxy(), methods::SetConfigId),
          SetMasterMode(proxyAdapter->GetProxy(), methods::SetMasterModeId),
          SetMcuSystemStatus(proxyAdapter->GetProxy(), methods::SetMcuSystemStatusId),
          SetSleepReason(proxyAdapter->GetProxy(), methods::SetSleepReasonId),
          SetSysPowerOffInfoReaded(proxyAdapter->GetProxy(), methods::SetSysPowerOffInfoReadedId),
          SetWorkMode(proxyAdapter->GetProxy(), methods::SetWorkModeId),
          TranConfig(proxyAdapter->GetProxy(), methods::TranConfigId),
          Update(proxyAdapter->GetProxy(), methods::UpdateId),
          UpdateSyncStart(proxyAdapter->GetProxy(), methods::UpdateSyncStartId){
    }

    static ara::core::Result<ConstructionToken> Preconstruct(
        const vrtf::vcc::api::types::HandleType &handle)
    {
        std::unique_ptr<ara::com::internal::proxy::ProxyAdapter> preProxyAdapter =
            std::make_unique<ara::com::internal::proxy::ProxyAdapter>(
               ::mdc::devm::devmc::DevmCenterServiceInterface::ServiceIdentifier, handle);
        bool result = true;
        ara::core::Result<void> initResult;
        do {
            methods::CanNetMgrCtrl CanNetMgrCtrl(preProxyAdapter->GetProxy(), methods::CanNetMgrCtrlId);
            initResult = preProxyAdapter->InitializeMethod<methods::CanNetMgrCtrl::Output>(methods::CanNetMgrCtrlId);
            if (!initResult.HasValue()) {
                result = false;
                break;
            }
            methods::CheckUpdateCondition CheckUpdateCondition(preProxyAdapter->GetProxy(), methods::CheckUpdateConditionId);
            initResult = preProxyAdapter->InitializeMethod<methods::CheckUpdateCondition::Output>(methods::CheckUpdateConditionId);
            if (!initResult.HasValue()) {
                result = false;
                break;
            }
            methods::DidOperate DidOperate(preProxyAdapter->GetProxy(), methods::DidOperateId);
            initResult = preProxyAdapter->InitializeMethod<methods::DidOperate::Output>(methods::DidOperateId);
            if (!initResult.HasValue()) {
                result = false;
                break;
            }
            methods::DoSensorAction DoSensorAction(preProxyAdapter->GetProxy(), methods::DoSensorActionId);
            initResult = preProxyAdapter->InitializeMethod<methods::DoSensorAction::Output>(methods::DoSensorActionId);
            if (!initResult.HasValue()) {
                result = false;
                break;
            }
            methods::DoSystemAction DoSystemAction(preProxyAdapter->GetProxy(), methods::DoSystemActionId);
            initResult = preProxyAdapter->InitializeMethod<methods::DoSystemAction::Output>(methods::DoSystemActionId);
            if (!initResult.HasValue()) {
                result = false;
                break;
            }
            methods::GetClock GetClock(preProxyAdapter->GetProxy(), methods::GetClockId);
            initResult = preProxyAdapter->InitializeMethod<methods::GetClock::Output>(methods::GetClockId);
            if (!initResult.HasValue()) {
                result = false;
                break;
            }
            methods::GetConfig GetConfig(preProxyAdapter->GetProxy(), methods::GetConfigId);
            initResult = preProxyAdapter->InitializeMethod<methods::GetConfig::Output>(methods::GetConfigId);
            if (!initResult.HasValue()) {
                result = false;
                break;
            }
            methods::GetDevAttribute GetDevAttribute(preProxyAdapter->GetProxy(), methods::GetDevAttributeId);
            initResult = preProxyAdapter->InitializeMethod<methods::GetDevAttribute::Output>(methods::GetDevAttributeId);
            if (!initResult.HasValue()) {
                result = false;
                break;
            }
            methods::GetDeviceInfo GetDeviceInfo(preProxyAdapter->GetProxy(), methods::GetDeviceInfoId);
            initResult = preProxyAdapter->InitializeMethod<methods::GetDeviceInfo::Output>(methods::GetDeviceInfoId);
            if (!initResult.HasValue()) {
                result = false;
                break;
            }
            methods::GetDeviceList GetDeviceList(preProxyAdapter->GetProxy(), methods::GetDeviceListId);
            initResult = preProxyAdapter->InitializeMethod<methods::GetDeviceList::Output>(methods::GetDeviceListId);
            if (!initResult.HasValue()) {
                result = false;
                break;
            }
            methods::GetMasterMode GetMasterMode(preProxyAdapter->GetProxy(), methods::GetMasterModeId);
            initResult = preProxyAdapter->InitializeMethod<methods::GetMasterMode::Output>(methods::GetMasterModeId);
            if (!initResult.HasValue()) {
                result = false;
                break;
            }
            methods::GetPowerOptType GetPowerOptType(preProxyAdapter->GetProxy(), methods::GetPowerOptTypeId);
            initResult = preProxyAdapter->InitializeMethod<methods::GetPowerOptType::Output>(methods::GetPowerOptTypeId);
            if (!initResult.HasValue()) {
                result = false;
                break;
            }
            methods::GetState GetState(preProxyAdapter->GetProxy(), methods::GetStateId);
            initResult = preProxyAdapter->InitializeMethod<methods::GetState::Output>(methods::GetStateId);
            if (!initResult.HasValue()) {
                result = false;
                break;
            }
            methods::GetStatisticsInfo GetStatisticsInfo(preProxyAdapter->GetProxy(), methods::GetStatisticsInfoId);
            initResult = preProxyAdapter->InitializeMethod<methods::GetStatisticsInfo::Output>(methods::GetStatisticsInfoId);
            if (!initResult.HasValue()) {
                result = false;
                break;
            }
            methods::GetSysPowerOffInfo GetSysPowerOffInfo(preProxyAdapter->GetProxy(), methods::GetSysPowerOffInfoId);
            initResult = preProxyAdapter->InitializeMethod<methods::GetSysPowerOffInfo::Output>(methods::GetSysPowerOffInfoId);
            if (!initResult.HasValue()) {
                result = false;
                break;
            }
            methods::GetTemperature GetTemperature(preProxyAdapter->GetProxy(), methods::GetTemperatureId);
            initResult = preProxyAdapter->InitializeMethod<methods::GetTemperature::Output>(methods::GetTemperatureId);
            if (!initResult.HasValue()) {
                result = false;
                break;
            }
            methods::GetUpdateState GetUpdateState(preProxyAdapter->GetProxy(), methods::GetUpdateStateId);
            initResult = preProxyAdapter->InitializeMethod<methods::GetUpdateState::Output>(methods::GetUpdateStateId);
            if (!initResult.HasValue()) {
                result = false;
                break;
            }
            methods::GetUpgradableDeviceList GetUpgradableDeviceList(preProxyAdapter->GetProxy(), methods::GetUpgradableDeviceListId);
            initResult = preProxyAdapter->InitializeMethod<methods::GetUpgradableDeviceList::Output>(methods::GetUpgradableDeviceListId);
            if (!initResult.HasValue()) {
                result = false;
                break;
            }
            methods::GetUpgradeInfo GetUpgradeInfo(preProxyAdapter->GetProxy(), methods::GetUpgradeInfoId);
            initResult = preProxyAdapter->InitializeMethod<methods::GetUpgradeInfo::Output>(methods::GetUpgradeInfoId);
            if (!initResult.HasValue()) {
                result = false;
                break;
            }
            methods::GetVoltage GetVoltage(preProxyAdapter->GetProxy(), methods::GetVoltageId);
            initResult = preProxyAdapter->InitializeMethod<methods::GetVoltage::Output>(methods::GetVoltageId);
            if (!initResult.HasValue()) {
                result = false;
                break;
            }
            methods::GetWorkMode GetWorkMode(preProxyAdapter->GetProxy(), methods::GetWorkModeId);
            initResult = preProxyAdapter->InitializeMethod<methods::GetWorkMode::Output>(methods::GetWorkModeId);
            if (!initResult.HasValue()) {
                result = false;
                break;
            }
            methods::Reboot Reboot(preProxyAdapter->GetProxy(), methods::RebootId);
            initResult = preProxyAdapter->InitializeMethod<methods::Reboot::Output>(methods::RebootId);
            if (!initResult.HasValue()) {
                result = false;
                break;
            }
            methods::Rollback Rollback(preProxyAdapter->GetProxy(), methods::RollbackId);
            initResult = preProxyAdapter->InitializeMethod<methods::Rollback::Output>(methods::RollbackId);
            if (!initResult.HasValue()) {
                result = false;
                break;
            }
            methods::SensorMsgProxy SensorMsgProxy(preProxyAdapter->GetProxy(), methods::SensorMsgProxyId);
            initResult = preProxyAdapter->InitializeMethod<methods::SensorMsgProxy::Output>(methods::SensorMsgProxyId);
            if (!initResult.HasValue()) {
                result = false;
                break;
            }
            methods::SetCanCtrlConfig SetCanCtrlConfig(preProxyAdapter->GetProxy(), methods::SetCanCtrlConfigId);
            initResult = preProxyAdapter->InitializeMethod<methods::SetCanCtrlConfig::Output>(methods::SetCanCtrlConfigId);
            if (!initResult.HasValue()) {
                result = false;
                break;
            }
            methods::SetConfig SetConfig(preProxyAdapter->GetProxy(), methods::SetConfigId);
            initResult = preProxyAdapter->InitializeMethod<methods::SetConfig::Output>(methods::SetConfigId);
            if (!initResult.HasValue()) {
                result = false;
                break;
            }
            methods::SetMasterMode SetMasterMode(preProxyAdapter->GetProxy(), methods::SetMasterModeId);
            initResult = preProxyAdapter->InitializeMethod<methods::SetMasterMode::Output>(methods::SetMasterModeId);
            if (!initResult.HasValue()) {
                result = false;
                break;
            }
            methods::SetMcuSystemStatus SetMcuSystemStatus(preProxyAdapter->GetProxy(), methods::SetMcuSystemStatusId);
            initResult = preProxyAdapter->InitializeMethod<methods::SetMcuSystemStatus::Output>(methods::SetMcuSystemStatusId);
            if (!initResult.HasValue()) {
                result = false;
                break;
            }
            methods::SetSleepReason SetSleepReason(preProxyAdapter->GetProxy(), methods::SetSleepReasonId);
            initResult = preProxyAdapter->InitializeMethod<methods::SetSleepReason::Output>(methods::SetSleepReasonId);
            if (!initResult.HasValue()) {
                result = false;
                break;
            }
            methods::SetSysPowerOffInfoReaded SetSysPowerOffInfoReaded(preProxyAdapter->GetProxy(), methods::SetSysPowerOffInfoReadedId);
            initResult = preProxyAdapter->InitializeMethod<methods::SetSysPowerOffInfoReaded::Output>(methods::SetSysPowerOffInfoReadedId);
            if (!initResult.HasValue()) {
                result = false;
                break;
            }
            methods::SetWorkMode SetWorkMode(preProxyAdapter->GetProxy(), methods::SetWorkModeId);
            initResult = preProxyAdapter->InitializeMethod<methods::SetWorkMode::Output>(methods::SetWorkModeId);
            if (!initResult.HasValue()) {
                result = false;
                break;
            }
            methods::TranConfig TranConfig(preProxyAdapter->GetProxy(), methods::TranConfigId);
            initResult = preProxyAdapter->InitializeMethod<methods::TranConfig::Output>(methods::TranConfigId);
            if (!initResult.HasValue()) {
                result = false;
                break;
            }
            methods::Update Update(preProxyAdapter->GetProxy(), methods::UpdateId);
            initResult = preProxyAdapter->InitializeMethod<methods::Update::Output>(methods::UpdateId);
            if (!initResult.HasValue()) {
                result = false;
                break;
            }
            methods::UpdateSyncStart UpdateSyncStart(preProxyAdapter->GetProxy(), methods::UpdateSyncStartId);
            initResult = preProxyAdapter->InitializeMethod<methods::UpdateSyncStart::Output>(methods::UpdateSyncStartId);
            if (!initResult.HasValue()) {
                result = false;
                break;
            }
        } while(false);
        
        if (result == true) {
            ConstructionToken token(std::move(preProxyAdapter));
            return ara::core::Result<ConstructionToken>(std::move(token));
        } else {
            ConstructionToken token(std::move(preProxyAdapter));
            ara::core::Result<ConstructionToken> result(std::move(token));
            ara::core::ErrorCode errorcode(initResult.Error());
            result.EmplaceError(errorcode);
            return result;
        }
    }


    static ara::com::FindServiceHandle StartFindService(
        ara::com::FindServiceHandler<ara::com::internal::proxy::ProxyAdapter::HandleType> handler,
        ara::com::InstanceIdentifier instance)
    {
        return ara::com::internal::proxy::ProxyAdapter::StartFindService(handler, ::mdc::devm::devmc::DevmCenterServiceInterface::ServiceIdentifier, instance);
    }

    static ara::com::FindServiceHandle StartFindService(
        ara::com::FindServiceHandler<ara::com::internal::proxy::ProxyAdapter::HandleType> handler,
        ara::core::InstanceSpecifier specifier)
    {
        return ara::com::internal::proxy::ProxyAdapter::StartFindService(handler, ::mdc::devm::devmc::DevmCenterServiceInterface::ServiceIdentifier, specifier);
    }

    static ara::com::ServiceHandleContainer<ara::com::internal::proxy::ProxyAdapter::HandleType> FindService(
        ara::com::InstanceIdentifier instance)
    {
        return ara::com::internal::proxy::ProxyAdapter::FindService(::mdc::devm::devmc::DevmCenterServiceInterface::ServiceIdentifier, instance);
    }

    static ara::com::ServiceHandleContainer<ara::com::internal::proxy::ProxyAdapter::HandleType> FindService(
        ara::core::InstanceSpecifier specifier)
    {
        return ara::com::internal::proxy::ProxyAdapter::FindService(::mdc::devm::devmc::DevmCenterServiceInterface::ServiceIdentifier, specifier);
    }

    static void StopFindService(const ara::com::FindServiceHandle& handle)
    {
        ara::com::internal::proxy::ProxyAdapter::StopFindService(handle);
    }

    HandleType GetHandle() const
    {
        return proxyAdapter->GetHandle();
    }
    events::FaultReportDmEvent FaultReportDmEvent;
    events::FaultReportPhmEvent FaultReportPhmEvent;
    methods::CanNetMgrCtrl CanNetMgrCtrl;
    methods::CheckUpdateCondition CheckUpdateCondition;
    methods::DidOperate DidOperate;
    methods::DoSensorAction DoSensorAction;
    methods::DoSystemAction DoSystemAction;
    methods::GetClock GetClock;
    methods::GetConfig GetConfig;
    methods::GetDevAttribute GetDevAttribute;
    methods::GetDeviceInfo GetDeviceInfo;
    methods::GetDeviceList GetDeviceList;
    methods::GetMasterMode GetMasterMode;
    methods::GetPowerOptType GetPowerOptType;
    methods::GetState GetState;
    methods::GetStatisticsInfo GetStatisticsInfo;
    methods::GetSysPowerOffInfo GetSysPowerOffInfo;
    methods::GetTemperature GetTemperature;
    methods::GetUpdateState GetUpdateState;
    methods::GetUpgradableDeviceList GetUpgradableDeviceList;
    methods::GetUpgradeInfo GetUpgradeInfo;
    methods::GetVoltage GetVoltage;
    methods::GetWorkMode GetWorkMode;
    methods::Reboot Reboot;
    methods::Rollback Rollback;
    methods::SensorMsgProxy SensorMsgProxy;
    methods::SetCanCtrlConfig SetCanCtrlConfig;
    methods::SetConfig SetConfig;
    methods::SetMasterMode SetMasterMode;
    methods::SetMcuSystemStatus SetMcuSystemStatus;
    methods::SetSleepReason SetSleepReason;
    methods::SetSysPowerOffInfoReaded SetSysPowerOffInfoReaded;
    methods::SetWorkMode SetWorkMode;
    methods::TranConfig TranConfig;
    methods::Update Update;
    methods::UpdateSyncStart UpdateSyncStart;
};
} // namespace proxy
} // namespace devmc
} // namespace devm
} // namespace mdc

#endif // MDC_DEVM_DEVMC_DEVMCENTERSERVICEINTERFACE_PROXY_H
