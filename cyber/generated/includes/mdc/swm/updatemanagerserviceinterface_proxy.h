/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2020-2021. All rights reserved.
 * Generated by VRTF CM-Generator
 */

#ifndef MDC_SWM_UPDATEMANAGERSERVICEINTERFACE_PROXY_H
#define MDC_SWM_UPDATEMANAGERSERVICEINTERFACE_PROXY_H

#include "ara/com/internal/proxy/proxy_adapter.h"
#include "ara/com/internal/proxy/event_adapter.h"
#include "ara/com/internal/proxy/field_adapter.h"
#include "ara/com/internal/proxy/method_adapter.h"
#include "mdc/swm/updatemanagerserviceinterface_common.h"
#include <string>
#include <cfloat>
#include <cmath>

namespace mdc {
namespace swm {
namespace proxy {
namespace events {
}

namespace fields {
}

namespace methods {
static constexpr ara::com::internal::EntityId ActivateId = 4102; //Activate_method_hash
static constexpr ara::com::internal::EntityId FinishId = 43324; //Finish_method_hash
static constexpr ara::com::internal::EntityId GetActivationProgressId = 29393; //GetActivationProgress_method_hash
static constexpr ara::com::internal::EntityId GetSwProcessProgressId = 36314; //GetSwProcessProgress_method_hash
static constexpr ara::com::internal::EntityId GetUpdatePreCheckProgressId = 43431; //GetUpdatePreCheckProgress_method_hash
static constexpr ara::com::internal::EntityId GetUpdatePreCheckResultId = 45144; //GetUpdatePreCheckResult_method_hash
static constexpr ara::com::internal::EntityId GetUpdateProgressId = 34795; //GetUpdateProgress_method_hash
static constexpr ara::com::internal::EntityId GetUpdateStatusId = 61203; //GetUpdateStatus_method_hash
static constexpr ara::com::internal::EntityId ProcessSwPackageId = 16077; //ProcessSwPackage_method_hash
static constexpr ara::com::internal::EntityId UpdateId = 64985; //Update_method_hash
static constexpr ara::com::internal::EntityId UpdatePreCheckId = 2020; //UpdatePreCheck_method_hash


class Activate {
public:
    struct Output {
        ::mdc::swm::Response ret;

        static bool IsPlane()
        {
            return false;
        }

        using IsEnumerableTag = void;
        template<typename F>
        void enumerate(F& fun)
        {
            fun(ret);
        }

        template<typename F>
        void enumerate(F& fun) const
        {
            fun(ret);
        }

        bool operator == (const Output& t) const
        {
           return (ret == t.ret);
        }
    };

    Activate(std::shared_ptr<vrtf::vcc::Proxy>& proxy, ara::com::internal::EntityId entityId): method_(proxy, entityId){}
    void Initialize(std::shared_ptr<vrtf::vcc::Proxy>& proxy, ara::com::internal::EntityId entityId)
    {
        method_.Initialize(proxy, entityId);
    }
    ara::core::Future<Output> operator()(const ::mdc::swm::SwNameVectorType& preActivate, const ::mdc::swm::SwNameVectorType& verify)
    {
        return method_(preActivate, verify);
    }

    ara::com::internal::proxy::method::MethodAdapter<Output, ::mdc::swm::SwNameVectorType, ::mdc::swm::SwNameVectorType> GetMethod()
    {
        return method_;
    }

private:
    ara::com::internal::proxy::method::MethodAdapter<Output, ::mdc::swm::SwNameVectorType, ::mdc::swm::SwNameVectorType> method_;
};

class Finish {
public:
    struct Output {
        ::mdc::swm::Response ret;

        static bool IsPlane()
        {
            return false;
        }

        using IsEnumerableTag = void;
        template<typename F>
        void enumerate(F& fun)
        {
            fun(ret);
        }

        template<typename F>
        void enumerate(F& fun) const
        {
            fun(ret);
        }

        bool operator == (const Output& t) const
        {
           return (ret == t.ret);
        }
    };

    Finish(std::shared_ptr<vrtf::vcc::Proxy>& proxy, ara::com::internal::EntityId entityId): method_(proxy, entityId){}
    void Initialize(std::shared_ptr<vrtf::vcc::Proxy>& proxy, ara::com::internal::EntityId entityId)
    {
        method_.Initialize(proxy, entityId);
    }
    ara::core::Future<Output> operator()()
    {
        return method_();
    }

    ara::com::internal::proxy::method::MethodAdapter<Output> GetMethod()
    {
        return method_;
    }

private:
    ara::com::internal::proxy::method::MethodAdapter<Output> method_;
};

class GetActivationProgress {
public:
    struct Output {
        ::UInt8 process;
        ::Int32 errcode;
        ::String message;

        static bool IsPlane()
        {
            return false;
        }

        using IsEnumerableTag = void;
        template<typename F>
        void enumerate(F& fun)
        {
            fun(process);
            fun(errcode);
            fun(message);
        }

        template<typename F>
        void enumerate(F& fun) const
        {
            fun(process);
            fun(errcode);
            fun(message);
        }

        bool operator == (const Output& t) const
        {
           return (process == t.process) && (errcode == t.errcode) && (message == t.message);
        }
    };

    GetActivationProgress(std::shared_ptr<vrtf::vcc::Proxy>& proxy, ara::com::internal::EntityId entityId): method_(proxy, entityId){}
    void Initialize(std::shared_ptr<vrtf::vcc::Proxy>& proxy, ara::com::internal::EntityId entityId)
    {
        method_.Initialize(proxy, entityId);
    }
    ara::core::Future<Output> operator()()
    {
        return method_();
    }

    ara::com::internal::proxy::method::MethodAdapter<Output> GetMethod()
    {
        return method_;
    }

private:
    ara::com::internal::proxy::method::MethodAdapter<Output> method_;
};

class GetSwProcessProgress {
public:
    struct Output {
        ::UInt8 progress;

        static bool IsPlane()
        {
            return false;
        }

        using IsEnumerableTag = void;
        template<typename F>
        void enumerate(F& fun)
        {
            fun(progress);
        }

        template<typename F>
        void enumerate(F& fun) const
        {
            fun(progress);
        }

        bool operator == (const Output& t) const
        {
           return (progress == t.progress);
        }
    };

    GetSwProcessProgress(std::shared_ptr<vrtf::vcc::Proxy>& proxy, ara::com::internal::EntityId entityId): method_(proxy, entityId){}
    void Initialize(std::shared_ptr<vrtf::vcc::Proxy>& proxy, ara::com::internal::EntityId entityId)
    {
        method_.Initialize(proxy, entityId);
    }
    ara::core::Future<Output> operator()(const ::mdc::swm::TransferIdType& id)
    {
        return method_(id);
    }

    ara::com::internal::proxy::method::MethodAdapter<Output, ::mdc::swm::TransferIdType> GetMethod()
    {
        return method_;
    }

private:
    ara::com::internal::proxy::method::MethodAdapter<Output, ::mdc::swm::TransferIdType> method_;
};

class GetUpdatePreCheckProgress {
public:
    struct Output {
        ::UInt8 process;
        ::Int32 errcode;
        ::String message;

        static bool IsPlane()
        {
            return false;
        }

        using IsEnumerableTag = void;
        template<typename F>
        void enumerate(F& fun)
        {
            fun(process);
            fun(errcode);
            fun(message);
        }

        template<typename F>
        void enumerate(F& fun) const
        {
            fun(process);
            fun(errcode);
            fun(message);
        }

        bool operator == (const Output& t) const
        {
           return (process == t.process) && (errcode == t.errcode) && (message == t.message);
        }
    };

    GetUpdatePreCheckProgress(std::shared_ptr<vrtf::vcc::Proxy>& proxy, ara::com::internal::EntityId entityId): method_(proxy, entityId){}
    void Initialize(std::shared_ptr<vrtf::vcc::Proxy>& proxy, ara::com::internal::EntityId entityId)
    {
        method_.Initialize(proxy, entityId);
    }
    ara::core::Future<Output> operator()()
    {
        return method_();
    }

    ara::com::internal::proxy::method::MethodAdapter<Output> GetMethod()
    {
        return method_;
    }

private:
    ara::com::internal::proxy::method::MethodAdapter<Output> method_;
};

class GetUpdatePreCheckResult {
public:
    struct Output {
        ::mdc::swm::PreCheckResult ret;

        static bool IsPlane()
        {
            return false;
        }

        using IsEnumerableTag = void;
        template<typename F>
        void enumerate(F& fun)
        {
            fun(ret);
        }

        template<typename F>
        void enumerate(F& fun) const
        {
            fun(ret);
        }

        bool operator == (const Output& t) const
        {
           return (ret == t.ret);
        }
    };

    GetUpdatePreCheckResult(std::shared_ptr<vrtf::vcc::Proxy>& proxy, ara::com::internal::EntityId entityId): method_(proxy, entityId){}
    void Initialize(std::shared_ptr<vrtf::vcc::Proxy>& proxy, ara::com::internal::EntityId entityId)
    {
        method_.Initialize(proxy, entityId);
    }
    ara::core::Future<Output> operator()()
    {
        return method_();
    }

    ara::com::internal::proxy::method::MethodAdapter<Output> GetMethod()
    {
        return method_;
    }

private:
    ara::com::internal::proxy::method::MethodAdapter<Output> method_;
};

class GetUpdateProgress {
public:
    struct Output {
        ::UInt8 process;
        ::Int32 errcode;
        ::String message;
        ::mdc::swm::ItemStateVector subItems;

        static bool IsPlane()
        {
            return false;
        }

        using IsEnumerableTag = void;
        template<typename F>
        void enumerate(F& fun)
        {
            fun(process);
            fun(errcode);
            fun(message);
            fun(subItems);
        }

        template<typename F>
        void enumerate(F& fun) const
        {
            fun(process);
            fun(errcode);
            fun(message);
            fun(subItems);
        }

        bool operator == (const Output& t) const
        {
           return (process == t.process) && (errcode == t.errcode) && (message == t.message) && (subItems == t.subItems);
        }
    };

    GetUpdateProgress(std::shared_ptr<vrtf::vcc::Proxy>& proxy, ara::com::internal::EntityId entityId): method_(proxy, entityId){}
    void Initialize(std::shared_ptr<vrtf::vcc::Proxy>& proxy, ara::com::internal::EntityId entityId)
    {
        method_.Initialize(proxy, entityId);
    }
    ara::core::Future<Output> operator()()
    {
        return method_();
    }

    ara::com::internal::proxy::method::MethodAdapter<Output> GetMethod()
    {
        return method_;
    }

private:
    ara::com::internal::proxy::method::MethodAdapter<Output> method_;
};

class GetUpdateStatus {
public:
    struct Output {
        ::mdc::swm::PackageManagerStatusType Status;

        static bool IsPlane()
        {
            return true;
        }

        using IsEnumerableTag = void;
        template<typename F>
        void enumerate(F& fun)
        {
            fun(Status);
        }

        template<typename F>
        void enumerate(F& fun) const
        {
            fun(Status);
        }

        bool operator == (const Output& t) const
        {
           return (Status == t.Status);
        }
    };

    GetUpdateStatus(std::shared_ptr<vrtf::vcc::Proxy>& proxy, ara::com::internal::EntityId entityId): method_(proxy, entityId){}
    void Initialize(std::shared_ptr<vrtf::vcc::Proxy>& proxy, ara::com::internal::EntityId entityId)
    {
        method_.Initialize(proxy, entityId);
    }
    ara::core::Future<Output> operator()()
    {
        return method_();
    }

    ara::com::internal::proxy::method::MethodAdapter<Output> GetMethod()
    {
        return method_;
    }

private:
    ara::com::internal::proxy::method::MethodAdapter<Output> method_;
};

class ProcessSwPackage {
public:
    struct Output {
        ::Int32 ret;

        static bool IsPlane()
        {
            return false;
        }

        using IsEnumerableTag = void;
        template<typename F>
        void enumerate(F& fun)
        {
            fun(ret);
        }

        template<typename F>
        void enumerate(F& fun) const
        {
            fun(ret);
        }

        bool operator == (const Output& t) const
        {
           return (ret == t.ret);
        }
    };

    ProcessSwPackage(std::shared_ptr<vrtf::vcc::Proxy>& proxy, ara::com::internal::EntityId entityId): method_(proxy, entityId){}
    void Initialize(std::shared_ptr<vrtf::vcc::Proxy>& proxy, ara::com::internal::EntityId entityId)
    {
        method_.Initialize(proxy, entityId);
    }
    ara::core::Future<Output> operator()(const ::mdc::swm::TransferIdType& id)
    {
        return method_(id);
    }

    ara::com::internal::proxy::method::MethodAdapter<Output, ::mdc::swm::TransferIdType> GetMethod()
    {
        return method_;
    }

private:
    ara::com::internal::proxy::method::MethodAdapter<Output, ::mdc::swm::TransferIdType> method_;
};

class Update {
public:
    struct Output {
        ::mdc::swm::Response ret;

        static bool IsPlane()
        {
            return false;
        }

        using IsEnumerableTag = void;
        template<typename F>
        void enumerate(F& fun)
        {
            fun(ret);
        }

        template<typename F>
        void enumerate(F& fun) const
        {
            fun(ret);
        }

        bool operator == (const Output& t) const
        {
           return (ret == t.ret);
        }
    };

    Update(std::shared_ptr<vrtf::vcc::Proxy>& proxy, ara::com::internal::EntityId entityId): method_(proxy, entityId){}
    void Initialize(std::shared_ptr<vrtf::vcc::Proxy>& proxy, ara::com::internal::EntityId entityId)
    {
        method_.Initialize(proxy, entityId);
    }
    ara::core::Future<Output> operator()(const ::String& packagePath, const ::Int8& mode)
    {
        return method_(packagePath, mode);
    }

    ara::com::internal::proxy::method::MethodAdapter<Output, ::String, ::Int8> GetMethod()
    {
        return method_;
    }

private:
    ara::com::internal::proxy::method::MethodAdapter<Output, ::String, ::Int8> method_;
};

class UpdatePreCheck {
public:
    struct Output {
        ::mdc::swm::Response ret;

        static bool IsPlane()
        {
            return false;
        }

        using IsEnumerableTag = void;
        template<typename F>
        void enumerate(F& fun)
        {
            fun(ret);
        }

        template<typename F>
        void enumerate(F& fun) const
        {
            fun(ret);
        }

        bool operator == (const Output& t) const
        {
           return (ret == t.ret);
        }
    };

    UpdatePreCheck(std::shared_ptr<vrtf::vcc::Proxy>& proxy, ara::com::internal::EntityId entityId): method_(proxy, entityId){}
    void Initialize(std::shared_ptr<vrtf::vcc::Proxy>& proxy, ara::com::internal::EntityId entityId)
    {
        method_.Initialize(proxy, entityId);
    }
    ara::core::Future<Output> operator()(const ::UInt8& mode, const ::String& packagePath)
    {
        return method_(mode, packagePath);
    }

    ara::com::internal::proxy::method::MethodAdapter<Output, ::UInt8, ::String> GetMethod()
    {
        return method_;
    }

private:
    ara::com::internal::proxy::method::MethodAdapter<Output, ::UInt8, ::String> method_;
};
} // namespace methods

class UpdateManagerServiceInterfaceProxy {
private:
    std::unique_ptr<ara::com::internal::proxy::ProxyAdapter> proxyAdapter;
public:
    using HandleType = vrtf::vcc::api::types::HandleType;
    class ConstructionToken {
    public:
        ConstructionToken(std::unique_ptr<ara::com::internal::proxy::ProxyAdapter> proxy): ptr(std::move(proxy)){}
        ConstructionToken(ConstructionToken&& other) : ptr(std::move(other.ptr)) {}
        ConstructionToken& operator=(ConstructionToken && other)
        {
            if (&other != this) {
                ptr = std::move(other.ptr);
            }
            return *this;
        }
        ConstructionToken(const ConstructionToken&) = delete;
        ConstructionToken& operator = (const ConstructionToken&) = delete;
        std::unique_ptr<ara::com::internal::proxy::ProxyAdapter> GetProxyAdapter()
        {
            return std::move(ptr);
        }
    private:
        std::unique_ptr<ara::com::internal::proxy::ProxyAdapter> ptr;
    };

    virtual ~UpdateManagerServiceInterfaceProxy()
    {
    }

    explicit UpdateManagerServiceInterfaceProxy(const vrtf::vcc::api::types::HandleType &handle)
        : proxyAdapter(std::make_unique<ara::com::internal::proxy::ProxyAdapter>(::mdc::swm::UpdateManagerServiceInterface::ServiceIdentifier, handle)),
          Activate(proxyAdapter->GetProxy(), methods::ActivateId),
          Finish(proxyAdapter->GetProxy(), methods::FinishId),
          GetActivationProgress(proxyAdapter->GetProxy(), methods::GetActivationProgressId),
          GetSwProcessProgress(proxyAdapter->GetProxy(), methods::GetSwProcessProgressId),
          GetUpdatePreCheckProgress(proxyAdapter->GetProxy(), methods::GetUpdatePreCheckProgressId),
          GetUpdatePreCheckResult(proxyAdapter->GetProxy(), methods::GetUpdatePreCheckResultId),
          GetUpdateProgress(proxyAdapter->GetProxy(), methods::GetUpdateProgressId),
          GetUpdateStatus(proxyAdapter->GetProxy(), methods::GetUpdateStatusId),
          ProcessSwPackage(proxyAdapter->GetProxy(), methods::ProcessSwPackageId),
          Update(proxyAdapter->GetProxy(), methods::UpdateId),
          UpdatePreCheck(proxyAdapter->GetProxy(), methods::UpdatePreCheckId){
            ara::core::Result<void> resultActivate = proxyAdapter->InitializeMethod<methods::Activate::Output>(methods::ActivateId);
            ThrowError(resultActivate);
            ara::core::Result<void> resultFinish = proxyAdapter->InitializeMethod<methods::Finish::Output>(methods::FinishId);
            ThrowError(resultFinish);
            ara::core::Result<void> resultGetActivationProgress = proxyAdapter->InitializeMethod<methods::GetActivationProgress::Output>(methods::GetActivationProgressId);
            ThrowError(resultGetActivationProgress);
            ara::core::Result<void> resultGetSwProcessProgress = proxyAdapter->InitializeMethod<methods::GetSwProcessProgress::Output>(methods::GetSwProcessProgressId);
            ThrowError(resultGetSwProcessProgress);
            ara::core::Result<void> resultGetUpdatePreCheckProgress = proxyAdapter->InitializeMethod<methods::GetUpdatePreCheckProgress::Output>(methods::GetUpdatePreCheckProgressId);
            ThrowError(resultGetUpdatePreCheckProgress);
            ara::core::Result<void> resultGetUpdatePreCheckResult = proxyAdapter->InitializeMethod<methods::GetUpdatePreCheckResult::Output>(methods::GetUpdatePreCheckResultId);
            ThrowError(resultGetUpdatePreCheckResult);
            ara::core::Result<void> resultGetUpdateProgress = proxyAdapter->InitializeMethod<methods::GetUpdateProgress::Output>(methods::GetUpdateProgressId);
            ThrowError(resultGetUpdateProgress);
            ara::core::Result<void> resultGetUpdateStatus = proxyAdapter->InitializeMethod<methods::GetUpdateStatus::Output>(methods::GetUpdateStatusId);
            ThrowError(resultGetUpdateStatus);
            ara::core::Result<void> resultProcessSwPackage = proxyAdapter->InitializeMethod<methods::ProcessSwPackage::Output>(methods::ProcessSwPackageId);
            ThrowError(resultProcessSwPackage);
            ara::core::Result<void> resultUpdate = proxyAdapter->InitializeMethod<methods::Update::Output>(methods::UpdateId);
            ThrowError(resultUpdate);
            ara::core::Result<void> resultUpdatePreCheck = proxyAdapter->InitializeMethod<methods::UpdatePreCheck::Output>(methods::UpdatePreCheckId);
            ThrowError(resultUpdatePreCheck);
        }

    void ThrowError(ara::core::Result<void>& result)
    {
        if (!(result.HasValue())) {
#ifndef NOT_SUPPORT_EXCEPTIONS
            ara::core::ErrorCode errorcode(result.Error());
            throw ara::com::ComException(std::move(errorcode));
#else
            std::cerr << "Error: Not support exception, create skeleton failed!"<< std::endl;
#endif
        }
    }

    UpdateManagerServiceInterfaceProxy(const UpdateManagerServiceInterfaceProxy&) = delete;
    UpdateManagerServiceInterfaceProxy& operator=(const UpdateManagerServiceInterfaceProxy&) = delete;

    UpdateManagerServiceInterfaceProxy(UpdateManagerServiceInterfaceProxy&& other) = default;
    UpdateManagerServiceInterfaceProxy& operator=(UpdateManagerServiceInterfaceProxy&& other) = default;
    UpdateManagerServiceInterfaceProxy(ConstructionToken&& token) noexcept
        : proxyAdapter(token.GetProxyAdapter()),
          Activate(proxyAdapter->GetProxy(), methods::ActivateId),
          Finish(proxyAdapter->GetProxy(), methods::FinishId),
          GetActivationProgress(proxyAdapter->GetProxy(), methods::GetActivationProgressId),
          GetSwProcessProgress(proxyAdapter->GetProxy(), methods::GetSwProcessProgressId),
          GetUpdatePreCheckProgress(proxyAdapter->GetProxy(), methods::GetUpdatePreCheckProgressId),
          GetUpdatePreCheckResult(proxyAdapter->GetProxy(), methods::GetUpdatePreCheckResultId),
          GetUpdateProgress(proxyAdapter->GetProxy(), methods::GetUpdateProgressId),
          GetUpdateStatus(proxyAdapter->GetProxy(), methods::GetUpdateStatusId),
          ProcessSwPackage(proxyAdapter->GetProxy(), methods::ProcessSwPackageId),
          Update(proxyAdapter->GetProxy(), methods::UpdateId),
          UpdatePreCheck(proxyAdapter->GetProxy(), methods::UpdatePreCheckId){
    }

    static ara::core::Result<ConstructionToken> Preconstruct(
        const vrtf::vcc::api::types::HandleType &handle)
    {
        std::unique_ptr<ara::com::internal::proxy::ProxyAdapter> preProxyAdapter =
            std::make_unique<ara::com::internal::proxy::ProxyAdapter>(
               ::mdc::swm::UpdateManagerServiceInterface::ServiceIdentifier, handle);
        bool result = true;
        ara::core::Result<void> initResult;
        do {
            methods::Activate Activate(preProxyAdapter->GetProxy(), methods::ActivateId);
            initResult = preProxyAdapter->InitializeMethod<methods::Activate::Output>(methods::ActivateId);
            if (!initResult.HasValue()) {
                result = false;
                break;
            }
            methods::Finish Finish(preProxyAdapter->GetProxy(), methods::FinishId);
            initResult = preProxyAdapter->InitializeMethod<methods::Finish::Output>(methods::FinishId);
            if (!initResult.HasValue()) {
                result = false;
                break;
            }
            methods::GetActivationProgress GetActivationProgress(preProxyAdapter->GetProxy(), methods::GetActivationProgressId);
            initResult = preProxyAdapter->InitializeMethod<methods::GetActivationProgress::Output>(methods::GetActivationProgressId);
            if (!initResult.HasValue()) {
                result = false;
                break;
            }
            methods::GetSwProcessProgress GetSwProcessProgress(preProxyAdapter->GetProxy(), methods::GetSwProcessProgressId);
            initResult = preProxyAdapter->InitializeMethod<methods::GetSwProcessProgress::Output>(methods::GetSwProcessProgressId);
            if (!initResult.HasValue()) {
                result = false;
                break;
            }
            methods::GetUpdatePreCheckProgress GetUpdatePreCheckProgress(preProxyAdapter->GetProxy(), methods::GetUpdatePreCheckProgressId);
            initResult = preProxyAdapter->InitializeMethod<methods::GetUpdatePreCheckProgress::Output>(methods::GetUpdatePreCheckProgressId);
            if (!initResult.HasValue()) {
                result = false;
                break;
            }
            methods::GetUpdatePreCheckResult GetUpdatePreCheckResult(preProxyAdapter->GetProxy(), methods::GetUpdatePreCheckResultId);
            initResult = preProxyAdapter->InitializeMethod<methods::GetUpdatePreCheckResult::Output>(methods::GetUpdatePreCheckResultId);
            if (!initResult.HasValue()) {
                result = false;
                break;
            }
            methods::GetUpdateProgress GetUpdateProgress(preProxyAdapter->GetProxy(), methods::GetUpdateProgressId);
            initResult = preProxyAdapter->InitializeMethod<methods::GetUpdateProgress::Output>(methods::GetUpdateProgressId);
            if (!initResult.HasValue()) {
                result = false;
                break;
            }
            methods::GetUpdateStatus GetUpdateStatus(preProxyAdapter->GetProxy(), methods::GetUpdateStatusId);
            initResult = preProxyAdapter->InitializeMethod<methods::GetUpdateStatus::Output>(methods::GetUpdateStatusId);
            if (!initResult.HasValue()) {
                result = false;
                break;
            }
            methods::ProcessSwPackage ProcessSwPackage(preProxyAdapter->GetProxy(), methods::ProcessSwPackageId);
            initResult = preProxyAdapter->InitializeMethod<methods::ProcessSwPackage::Output>(methods::ProcessSwPackageId);
            if (!initResult.HasValue()) {
                result = false;
                break;
            }
            methods::Update Update(preProxyAdapter->GetProxy(), methods::UpdateId);
            initResult = preProxyAdapter->InitializeMethod<methods::Update::Output>(methods::UpdateId);
            if (!initResult.HasValue()) {
                result = false;
                break;
            }
            methods::UpdatePreCheck UpdatePreCheck(preProxyAdapter->GetProxy(), methods::UpdatePreCheckId);
            initResult = preProxyAdapter->InitializeMethod<methods::UpdatePreCheck::Output>(methods::UpdatePreCheckId);
            if (!initResult.HasValue()) {
                result = false;
                break;
            }
        } while(false);
        
        if (result == true) {
            ConstructionToken token(std::move(preProxyAdapter));
            return ara::core::Result<ConstructionToken>(std::move(token));
        } else {
            ConstructionToken token(std::move(preProxyAdapter));
            ara::core::Result<ConstructionToken> result(std::move(token));
            ara::core::ErrorCode errorcode(initResult.Error());
            result.EmplaceError(errorcode);
            return result;
        }
    }


    static ara::com::FindServiceHandle StartFindService(
        ara::com::FindServiceHandler<ara::com::internal::proxy::ProxyAdapter::HandleType> handler,
        ara::com::InstanceIdentifier instance)
    {
        return ara::com::internal::proxy::ProxyAdapter::StartFindService(handler, ::mdc::swm::UpdateManagerServiceInterface::ServiceIdentifier, instance);
    }

    static ara::com::FindServiceHandle StartFindService(
        ara::com::FindServiceHandler<ara::com::internal::proxy::ProxyAdapter::HandleType> handler,
        ara::core::InstanceSpecifier specifier)
    {
        return ara::com::internal::proxy::ProxyAdapter::StartFindService(handler, ::mdc::swm::UpdateManagerServiceInterface::ServiceIdentifier, specifier);
    }

    static ara::com::ServiceHandleContainer<ara::com::internal::proxy::ProxyAdapter::HandleType> FindService(
        ara::com::InstanceIdentifier instance)
    {
        return ara::com::internal::proxy::ProxyAdapter::FindService(::mdc::swm::UpdateManagerServiceInterface::ServiceIdentifier, instance);
    }

    static ara::com::ServiceHandleContainer<ara::com::internal::proxy::ProxyAdapter::HandleType> FindService(
        ara::core::InstanceSpecifier specifier)
    {
        return ara::com::internal::proxy::ProxyAdapter::FindService(::mdc::swm::UpdateManagerServiceInterface::ServiceIdentifier, specifier);
    }

    static void StopFindService(const ara::com::FindServiceHandle& handle)
    {
        ara::com::internal::proxy::ProxyAdapter::StopFindService(handle);
    }

    HandleType GetHandle() const
    {
        return proxyAdapter->GetHandle();
    }
    methods::Activate Activate;
    methods::Finish Finish;
    methods::GetActivationProgress GetActivationProgress;
    methods::GetSwProcessProgress GetSwProcessProgress;
    methods::GetUpdatePreCheckProgress GetUpdatePreCheckProgress;
    methods::GetUpdatePreCheckResult GetUpdatePreCheckResult;
    methods::GetUpdateProgress GetUpdateProgress;
    methods::GetUpdateStatus GetUpdateStatus;
    methods::ProcessSwPackage ProcessSwPackage;
    methods::Update Update;
    methods::UpdatePreCheck UpdatePreCheck;
};
} // namespace proxy
} // namespace swm
} // namespace mdc

#endif // MDC_SWM_UPDATEMANAGERSERVICEINTERFACE_PROXY_H
