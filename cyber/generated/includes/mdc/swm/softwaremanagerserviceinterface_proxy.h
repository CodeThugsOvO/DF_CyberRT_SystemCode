/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2020-2021. All rights reserved.
 * Generated by VRTF CM-Generator
 */

#ifndef MDC_SWM_SOFTWAREMANAGERSERVICEINTERFACE_PROXY_H
#define MDC_SWM_SOFTWAREMANAGERSERVICEINTERFACE_PROXY_H

#include "ara/com/internal/proxy/proxy_adapter.h"
#include "ara/com/internal/proxy/event_adapter.h"
#include "ara/com/internal/proxy/field_adapter.h"
#include "ara/com/internal/proxy/method_adapter.h"
#include "mdc/swm/softwaremanagerserviceinterface_common.h"
#include <string>
#include <cfloat>
#include <cmath>

namespace mdc {
namespace swm {
namespace proxy {
namespace events {
}

namespace fields {
}

namespace methods {
static constexpr ara::com::internal::EntityId GetFinggerPrintId = 10835; //GetFinggerPrint_method_hash
static constexpr ara::com::internal::EntityId GetHistoryId = 23435; //GetHistory_method_hash
static constexpr ara::com::internal::EntityId GetHistoryInfoId = 4639; //GetHistoryInfo_method_hash
static constexpr ara::com::internal::EntityId GetSwClusterInfoId = 25213; //GetSwClusterInfo_method_hash
static constexpr ara::com::internal::EntityId GetVersionInfoId = 26771; //GetVersionInfo_method_hash
static constexpr ara::com::internal::EntityId SetFinggerPrintId = 22609; //SetFinggerPrint_method_hash
static constexpr ara::com::internal::EntityId GetSpecificVersionInfoId = 32010; //GetSpecificVersionInfo_method_hash
static constexpr ara::com::internal::EntityId RefreshVersionId = 11944; //RefreshVersion_method_hash


class GetFinggerPrint {
public:
    struct Output {
        ::mdc::swm::FinggerPrintType fingerPrint;
        ::Int32 ret;

        static bool IsPlane()
        {
            return false;
        }

        using IsEnumerableTag = void;
        template<typename F>
        void enumerate(F& fun)
        {
            fun(fingerPrint);
            fun(ret);
        }

        template<typename F>
        void enumerate(F& fun) const
        {
            fun(fingerPrint);
            fun(ret);
        }

        bool operator == (const Output& t) const
        {
           return (fingerPrint == t.fingerPrint) && (ret == t.ret);
        }
    };

    GetFinggerPrint(std::shared_ptr<vrtf::vcc::Proxy>& proxy, ara::com::internal::EntityId entityId): method_(proxy, entityId){}
    void Initialize(std::shared_ptr<vrtf::vcc::Proxy>& proxy, ara::com::internal::EntityId entityId)
    {
        method_.Initialize(proxy, entityId);
    }
    ara::core::Future<Output> operator()()
    {
        return method_();
    }

    ara::com::internal::proxy::method::MethodAdapter<Output> GetMethod()
    {
        return method_;
    }

private:
    ara::com::internal::proxy::method::MethodAdapter<Output> method_;
};

class GetHistory {
public:
    struct Output {
        ::mdc::swm::GetHistoryVectorType history;

        static bool IsPlane()
        {
            return false;
        }

        using IsEnumerableTag = void;
        template<typename F>
        void enumerate(F& fun)
        {
            fun(history);
        }

        template<typename F>
        void enumerate(F& fun) const
        {
            fun(history);
        }

        bool operator == (const Output& t) const
        {
           return (history == t.history);
        }
    };

    GetHistory(std::shared_ptr<vrtf::vcc::Proxy>& proxy, ara::com::internal::EntityId entityId): method_(proxy, entityId){}
    void Initialize(std::shared_ptr<vrtf::vcc::Proxy>& proxy, ara::com::internal::EntityId entityId)
    {
        method_.Initialize(proxy, entityId);
    }
    ara::core::Future<Output> operator()(const ::UInt64& timestampGE, const ::UInt64& timestampLT)
    {
        return method_(timestampGE, timestampLT);
    }

    ara::com::internal::proxy::method::MethodAdapter<Output, ::UInt64, ::UInt64> GetMethod()
    {
        return method_;
    }

private:
    ara::com::internal::proxy::method::MethodAdapter<Output, ::UInt64, ::UInt64> method_;
};

class GetHistoryInfo {
public:
    struct Output {
        ::mdc::swm::SoftwarePackageHistoryRecordVector record;
        ::Int32 ret;

        static bool IsPlane()
        {
            return false;
        }

        using IsEnumerableTag = void;
        template<typename F>
        void enumerate(F& fun)
        {
            fun(record);
            fun(ret);
        }

        template<typename F>
        void enumerate(F& fun) const
        {
            fun(record);
            fun(ret);
        }

        bool operator == (const Output& t) const
        {
           return (record == t.record) && (ret == t.ret);
        }
    };

    GetHistoryInfo(std::shared_ptr<vrtf::vcc::Proxy>& proxy, ara::com::internal::EntityId entityId): method_(proxy, entityId){}
    void Initialize(std::shared_ptr<vrtf::vcc::Proxy>& proxy, ara::com::internal::EntityId entityId)
    {
        method_.Initialize(proxy, entityId);
    }
    ara::core::Future<Output> operator()()
    {
        return method_();
    }

    ara::com::internal::proxy::method::MethodAdapter<Output> GetMethod()
    {
        return method_;
    }

private:
    ara::com::internal::proxy::method::MethodAdapter<Output> method_;
};

class GetSwClusterInfo {
public:
    struct Output {
        ::mdc::swm::SwClusterInfoVectorType SwInfo;

        static bool IsPlane()
        {
            return false;
        }

        using IsEnumerableTag = void;
        template<typename F>
        void enumerate(F& fun)
        {
            fun(SwInfo);
        }

        template<typename F>
        void enumerate(F& fun) const
        {
            fun(SwInfo);
        }

        bool operator == (const Output& t) const
        {
           return (SwInfo == t.SwInfo);
        }
    };

    GetSwClusterInfo(std::shared_ptr<vrtf::vcc::Proxy>& proxy, ara::com::internal::EntityId entityId): method_(proxy, entityId){}
    void Initialize(std::shared_ptr<vrtf::vcc::Proxy>& proxy, ara::com::internal::EntityId entityId)
    {
        method_.Initialize(proxy, entityId);
    }
    ara::core::Future<Output> operator()()
    {
        return method_();
    }

    ara::com::internal::proxy::method::MethodAdapter<Output> GetMethod()
    {
        return method_;
    }

private:
    ara::com::internal::proxy::method::MethodAdapter<Output> method_;
};

class GetVersionInfo {
public:
    struct Output {
        ::mdc::swm::SysVersion SysVersion;
        ::mdc::swm::Response ret;

        static bool IsPlane()
        {
            return false;
        }

        using IsEnumerableTag = void;
        template<typename F>
        void enumerate(F& fun)
        {
            fun(SysVersion);
            fun(ret);
        }

        template<typename F>
        void enumerate(F& fun) const
        {
            fun(SysVersion);
            fun(ret);
        }

        bool operator == (const Output& t) const
        {
           return (SysVersion == t.SysVersion) && (ret == t.ret);
        }
    };

    GetVersionInfo(std::shared_ptr<vrtf::vcc::Proxy>& proxy, ara::com::internal::EntityId entityId): method_(proxy, entityId){}
    void Initialize(std::shared_ptr<vrtf::vcc::Proxy>& proxy, ara::com::internal::EntityId entityId)
    {
        method_.Initialize(proxy, entityId);
    }
    ara::core::Future<Output> operator()()
    {
        return method_();
    }

    ara::com::internal::proxy::method::MethodAdapter<Output> GetMethod()
    {
        return method_;
    }

private:
    ara::com::internal::proxy::method::MethodAdapter<Output> method_;
};

class SetFinggerPrint {
public:
    struct Output {
        ::Int32 ret;

        static bool IsPlane()
        {
            return false;
        }

        using IsEnumerableTag = void;
        template<typename F>
        void enumerate(F& fun)
        {
            fun(ret);
        }

        template<typename F>
        void enumerate(F& fun) const
        {
            fun(ret);
        }

        bool operator == (const Output& t) const
        {
           return (ret == t.ret);
        }
    };

    SetFinggerPrint(std::shared_ptr<vrtf::vcc::Proxy>& proxy, ara::com::internal::EntityId entityId): method_(proxy, entityId){}
    void Initialize(std::shared_ptr<vrtf::vcc::Proxy>& proxy, ara::com::internal::EntityId entityId)
    {
        method_.Initialize(proxy, entityId);
    }
    ara::core::Future<Output> operator()(const ::mdc::swm::FinggerPrintType& fingerPrint)
    {
        return method_(fingerPrint);
    }

    ara::com::internal::proxy::method::MethodAdapter<Output, ::mdc::swm::FinggerPrintType> GetMethod()
    {
        return method_;
    }

private:
    ara::com::internal::proxy::method::MethodAdapter<Output, ::mdc::swm::FinggerPrintType> method_;
};

class GetSpecificVersionInfo {
public:
    struct Output {
        ::mdc::swm::VersionItem versionItem;
        ::mdc::swm::Response ret;

        static bool IsPlane()
        {
            return false;
        }

        using IsEnumerableTag = void;
        template<typename F>
        void enumerate(F& fun)
        {
            fun(versionItem);
            fun(ret);
        }

        template<typename F>
        void enumerate(F& fun) const
        {
            fun(versionItem);
            fun(ret);
        }

        bool operator == (const Output& t) const
        {
           return (versionItem == t.versionItem) && (ret == t.ret);
        }
    };

    GetSpecificVersionInfo(std::shared_ptr<vrtf::vcc::Proxy>& proxy, ara::com::internal::EntityId entityId): method_(proxy, entityId){}
    void Initialize(std::shared_ptr<vrtf::vcc::Proxy>& proxy, ara::com::internal::EntityId entityId)
    {
        method_.Initialize(proxy, entityId);
    }
    ara::core::Future<Output> operator()(const ::String& location, const ::String& name)
    {
        return method_(location, name);
    }

    ara::com::internal::proxy::method::MethodAdapter<Output, ::String, ::String> GetMethod()
    {
        return method_;
    }

private:
    ara::com::internal::proxy::method::MethodAdapter<Output, ::String, ::String> method_;
};

class RefreshVersion {
public:
    struct Output {
        ::Int32 ret;

        static bool IsPlane()
        {
            return true;
        }

        using IsEnumerableTag = void;
        template<typename F>
        void enumerate(F& fun)
        {
            fun(ret);
        }

        template<typename F>
        void enumerate(F& fun) const
        {
            fun(ret);
        }

        bool operator == (const Output& t) const
        {
           return (ret == t.ret);
        }
    };

    RefreshVersion(std::shared_ptr<vrtf::vcc::Proxy>& proxy, ara::com::internal::EntityId entityId): method_(proxy, entityId){}
    void Initialize(std::shared_ptr<vrtf::vcc::Proxy>& proxy, ara::com::internal::EntityId entityId)
    {
        method_.Initialize(proxy, entityId);
    }
    ara::core::Future<Output> operator()(const ::Boolean& isSync)
    {
        return method_(isSync);
    }

    ara::com::internal::proxy::method::MethodAdapter<Output, ::Boolean> GetMethod()
    {
        return method_;
    }

private:
    ara::com::internal::proxy::method::MethodAdapter<Output, ::Boolean> method_;
};
} // namespace methods

class SoftwareManagerServiceInterfaceProxy {
private:
    std::unique_ptr<ara::com::internal::proxy::ProxyAdapter> proxyAdapter;
public:
    using HandleType = vrtf::vcc::api::types::HandleType;
    class ConstructionToken {
    public:
        ConstructionToken(std::unique_ptr<ara::com::internal::proxy::ProxyAdapter> proxy): ptr(std::move(proxy)){}
        ConstructionToken(ConstructionToken&& other) : ptr(std::move(other.ptr)) {}
        ConstructionToken& operator=(ConstructionToken && other)
        {
            if (&other != this) {
                ptr = std::move(other.ptr);
            }
            return *this;
        }
        ConstructionToken(const ConstructionToken&) = delete;
        ConstructionToken& operator = (const ConstructionToken&) = delete;
        std::unique_ptr<ara::com::internal::proxy::ProxyAdapter> GetProxyAdapter()
        {
            return std::move(ptr);
        }
    private:
        std::unique_ptr<ara::com::internal::proxy::ProxyAdapter> ptr;
    };

    virtual ~SoftwareManagerServiceInterfaceProxy()
    {
    }

    explicit SoftwareManagerServiceInterfaceProxy(const vrtf::vcc::api::types::HandleType &handle)
        : proxyAdapter(std::make_unique<ara::com::internal::proxy::ProxyAdapter>(::mdc::swm::SoftwareManagerServiceInterface::ServiceIdentifier, handle)),
          GetFinggerPrint(proxyAdapter->GetProxy(), methods::GetFinggerPrintId),
          GetHistory(proxyAdapter->GetProxy(), methods::GetHistoryId),
          GetHistoryInfo(proxyAdapter->GetProxy(), methods::GetHistoryInfoId),
          GetSwClusterInfo(proxyAdapter->GetProxy(), methods::GetSwClusterInfoId),
          GetVersionInfo(proxyAdapter->GetProxy(), methods::GetVersionInfoId),
          SetFinggerPrint(proxyAdapter->GetProxy(), methods::SetFinggerPrintId),
          GetSpecificVersionInfo(proxyAdapter->GetProxy(), methods::GetSpecificVersionInfoId),
          RefreshVersion(proxyAdapter->GetProxy(), methods::RefreshVersionId){
            ara::core::Result<void> resultGetFinggerPrint = proxyAdapter->InitializeMethod<methods::GetFinggerPrint::Output>(methods::GetFinggerPrintId);
            ThrowError(resultGetFinggerPrint);
            ara::core::Result<void> resultGetHistory = proxyAdapter->InitializeMethod<methods::GetHistory::Output>(methods::GetHistoryId);
            ThrowError(resultGetHistory);
            ara::core::Result<void> resultGetHistoryInfo = proxyAdapter->InitializeMethod<methods::GetHistoryInfo::Output>(methods::GetHistoryInfoId);
            ThrowError(resultGetHistoryInfo);
            ara::core::Result<void> resultGetSwClusterInfo = proxyAdapter->InitializeMethod<methods::GetSwClusterInfo::Output>(methods::GetSwClusterInfoId);
            ThrowError(resultGetSwClusterInfo);
            ara::core::Result<void> resultGetVersionInfo = proxyAdapter->InitializeMethod<methods::GetVersionInfo::Output>(methods::GetVersionInfoId);
            ThrowError(resultGetVersionInfo);
            ara::core::Result<void> resultSetFinggerPrint = proxyAdapter->InitializeMethod<methods::SetFinggerPrint::Output>(methods::SetFinggerPrintId);
            ThrowError(resultSetFinggerPrint);
            ara::core::Result<void> resultGetSpecificVersionInfo = proxyAdapter->InitializeMethod<methods::GetSpecificVersionInfo::Output>(methods::GetSpecificVersionInfoId);
            ThrowError(resultGetSpecificVersionInfo);
            ara::core::Result<void> resultRefreshVersion = proxyAdapter->InitializeMethod<methods::RefreshVersion::Output>(methods::RefreshVersionId);
            ThrowError(resultRefreshVersion);
        }

    void ThrowError(ara::core::Result<void>& result)
    {
        if (!(result.HasValue())) {
#ifndef NOT_SUPPORT_EXCEPTIONS
            ara::core::ErrorCode errorcode(result.Error());
            throw ara::com::ComException(std::move(errorcode));
#else
            std::cerr << "Error: Not support exception, create skeleton failed!"<< std::endl;
#endif
        }
    }

    SoftwareManagerServiceInterfaceProxy(const SoftwareManagerServiceInterfaceProxy&) = delete;
    SoftwareManagerServiceInterfaceProxy& operator=(const SoftwareManagerServiceInterfaceProxy&) = delete;

    SoftwareManagerServiceInterfaceProxy(SoftwareManagerServiceInterfaceProxy&& other) = default;
    SoftwareManagerServiceInterfaceProxy& operator=(SoftwareManagerServiceInterfaceProxy&& other) = default;
    SoftwareManagerServiceInterfaceProxy(ConstructionToken&& token) noexcept
        : proxyAdapter(token.GetProxyAdapter()),
          GetFinggerPrint(proxyAdapter->GetProxy(), methods::GetFinggerPrintId),
          GetHistory(proxyAdapter->GetProxy(), methods::GetHistoryId),
          GetHistoryInfo(proxyAdapter->GetProxy(), methods::GetHistoryInfoId),
          GetSwClusterInfo(proxyAdapter->GetProxy(), methods::GetSwClusterInfoId),
          GetVersionInfo(proxyAdapter->GetProxy(), methods::GetVersionInfoId),
          SetFinggerPrint(proxyAdapter->GetProxy(), methods::SetFinggerPrintId),
          GetSpecificVersionInfo(proxyAdapter->GetProxy(), methods::GetSpecificVersionInfoId),
          RefreshVersion(proxyAdapter->GetProxy(), methods::RefreshVersionId){
    }

    static ara::core::Result<ConstructionToken> Preconstruct(
        const vrtf::vcc::api::types::HandleType &handle)
    {
        std::unique_ptr<ara::com::internal::proxy::ProxyAdapter> preProxyAdapter =
            std::make_unique<ara::com::internal::proxy::ProxyAdapter>(
               ::mdc::swm::SoftwareManagerServiceInterface::ServiceIdentifier, handle);
        bool result = true;
        ara::core::Result<void> initResult;
        do {
            methods::GetFinggerPrint GetFinggerPrint(preProxyAdapter->GetProxy(), methods::GetFinggerPrintId);
            initResult = preProxyAdapter->InitializeMethod<methods::GetFinggerPrint::Output>(methods::GetFinggerPrintId);
            if (!initResult.HasValue()) {
                result = false;
                break;
            }
            methods::GetHistory GetHistory(preProxyAdapter->GetProxy(), methods::GetHistoryId);
            initResult = preProxyAdapter->InitializeMethod<methods::GetHistory::Output>(methods::GetHistoryId);
            if (!initResult.HasValue()) {
                result = false;
                break;
            }
            methods::GetHistoryInfo GetHistoryInfo(preProxyAdapter->GetProxy(), methods::GetHistoryInfoId);
            initResult = preProxyAdapter->InitializeMethod<methods::GetHistoryInfo::Output>(methods::GetHistoryInfoId);
            if (!initResult.HasValue()) {
                result = false;
                break;
            }
            methods::GetSwClusterInfo GetSwClusterInfo(preProxyAdapter->GetProxy(), methods::GetSwClusterInfoId);
            initResult = preProxyAdapter->InitializeMethod<methods::GetSwClusterInfo::Output>(methods::GetSwClusterInfoId);
            if (!initResult.HasValue()) {
                result = false;
                break;
            }
            methods::GetVersionInfo GetVersionInfo(preProxyAdapter->GetProxy(), methods::GetVersionInfoId);
            initResult = preProxyAdapter->InitializeMethod<methods::GetVersionInfo::Output>(methods::GetVersionInfoId);
            if (!initResult.HasValue()) {
                result = false;
                break;
            }
            methods::SetFinggerPrint SetFinggerPrint(preProxyAdapter->GetProxy(), methods::SetFinggerPrintId);
            initResult = preProxyAdapter->InitializeMethod<methods::SetFinggerPrint::Output>(methods::SetFinggerPrintId);
            if (!initResult.HasValue()) {
                result = false;
                break;
            }
            methods::GetSpecificVersionInfo GetSpecificVersionInfo(preProxyAdapter->GetProxy(), methods::GetSpecificVersionInfoId);
            initResult = preProxyAdapter->InitializeMethod<methods::GetSpecificVersionInfo::Output>(methods::GetSpecificVersionInfoId);
            if (!initResult.HasValue()) {
                result = false;
                break;
            }
            methods::RefreshVersion RefreshVersion(preProxyAdapter->GetProxy(), methods::RefreshVersionId);
            initResult = preProxyAdapter->InitializeMethod<methods::RefreshVersion::Output>(methods::RefreshVersionId);
            if (!initResult.HasValue()) {
                result = false;
                break;
            }
        } while(false);
        
        if (result == true) {
            ConstructionToken token(std::move(preProxyAdapter));
            return ara::core::Result<ConstructionToken>(std::move(token));
        } else {
            ConstructionToken token(std::move(preProxyAdapter));
            ara::core::Result<ConstructionToken> result(std::move(token));
            ara::core::ErrorCode errorcode(initResult.Error());
            result.EmplaceError(errorcode);
            return result;
        }
    }


    static ara::com::FindServiceHandle StartFindService(
        ara::com::FindServiceHandler<ara::com::internal::proxy::ProxyAdapter::HandleType> handler,
        ara::com::InstanceIdentifier instance)
    {
        return ara::com::internal::proxy::ProxyAdapter::StartFindService(handler, ::mdc::swm::SoftwareManagerServiceInterface::ServiceIdentifier, instance);
    }

    static ara::com::FindServiceHandle StartFindService(
        ara::com::FindServiceHandler<ara::com::internal::proxy::ProxyAdapter::HandleType> handler,
        ara::core::InstanceSpecifier specifier)
    {
        return ara::com::internal::proxy::ProxyAdapter::StartFindService(handler, ::mdc::swm::SoftwareManagerServiceInterface::ServiceIdentifier, specifier);
    }

    static ara::com::ServiceHandleContainer<ara::com::internal::proxy::ProxyAdapter::HandleType> FindService(
        ara::com::InstanceIdentifier instance)
    {
        return ara::com::internal::proxy::ProxyAdapter::FindService(::mdc::swm::SoftwareManagerServiceInterface::ServiceIdentifier, instance);
    }

    static ara::com::ServiceHandleContainer<ara::com::internal::proxy::ProxyAdapter::HandleType> FindService(
        ara::core::InstanceSpecifier specifier)
    {
        return ara::com::internal::proxy::ProxyAdapter::FindService(::mdc::swm::SoftwareManagerServiceInterface::ServiceIdentifier, specifier);
    }

    static void StopFindService(const ara::com::FindServiceHandle& handle)
    {
        ara::com::internal::proxy::ProxyAdapter::StopFindService(handle);
    }

    HandleType GetHandle() const
    {
        return proxyAdapter->GetHandle();
    }
    methods::GetFinggerPrint GetFinggerPrint;
    methods::GetHistory GetHistory;
    methods::GetHistoryInfo GetHistoryInfo;
    methods::GetSwClusterInfo GetSwClusterInfo;
    methods::GetVersionInfo GetVersionInfo;
    methods::SetFinggerPrint SetFinggerPrint;
    methods::GetSpecificVersionInfo GetSpecificVersionInfo;
    methods::RefreshVersion RefreshVersion;
};
} // namespace proxy
} // namespace swm
} // namespace mdc

#endif // MDC_SWM_SOFTWAREMANAGERSERVICEINTERFACE_PROXY_H
