/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2020-2021. All rights reserved.
 * Generated by VRTF CM-Generator
 */

#ifndef MDC_MDCCAN_IMPL_TYPE_HOSTSERVICEREQUESTPARAM_H
#define MDC_MDCCAN_IMPL_TYPE_HOSTSERVICEREQUESTPARAM_H
#include <cfloat>
#include <cmath>
#include "impl_type_uint16.h"
#include "impl_type_uint8.h"
#include "mdc/mdccan/impl_type_eventswitchreserveddata.h"

namespace mdc {
namespace mdccan {
struct HostServiceRequestParam {
    ::UInt16 serviceId;
    ::UInt16 serviceAction;
    ::UInt8 channelId;
    ::UInt8 switchSts;
    ::mdc::mdccan::EventSwitchReservedData reserved;

    static bool IsPlane()
    {
        return false;
    }


    using IsEnumerableTag = void;
    template<typename F>
    void enumerate(F& fun)
    {
        fun(serviceId);
        fun(serviceAction);
        fun(channelId);
        fun(switchSts);
        fun(reserved);
    }

    template<typename F>
    void enumerate(F& fun) const
    {
        fun(serviceId);
        fun(serviceAction);
        fun(channelId);
        fun(switchSts);
        fun(reserved);
    }

    bool operator == (const ::mdc::mdccan::HostServiceRequestParam& t) const
    {
        return (serviceId == t.serviceId) && (serviceAction == t.serviceAction) && (channelId == t.channelId) && (switchSts == t.switchSts) && (reserved == t.reserved);
    }
};
} // namespace mdccan
} // namespace mdc


#endif // MDC_MDCCAN_IMPL_TYPE_HOSTSERVICEREQUESTPARAM_H
