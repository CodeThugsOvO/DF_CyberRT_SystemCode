/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2020-2021. All rights reserved.
 * Generated by VRTF CM-Generator
 */

#ifndef MDC_MDCCAN_IMPL_TYPE_ELEMENTL_H
#define MDC_MDCCAN_IMPL_TYPE_ELEMENTL_H
#include <cfloat>
#include <cmath>
#include "impl_type_uint8.h"
#include "mdc/mdccan/impl_type_systemtime.h"
#include "impl_type_uint32.h"
#include "mdc/mdccan/impl_type_canfddatal.h"
#include "mdc/mdccan/impl_type_reserveddata.h"

namespace mdc {
namespace mdccan {
struct ElementL {
    ::UInt8 canIdType;
    ::UInt8 validLen;
    ::mdc::mdccan::Systemtime timeStamp;
    ::UInt32 canId;
    ::mdc::mdccan::CanFdDataL data;
    ::UInt32 checkSum;
    ::mdc::mdccan::ReservedData reserved;

    static bool IsPlane()
    {
        return false;
    }


    using IsEnumerableTag = void;
    template<typename F>
    void enumerate(F& fun)
    {
        fun(canIdType);
        fun(validLen);
        fun(timeStamp);
        fun(canId);
        fun(data);
        fun(checkSum);
        fun(reserved);
    }

    template<typename F>
    void enumerate(F& fun) const
    {
        fun(canIdType);
        fun(validLen);
        fun(timeStamp);
        fun(canId);
        fun(data);
        fun(checkSum);
        fun(reserved);
    }

    bool operator == (const ::mdc::mdccan::ElementL& t) const
    {
        return (canIdType == t.canIdType) && (validLen == t.validLen) && (timeStamp == t.timeStamp) && (canId == t.canId) && (data == t.data) && (checkSum == t.checkSum) && (reserved == t.reserved);
    }
};
} // namespace mdccan
} // namespace mdc


#endif // MDC_MDCCAN_IMPL_TYPE_ELEMENTL_H
