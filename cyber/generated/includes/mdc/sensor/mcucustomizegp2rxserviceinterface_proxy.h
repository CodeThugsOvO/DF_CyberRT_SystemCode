/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2020-2021. All rights reserved.
 * Generated by VRTF CM-Generator
 */

#ifndef MDC_SENSOR_MCUCUSTOMIZEGP2RXSERVICEINTERFACE_PROXY_H
#define MDC_SENSOR_MCUCUSTOMIZEGP2RXSERVICEINTERFACE_PROXY_H

#include "ara/com/internal/proxy/proxy_adapter.h"
#include "ara/com/internal/proxy/event_adapter.h"
#include "ara/com/internal/proxy/field_adapter.h"
#include "ara/com/internal/proxy/method_adapter.h"
#include "mdc/sensor/mcucustomizegp2rxserviceinterface_common.h"
#include <string>
#include <cfloat>
#include <cmath>

namespace mdc {
namespace sensor {
namespace proxy {
namespace events {
    using McuCustomizeDataGp2LdRxEvent = ara::com::internal::proxy::event::EventAdapter<::McuCustomizeLdDataParam>;
    using McuCustomizeDataGp2RxEvent = ara::com::internal::proxy::event::EventAdapter<::McuCustomizeDataParam>;
    static constexpr ara::com::internal::EntityId McuCustomizeDataGp2LdRxEventId = 61721; //McuCustomizeDataGp2LdRxEvent_event_hash
    static constexpr ara::com::internal::EntityId McuCustomizeDataGp2RxEventId = 33333; //McuCustomizeDataGp2RxEvent_event_hash
}

namespace fields {
}

namespace methods {
static constexpr ara::com::internal::EntityId McuCustomizeDataGp2SetMethodId = 12601; //McuCustomizeDataGp2SetMethod_method_hash


class McuCustomizeDataGp2SetMethod {
public:
    struct Output {
        ::McuCustomizeSetDataResult result;

        static bool IsPlane()
        {
            return false;
        }

        using IsEnumerableTag = void;
        template<typename F>
        void enumerate(F& fun)
        {
            fun(result);
        }

        template<typename F>
        void enumerate(F& fun) const
        {
            fun(result);
        }

        bool operator == (const Output& t) const
        {
           return (result == t.result);
        }
    };

    McuCustomizeDataGp2SetMethod(std::shared_ptr<vrtf::vcc::Proxy>& proxy, ara::com::internal::EntityId entityId): method_(proxy, entityId){}
    void Initialize(std::shared_ptr<vrtf::vcc::Proxy>& proxy, ara::com::internal::EntityId entityId)
    {
        method_.Initialize(proxy, entityId);
    }
    ara::core::Future<Output> operator()(const ::McuCustomizeDataParam& McuCustomizeData)
    {
        return method_(McuCustomizeData);
    }

    ara::com::internal::proxy::method::MethodAdapter<Output, ::McuCustomizeDataParam> GetMethod()
    {
        return method_;
    }

private:
    ara::com::internal::proxy::method::MethodAdapter<Output, ::McuCustomizeDataParam> method_;
};
} // namespace methods

class McuCustomizeGp2RxServiceInterfaceProxy {
private:
    std::unique_ptr<ara::com::internal::proxy::ProxyAdapter> proxyAdapter;
public:
    using HandleType = vrtf::vcc::api::types::HandleType;
    class ConstructionToken {
    public:
        ConstructionToken(std::unique_ptr<ara::com::internal::proxy::ProxyAdapter> proxy): ptr(std::move(proxy)){}
        ConstructionToken(ConstructionToken&& other) : ptr(std::move(other.ptr)) {}
        ConstructionToken& operator=(ConstructionToken && other)
        {
            if (&other != this) {
                ptr = std::move(other.ptr);
            }
            return *this;
        }
        ConstructionToken(const ConstructionToken&) = delete;
        ConstructionToken& operator = (const ConstructionToken&) = delete;
        std::unique_ptr<ara::com::internal::proxy::ProxyAdapter> GetProxyAdapter()
        {
            return std::move(ptr);
        }
    private:
        std::unique_ptr<ara::com::internal::proxy::ProxyAdapter> ptr;
    };

    virtual ~McuCustomizeGp2RxServiceInterfaceProxy()
    {
        McuCustomizeDataGp2LdRxEvent.UnsetReceiveHandler();
        McuCustomizeDataGp2LdRxEvent.Unsubscribe();
        McuCustomizeDataGp2RxEvent.UnsetReceiveHandler();
        McuCustomizeDataGp2RxEvent.Unsubscribe();
    }

    explicit McuCustomizeGp2RxServiceInterfaceProxy(const vrtf::vcc::api::types::HandleType &handle)
        : proxyAdapter(std::make_unique<ara::com::internal::proxy::ProxyAdapter>(::mdc::sensor::McuCustomizeGp2RxServiceInterface::ServiceIdentifier, handle)),
          McuCustomizeDataGp2LdRxEvent(proxyAdapter->GetProxy(), events::McuCustomizeDataGp2LdRxEventId, proxyAdapter->GetHandle(), ::mdc::sensor::McuCustomizeGp2RxServiceInterface::ServiceIdentifier),
          McuCustomizeDataGp2RxEvent(proxyAdapter->GetProxy(), events::McuCustomizeDataGp2RxEventId, proxyAdapter->GetHandle(), ::mdc::sensor::McuCustomizeGp2RxServiceInterface::ServiceIdentifier),
          McuCustomizeDataGp2SetMethod(proxyAdapter->GetProxy(), methods::McuCustomizeDataGp2SetMethodId){
            ara::core::Result<void> resultMcuCustomizeDataGp2SetMethod = proxyAdapter->InitializeMethod<methods::McuCustomizeDataGp2SetMethod::Output>(methods::McuCustomizeDataGp2SetMethodId);
            ThrowError(resultMcuCustomizeDataGp2SetMethod);
        }

    void ThrowError(ara::core::Result<void>& result)
    {
        if (!(result.HasValue())) {
#ifndef NOT_SUPPORT_EXCEPTIONS
            ara::core::ErrorCode errorcode(result.Error());
            throw ara::com::ComException(std::move(errorcode));
#else
            std::cerr << "Error: Not support exception, create skeleton failed!"<< std::endl;
#endif
        }
    }

    McuCustomizeGp2RxServiceInterfaceProxy(const McuCustomizeGp2RxServiceInterfaceProxy&) = delete;
    McuCustomizeGp2RxServiceInterfaceProxy& operator=(const McuCustomizeGp2RxServiceInterfaceProxy&) = delete;

    McuCustomizeGp2RxServiceInterfaceProxy(McuCustomizeGp2RxServiceInterfaceProxy&& other) = default;
    McuCustomizeGp2RxServiceInterfaceProxy& operator=(McuCustomizeGp2RxServiceInterfaceProxy&& other) = default;
    McuCustomizeGp2RxServiceInterfaceProxy(ConstructionToken&& token) noexcept
        : proxyAdapter(token.GetProxyAdapter()),
          McuCustomizeDataGp2LdRxEvent(proxyAdapter->GetProxy(), events::McuCustomizeDataGp2LdRxEventId, proxyAdapter->GetHandle(), ::mdc::sensor::McuCustomizeGp2RxServiceInterface::ServiceIdentifier),
          McuCustomizeDataGp2RxEvent(proxyAdapter->GetProxy(), events::McuCustomizeDataGp2RxEventId, proxyAdapter->GetHandle(), ::mdc::sensor::McuCustomizeGp2RxServiceInterface::ServiceIdentifier),
          McuCustomizeDataGp2SetMethod(proxyAdapter->GetProxy(), methods::McuCustomizeDataGp2SetMethodId){
    }

    static ara::core::Result<ConstructionToken> Preconstruct(
        const vrtf::vcc::api::types::HandleType &handle)
    {
        std::unique_ptr<ara::com::internal::proxy::ProxyAdapter> preProxyAdapter =
            std::make_unique<ara::com::internal::proxy::ProxyAdapter>(
               ::mdc::sensor::McuCustomizeGp2RxServiceInterface::ServiceIdentifier, handle);
        bool result = true;
        ara::core::Result<void> initResult;
        do {
            methods::McuCustomizeDataGp2SetMethod McuCustomizeDataGp2SetMethod(preProxyAdapter->GetProxy(), methods::McuCustomizeDataGp2SetMethodId);
            initResult = preProxyAdapter->InitializeMethod<methods::McuCustomizeDataGp2SetMethod::Output>(methods::McuCustomizeDataGp2SetMethodId);
            if (!initResult.HasValue()) {
                result = false;
                break;
            }
        } while(false);
        
        if (result == true) {
            ConstructionToken token(std::move(preProxyAdapter));
            return ara::core::Result<ConstructionToken>(std::move(token));
        } else {
            ConstructionToken token(std::move(preProxyAdapter));
            ara::core::Result<ConstructionToken> result(std::move(token));
            ara::core::ErrorCode errorcode(initResult.Error());
            result.EmplaceError(errorcode);
            return result;
        }
    }


    static ara::com::FindServiceHandle StartFindService(
        ara::com::FindServiceHandler<ara::com::internal::proxy::ProxyAdapter::HandleType> handler,
        ara::com::InstanceIdentifier instance)
    {
        return ara::com::internal::proxy::ProxyAdapter::StartFindService(handler, ::mdc::sensor::McuCustomizeGp2RxServiceInterface::ServiceIdentifier, instance);
    }

    static ara::com::FindServiceHandle StartFindService(
        ara::com::FindServiceHandler<ara::com::internal::proxy::ProxyAdapter::HandleType> handler,
        ara::core::InstanceSpecifier specifier)
    {
        return ara::com::internal::proxy::ProxyAdapter::StartFindService(handler, ::mdc::sensor::McuCustomizeGp2RxServiceInterface::ServiceIdentifier, specifier);
    }

    static ara::com::ServiceHandleContainer<ara::com::internal::proxy::ProxyAdapter::HandleType> FindService(
        ara::com::InstanceIdentifier instance)
    {
        return ara::com::internal::proxy::ProxyAdapter::FindService(::mdc::sensor::McuCustomizeGp2RxServiceInterface::ServiceIdentifier, instance);
    }

    static ara::com::ServiceHandleContainer<ara::com::internal::proxy::ProxyAdapter::HandleType> FindService(
        ara::core::InstanceSpecifier specifier)
    {
        return ara::com::internal::proxy::ProxyAdapter::FindService(::mdc::sensor::McuCustomizeGp2RxServiceInterface::ServiceIdentifier, specifier);
    }

    static void StopFindService(const ara::com::FindServiceHandle& handle)
    {
        ara::com::internal::proxy::ProxyAdapter::StopFindService(handle);
    }

    HandleType GetHandle() const
    {
        return proxyAdapter->GetHandle();
    }
    events::McuCustomizeDataGp2LdRxEvent McuCustomizeDataGp2LdRxEvent;
    events::McuCustomizeDataGp2RxEvent McuCustomizeDataGp2RxEvent;
    methods::McuCustomizeDataGp2SetMethod McuCustomizeDataGp2SetMethod;
};
} // namespace proxy
} // namespace sensor
} // namespace mdc

#endif // MDC_SENSOR_MCUCUSTOMIZEGP2RXSERVICEINTERFACE_PROXY_H
