/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2018-2019 Erik Moqvist
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
 * This file was generated by cantools version 38.0.2 Thu Jun  1 16:20:57 2023.
 */

#ifndef INS570D_H
#define INS570D_H

#ifdef __cplusplus
extern "C" {
#endif

#include <stdint.h>
#include <stdbool.h>
#include <stddef.h>

#ifndef EINVAL
#    define EINVAL 22
#endif

/* Frame ids. */
#define INS570D_GPS_TRIAXIAL_ATTITUDE_FRAME_ID (0x51bu)
#define INS570D_GPS_ALT_FLAG_FRAME_ID (0x31bu)
#define INS570D_GPS_THREEWAYSPEED_FRAME_ID (0x41bu)
#define INS570D_GPS_LAT_LON_FRAME_ID (0x21bu)
#define INS570D_GPS_TIME_FRAME_ID (0x9bu)
#define INS570D_Z_GYRO_ACCE_FRAME_ID (0x70bu)
#define INS570D_X_Y_GYRO_FRAME_ID (0x60bu)
#define INS570D_X_Y_ACCE_FRAME_ID (0x50bu)
#define INS570D_THREE_WAY_SPEED_FRAME_ID (0x40bu)
#define INS570D_ALT_FLAG_FRAME_ID (0x30bu)
#define INS570D_LATITUDE_LONG_FRAME_ID (0x20bu)
#define INS570D_TRIAXIAL_ATTITUDE_FRAME_ID (0x10bu)

/* Frame lengths in bytes. */
#define INS570D_GPS_TRIAXIAL_ATTITUDE_LENGTH (4u)
#define INS570D_GPS_ALT_FLAG_LENGTH (5u)
#define INS570D_GPS_THREEWAYSPEED_LENGTH (6u)
#define INS570D_GPS_LAT_LON_LENGTH (8u)
#define INS570D_GPS_TIME_LENGTH (6u)
#define INS570D_Z_GYRO_ACCE_LENGTH (8u)
#define INS570D_X_Y_GYRO_LENGTH (8u)
#define INS570D_X_Y_ACCE_LENGTH (8u)
#define INS570D_THREE_WAY_SPEED_LENGTH (6u)
#define INS570D_ALT_FLAG_LENGTH (5u)
#define INS570D_LATITUDE_LONG_LENGTH (8u)
#define INS570D_TRIAXIAL_ATTITUDE_LENGTH (6u)

/* Extended or standard frame types. */
#define INS570D_GPS_TRIAXIAL_ATTITUDE_IS_EXTENDED (0)
#define INS570D_GPS_ALT_FLAG_IS_EXTENDED (0)
#define INS570D_GPS_THREEWAYSPEED_IS_EXTENDED (0)
#define INS570D_GPS_LAT_LON_IS_EXTENDED (0)
#define INS570D_GPS_TIME_IS_EXTENDED (0)
#define INS570D_Z_GYRO_ACCE_IS_EXTENDED (0)
#define INS570D_X_Y_GYRO_IS_EXTENDED (0)
#define INS570D_X_Y_ACCE_IS_EXTENDED (0)
#define INS570D_THREE_WAY_SPEED_IS_EXTENDED (0)
#define INS570D_ALT_FLAG_IS_EXTENDED (0)
#define INS570D_LATITUDE_LONG_IS_EXTENDED (0)
#define INS570D_TRIAXIAL_ATTITUDE_IS_EXTENDED (0)

/* Frame cycle times in milliseconds. */


/* Signal choices. */


/**
 * Signals in message GPS_Triaxial_attitude.
 *
 * All signal values are as on the CAN bus.
 */
struct ins570d_gps_triaxial_attitude_t {
    /**
     * Range: 0..65535 (0..655.35 Degrees)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t gps_course;

    /**
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t gps_rev;
};

/**
 * Signals in message GPS_AltFlag.
 *
 * All signal values are as on the CAN bus.
 */
struct ins570d_gps_alt_flag_t {
    /**
     * Range: -2147483648..2147483647 (-2147483.648..2147483.647 m)
     * Scale: 0.001
     * Offset: 0
     */
    int32_t gps_alt;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t gps_flag;
};

/**
 * Signals in message GPS_threewayspeed.
 *
 * All signal values are as on the CAN bus.
 */
struct ins570d_gps_threewayspeed_t {
    /**
     * Range: -32768..32767 (-327.68..327.67 m/s)
     * Scale: 0.01
     * Offset: 0
     */
    int16_t gps_east_velocity;

    /**
     * Range: -32768..32767 (-327.68..327.67 m/s)
     * Scale: 0.01
     * Offset: 0
     */
    int16_t gps_north_velocity;

    /**
     * Range: -32768..32767 (-327.68..327.67 m/s)
     * Scale: 0.01
     * Offset: 0
     */
    int16_t gps_up_velocity;
};

/**
 * Signals in message GPS_LatLon.
 *
 * All signal values are as on the CAN bus.
 */
struct ins570d_gps_lat_lon_t {
    /**
     * Range: -2147483648..2147483647 (-214.7483648..214.7483647 Degrees)
     * Scale: 1e-07
     * Offset: 0
     */
    int32_t gps_lat;

    /**
     * Range: -2147483648..2147483647 (-214.7483648..214.7483647 Degrees)
     * Scale: 1e-07
     * Offset: 0
     */
    int32_t gps_lon;
};

/**
 * Signals in message GPS_time.
 *
 * All signal values are as on the CAN bus.
 */
struct ins570d_gps_time_t {
    /**
     * Range: 0..65535 (0..65535 Week)
     * Scale: 1
     * Offset: 0
     */
    uint16_t gps_week;

    /**
     * Range: 0..65535 (0..65535 Ms)
     * Scale: 1
     * Offset: 0
     */
    uint16_t gps_millisecond;
};

/**
 * Signals in message Z_Gyro_Acce.
 *
 * All signal values are as on the CAN bus.
 */
struct ins570d_z_gyro_acce_t {
    /**
     * Range: -2147483648..2147483647 (-21474.83648..21474.83647 deg/s)
     * Scale: 1e-05
     * Offset: 0
     */
    int32_t z_gyro;

    /**
     * Range: -2147483648..2147483647 (-21474.83648..21474.83647 -)
     * Scale: 1e-05
     * Offset: 0
     */
    int32_t z_acce;
};

/**
 * Signals in message X_Y_Gyro.
 *
 * All signal values are as on the CAN bus.
 */
struct ins570d_x_y_gyro_t {
    /**
     * Range: -2147483648..2147483647 (-21474.83648..21474.83647 deg/s)
     * Scale: 1e-05
     * Offset: 0
     */
    int32_t x_gyro;

    /**
     * Range: -2147483648..2147483647 (-21474.83648..21474.83647 deg/s)
     * Scale: 1e-05
     * Offset: 0
     */
    int32_t y_gyro;
};

/**
 * Signals in message X_Y_acce.
 *
 * All signal values are as on the CAN bus.
 */
struct ins570d_x_y_acce_t {
    /**
     * Range: -2147483648..2147483647 (-21474.83648..21474.83647 -)
     * Scale: 1e-05
     * Offset: 0
     */
    int32_t x_acce;

    /**
     * Range: -2147483648..2147483647 (-21474.83648..21474.83647 -)
     * Scale: 1e-05
     * Offset: 0
     */
    int32_t y_acce;
};

/**
 * Signals in message Three_way_speed.
 *
 * All signal values are as on the CAN bus.
 */
struct ins570d_three_way_speed_t {
    /**
     * Range: -32768..32767 (-327.68..327.67 m/s)
     * Scale: 0.01
     * Offset: 0
     */
    int16_t east_velocity;

    /**
     * Range: -32768..32767 (-327.68..327.67 m/s)
     * Scale: 0.01
     * Offset: 0
     */
    int16_t north_velocity;

    /**
     * Range: -32768..32767 (-327.68..327.67 m/s)
     * Scale: 0.01
     * Offset: 0
     */
    int16_t up_velocity;
};

/**
 * Signals in message Alt_Flag.
 *
 * All signal values are as on the CAN bus.
 */
struct ins570d_alt_flag_t {
    /**
     * Range: -2147483648..2147483647 (-2147483.648..2147483.647 m)
     * Scale: 0.001
     * Offset: 0
     */
    int32_t altflag_alt;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t altflag_flag;
};

/**
 * Signals in message Latitude_long.
 *
 * All signal values are as on the CAN bus.
 */
struct ins570d_latitude_long_t {
    /**
     * Range: -2147483648..2147483647 (-214.7483648..214.7483647 Degrees)
     * Scale: 1e-07
     * Offset: 0
     */
    int32_t lat_lon_lat;

    /**
     * Range: -2147483648..2147483647 (-214.7483648..214.7483647 Degrees)
     * Scale: 1e-07
     * Offset: 0
     */
    int32_t lat_lon_lon;
};

/**
 * Signals in message Triaxial_attitude.
 *
 * All signal values are as on the CAN bus.
 */
struct ins570d_triaxial_attitude_t {
    /**
     * Range: 0..65535 (0..655.35 Degrees)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t tra_course;

    /**
     * Range: -32768..32767 (-327.68..327.67 Degrees)
     * Scale: 0.01
     * Offset: 0
     */
    int16_t tra_pitch;

    /**
     * Range: -32768..32767 (-327.68..327.67 Degrees)
     * Scale: 0.01
     * Offset: 0
     */
    int16_t tra_roll;
};

/**
 * Pack message GPS_Triaxial_attitude.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ins570d_gps_triaxial_attitude_pack(
    uint8_t *dst_p,
    const struct ins570d_gps_triaxial_attitude_t *src_p,
    size_t size);

/**
 * Unpack message GPS_Triaxial_attitude.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ins570d_gps_triaxial_attitude_unpack(
    struct ins570d_gps_triaxial_attitude_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ins570d_gps_triaxial_attitude_gps_course_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ins570d_gps_triaxial_attitude_gps_course_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ins570d_gps_triaxial_attitude_gps_course_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ins570d_gps_triaxial_attitude_gps_rev_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ins570d_gps_triaxial_attitude_gps_rev_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ins570d_gps_triaxial_attitude_gps_rev_is_in_range(int16_t value);

/**
 * Pack message GPS_AltFlag.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ins570d_gps_alt_flag_pack(
    uint8_t *dst_p,
    const struct ins570d_gps_alt_flag_t *src_p,
    size_t size);

/**
 * Unpack message GPS_AltFlag.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ins570d_gps_alt_flag_unpack(
    struct ins570d_gps_alt_flag_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int32_t ins570d_gps_alt_flag_gps_alt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ins570d_gps_alt_flag_gps_alt_decode(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ins570d_gps_alt_flag_gps_alt_is_in_range(int32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ins570d_gps_alt_flag_gps_flag_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ins570d_gps_alt_flag_gps_flag_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ins570d_gps_alt_flag_gps_flag_is_in_range(uint8_t value);

/**
 * Pack message GPS_threewayspeed.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ins570d_gps_threewayspeed_pack(
    uint8_t *dst_p,
    const struct ins570d_gps_threewayspeed_t *src_p,
    size_t size);

/**
 * Unpack message GPS_threewayspeed.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ins570d_gps_threewayspeed_unpack(
    struct ins570d_gps_threewayspeed_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ins570d_gps_threewayspeed_gps_east_velocity_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ins570d_gps_threewayspeed_gps_east_velocity_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ins570d_gps_threewayspeed_gps_east_velocity_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ins570d_gps_threewayspeed_gps_north_velocity_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ins570d_gps_threewayspeed_gps_north_velocity_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ins570d_gps_threewayspeed_gps_north_velocity_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ins570d_gps_threewayspeed_gps_up_velocity_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ins570d_gps_threewayspeed_gps_up_velocity_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ins570d_gps_threewayspeed_gps_up_velocity_is_in_range(int16_t value);

/**
 * Pack message GPS_LatLon.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ins570d_gps_lat_lon_pack(
    uint8_t *dst_p,
    const struct ins570d_gps_lat_lon_t *src_p,
    size_t size);

/**
 * Unpack message GPS_LatLon.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ins570d_gps_lat_lon_unpack(
    struct ins570d_gps_lat_lon_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int32_t ins570d_gps_lat_lon_gps_lat_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ins570d_gps_lat_lon_gps_lat_decode(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ins570d_gps_lat_lon_gps_lat_is_in_range(int32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int32_t ins570d_gps_lat_lon_gps_lon_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ins570d_gps_lat_lon_gps_lon_decode(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ins570d_gps_lat_lon_gps_lon_is_in_range(int32_t value);

/**
 * Pack message GPS_time.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ins570d_gps_time_pack(
    uint8_t *dst_p,
    const struct ins570d_gps_time_t *src_p,
    size_t size);

/**
 * Unpack message GPS_time.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ins570d_gps_time_unpack(
    struct ins570d_gps_time_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ins570d_gps_time_gps_week_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ins570d_gps_time_gps_week_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ins570d_gps_time_gps_week_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ins570d_gps_time_gps_millisecond_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ins570d_gps_time_gps_millisecond_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ins570d_gps_time_gps_millisecond_is_in_range(uint16_t value);

/**
 * Pack message Z_Gyro_Acce.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ins570d_z_gyro_acce_pack(
    uint8_t *dst_p,
    const struct ins570d_z_gyro_acce_t *src_p,
    size_t size);

/**
 * Unpack message Z_Gyro_Acce.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ins570d_z_gyro_acce_unpack(
    struct ins570d_z_gyro_acce_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int32_t ins570d_z_gyro_acce_z_gyro_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ins570d_z_gyro_acce_z_gyro_decode(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ins570d_z_gyro_acce_z_gyro_is_in_range(int32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int32_t ins570d_z_gyro_acce_z_acce_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ins570d_z_gyro_acce_z_acce_decode(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ins570d_z_gyro_acce_z_acce_is_in_range(int32_t value);

/**
 * Pack message X_Y_Gyro.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ins570d_x_y_gyro_pack(
    uint8_t *dst_p,
    const struct ins570d_x_y_gyro_t *src_p,
    size_t size);

/**
 * Unpack message X_Y_Gyro.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ins570d_x_y_gyro_unpack(
    struct ins570d_x_y_gyro_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int32_t ins570d_x_y_gyro_x_gyro_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ins570d_x_y_gyro_x_gyro_decode(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ins570d_x_y_gyro_x_gyro_is_in_range(int32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int32_t ins570d_x_y_gyro_y_gyro_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ins570d_x_y_gyro_y_gyro_decode(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ins570d_x_y_gyro_y_gyro_is_in_range(int32_t value);

/**
 * Pack message X_Y_acce.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ins570d_x_y_acce_pack(
    uint8_t *dst_p,
    const struct ins570d_x_y_acce_t *src_p,
    size_t size);

/**
 * Unpack message X_Y_acce.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ins570d_x_y_acce_unpack(
    struct ins570d_x_y_acce_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int32_t ins570d_x_y_acce_x_acce_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ins570d_x_y_acce_x_acce_decode(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ins570d_x_y_acce_x_acce_is_in_range(int32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int32_t ins570d_x_y_acce_y_acce_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ins570d_x_y_acce_y_acce_decode(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ins570d_x_y_acce_y_acce_is_in_range(int32_t value);

/**
 * Pack message Three_way_speed.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ins570d_three_way_speed_pack(
    uint8_t *dst_p,
    const struct ins570d_three_way_speed_t *src_p,
    size_t size);

/**
 * Unpack message Three_way_speed.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ins570d_three_way_speed_unpack(
    struct ins570d_three_way_speed_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ins570d_three_way_speed_east_velocity_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ins570d_three_way_speed_east_velocity_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ins570d_three_way_speed_east_velocity_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ins570d_three_way_speed_north_velocity_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ins570d_three_way_speed_north_velocity_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ins570d_three_way_speed_north_velocity_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ins570d_three_way_speed_up_velocity_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ins570d_three_way_speed_up_velocity_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ins570d_three_way_speed_up_velocity_is_in_range(int16_t value);

/**
 * Pack message Alt_Flag.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ins570d_alt_flag_pack(
    uint8_t *dst_p,
    const struct ins570d_alt_flag_t *src_p,
    size_t size);

/**
 * Unpack message Alt_Flag.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ins570d_alt_flag_unpack(
    struct ins570d_alt_flag_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int32_t ins570d_alt_flag_altflag_alt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ins570d_alt_flag_altflag_alt_decode(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ins570d_alt_flag_altflag_alt_is_in_range(int32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ins570d_alt_flag_altflag_flag_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ins570d_alt_flag_altflag_flag_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ins570d_alt_flag_altflag_flag_is_in_range(uint8_t value);

/**
 * Pack message Latitude_long.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ins570d_latitude_long_pack(
    uint8_t *dst_p,
    const struct ins570d_latitude_long_t *src_p,
    size_t size);

/**
 * Unpack message Latitude_long.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ins570d_latitude_long_unpack(
    struct ins570d_latitude_long_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int32_t ins570d_latitude_long_lat_lon_lat_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ins570d_latitude_long_lat_lon_lat_decode(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ins570d_latitude_long_lat_lon_lat_is_in_range(int32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int32_t ins570d_latitude_long_lat_lon_lon_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ins570d_latitude_long_lat_lon_lon_decode(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ins570d_latitude_long_lat_lon_lon_is_in_range(int32_t value);

/**
 * Pack message Triaxial_attitude.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ins570d_triaxial_attitude_pack(
    uint8_t *dst_p,
    const struct ins570d_triaxial_attitude_t *src_p,
    size_t size);

/**
 * Unpack message Triaxial_attitude.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ins570d_triaxial_attitude_unpack(
    struct ins570d_triaxial_attitude_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ins570d_triaxial_attitude_tra_course_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ins570d_triaxial_attitude_tra_course_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ins570d_triaxial_attitude_tra_course_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ins570d_triaxial_attitude_tra_pitch_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ins570d_triaxial_attitude_tra_pitch_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ins570d_triaxial_attitude_tra_pitch_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ins570d_triaxial_attitude_tra_roll_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ins570d_triaxial_attitude_tra_roll_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ins570d_triaxial_attitude_tra_roll_is_in_range(int16_t value);


#ifdef __cplusplus
}
#endif

#endif
