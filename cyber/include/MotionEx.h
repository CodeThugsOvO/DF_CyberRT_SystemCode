// Generated by gencpp from file dfcv_mining_msgs/MotionEx.msg
// DO NOT EDIT!


#ifndef DFCV_MINING_MSGS_MESSAGE_MOTIONEX_H
#define DFCV_MINING_MSGS_MESSAGE_MOTIONEX_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace dfcv_mining_msgs
{
template <class ContainerAllocator>
struct MotionEx_
{
  typedef MotionEx_<ContainerAllocator> Type;

  MotionEx_()
    : PathPlan_LateralOffset(0.0)
    , PathPlan_YawOffset(0.0)
    , PathPlan_TargetCurvature(0.0)
    , SpeedPlan_TargetSpeed(0.0)
    , SpeedPlan_TargetAcceleration(0.0)
    , RoutePlan_CurrentRouteID(0)
    , RoutePlan_CurrentRouteRemainderDistance(0.0)
    , PathPlan_Stop(0)  {
    }
  MotionEx_(const ContainerAllocator& _alloc)
    : PathPlan_LateralOffset(0.0)
    , PathPlan_YawOffset(0.0)
    , PathPlan_TargetCurvature(0.0)
    , SpeedPlan_TargetSpeed(0.0)
    , SpeedPlan_TargetAcceleration(0.0)
    , RoutePlan_CurrentRouteID(0)
    , RoutePlan_CurrentRouteRemainderDistance(0.0)
    , PathPlan_Stop(0)  {
  (void)_alloc;
    }



   typedef float _PathPlan_LateralOffset_type;
  _PathPlan_LateralOffset_type PathPlan_LateralOffset;

   typedef float _PathPlan_YawOffset_type;
  _PathPlan_YawOffset_type PathPlan_YawOffset;

   typedef double _PathPlan_TargetCurvature_type;
  _PathPlan_TargetCurvature_type PathPlan_TargetCurvature;

   typedef float _SpeedPlan_TargetSpeed_type;
  _SpeedPlan_TargetSpeed_type SpeedPlan_TargetSpeed;

   typedef float _SpeedPlan_TargetAcceleration_type;
  _SpeedPlan_TargetAcceleration_type SpeedPlan_TargetAcceleration;

   typedef uint16_t _RoutePlan_CurrentRouteID_type;
  _RoutePlan_CurrentRouteID_type RoutePlan_CurrentRouteID;

   typedef float _RoutePlan_CurrentRouteRemainderDistance_type;
  _RoutePlan_CurrentRouteRemainderDistance_type RoutePlan_CurrentRouteRemainderDistance;

   typedef uint8_t _PathPlan_Stop_type;
  _PathPlan_Stop_type PathPlan_Stop;





  typedef boost::shared_ptr< ::dfcv_mining_msgs::MotionEx_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dfcv_mining_msgs::MotionEx_<ContainerAllocator> const> ConstPtr;

}; // struct MotionEx_

typedef ::dfcv_mining_msgs::MotionEx_<std::allocator<void> > MotionEx;

typedef boost::shared_ptr< ::dfcv_mining_msgs::MotionEx > MotionExPtr;
typedef boost::shared_ptr< ::dfcv_mining_msgs::MotionEx const> MotionExConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dfcv_mining_msgs::MotionEx_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dfcv_mining_msgs::MotionEx_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dfcv_mining_msgs::MotionEx_<ContainerAllocator1> & lhs, const ::dfcv_mining_msgs::MotionEx_<ContainerAllocator2> & rhs)
{
  return lhs.PathPlan_LateralOffset == rhs.PathPlan_LateralOffset &&
    lhs.PathPlan_YawOffset == rhs.PathPlan_YawOffset &&
    lhs.PathPlan_TargetCurvature == rhs.PathPlan_TargetCurvature &&
    lhs.SpeedPlan_TargetSpeed == rhs.SpeedPlan_TargetSpeed &&
    lhs.SpeedPlan_TargetAcceleration == rhs.SpeedPlan_TargetAcceleration &&
    lhs.RoutePlan_CurrentRouteID == rhs.RoutePlan_CurrentRouteID &&
    lhs.RoutePlan_CurrentRouteRemainderDistance == rhs.RoutePlan_CurrentRouteRemainderDistance &&
    lhs.PathPlan_Stop == rhs.PathPlan_Stop;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dfcv_mining_msgs::MotionEx_<ContainerAllocator1> & lhs, const ::dfcv_mining_msgs::MotionEx_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dfcv_mining_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::dfcv_mining_msgs::MotionEx_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dfcv_mining_msgs::MotionEx_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dfcv_mining_msgs::MotionEx_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dfcv_mining_msgs::MotionEx_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dfcv_mining_msgs::MotionEx_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dfcv_mining_msgs::MotionEx_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dfcv_mining_msgs::MotionEx_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2d2ad83fe979890b4282118c5fa55b13";
  }

  static const char* value(const ::dfcv_mining_msgs::MotionEx_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2d2ad83fe979890bULL;
  static const uint64_t static_value2 = 0x4282118c5fa55b13ULL;
};

template<class ContainerAllocator>
struct DataType< ::dfcv_mining_msgs::MotionEx_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dfcv_mining_msgs/MotionEx";
  }

  static const char* value(const ::dfcv_mining_msgs::MotionEx_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dfcv_mining_msgs::MotionEx_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 PathPlan_LateralOffset\n"
"float32 PathPlan_YawOffset\n"
"float64 PathPlan_TargetCurvature \n"
" \n"
"float32 SpeedPlan_TargetSpeed      \n"
"float32 SpeedPlan_TargetAcceleration\n"
" \n"
"uint16 RoutePlan_CurrentRouteID\n"
"float32 RoutePlan_CurrentRouteRemainderDistance\n"
"\n"
"uint8 PathPlan_Stop\n"
;
  }

  static const char* value(const ::dfcv_mining_msgs::MotionEx_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dfcv_mining_msgs::MotionEx_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.PathPlan_LateralOffset);
      stream.next(m.PathPlan_YawOffset);
      stream.next(m.PathPlan_TargetCurvature);
      stream.next(m.SpeedPlan_TargetSpeed);
      stream.next(m.SpeedPlan_TargetAcceleration);
      stream.next(m.RoutePlan_CurrentRouteID);
      stream.next(m.RoutePlan_CurrentRouteRemainderDistance);
      stream.next(m.PathPlan_Stop);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MotionEx_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dfcv_mining_msgs::MotionEx_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dfcv_mining_msgs::MotionEx_<ContainerAllocator>& v)
  {
    s << indent << "PathPlan_LateralOffset: ";
    Printer<float>::stream(s, indent + "  ", v.PathPlan_LateralOffset);
    s << indent << "PathPlan_YawOffset: ";
    Printer<float>::stream(s, indent + "  ", v.PathPlan_YawOffset);
    s << indent << "PathPlan_TargetCurvature: ";
    Printer<double>::stream(s, indent + "  ", v.PathPlan_TargetCurvature);
    s << indent << "SpeedPlan_TargetSpeed: ";
    Printer<float>::stream(s, indent + "  ", v.SpeedPlan_TargetSpeed);
    s << indent << "SpeedPlan_TargetAcceleration: ";
    Printer<float>::stream(s, indent + "  ", v.SpeedPlan_TargetAcceleration);
    s << indent << "RoutePlan_CurrentRouteID: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.RoutePlan_CurrentRouteID);
    s << indent << "RoutePlan_CurrentRouteRemainderDistance: ";
    Printer<float>::stream(s, indent + "  ", v.RoutePlan_CurrentRouteRemainderDistance);
    s << indent << "PathPlan_Stop: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.PathPlan_Stop);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DFCV_MINING_MSGS_MESSAGE_MOTIONEX_H
