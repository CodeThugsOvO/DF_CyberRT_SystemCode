// Generated by gencpp from file dfcv_mining_msgs/LocationIMU.msg
// DO NOT EDIT!


#ifndef DFCV_MINING_MSGS_MESSAGE_LOCATIONIMU_H
#define DFCV_MINING_MSGS_MESSAGE_LOCATIONIMU_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace dfcv_mining_msgs
{
template <class ContainerAllocator>
struct LocationIMU_
{
  typedef LocationIMU_<ContainerAllocator> Type;

  LocationIMU_()
    : header()
    , roll(0.0)
    , pitch(0.0)
    , yaw(0.0)
    , GPS_Millisecond(0)
    , GPS_Week(0)
    , gyroX(0.0)
    , gyroY(0.0)
    , gyroZ(0.0)
    , accX(0.0)
    , accY(0.0)
    , accZ(0.0)  {
    }
  LocationIMU_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , roll(0.0)
    , pitch(0.0)
    , yaw(0.0)
    , GPS_Millisecond(0)
    , GPS_Week(0)
    , gyroX(0.0)
    , gyroY(0.0)
    , gyroZ(0.0)
    , accX(0.0)
    , accY(0.0)
    , accZ(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef float _roll_type;
  _roll_type roll;

   typedef float _pitch_type;
  _pitch_type pitch;

   typedef float _yaw_type;
  _yaw_type yaw;

   typedef uint16_t _GPS_Millisecond_type;
  _GPS_Millisecond_type GPS_Millisecond;

   typedef uint16_t _GPS_Week_type;
  _GPS_Week_type GPS_Week;

   typedef float _gyroX_type;
  _gyroX_type gyroX;

   typedef float _gyroY_type;
  _gyroY_type gyroY;

   typedef float _gyroZ_type;
  _gyroZ_type gyroZ;

   typedef float _accX_type;
  _accX_type accX;

   typedef float _accY_type;
  _accY_type accY;

   typedef float _accZ_type;
  _accZ_type accZ;





  typedef boost::shared_ptr< ::dfcv_mining_msgs::LocationIMU_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dfcv_mining_msgs::LocationIMU_<ContainerAllocator> const> ConstPtr;

}; // struct LocationIMU_

typedef ::dfcv_mining_msgs::LocationIMU_<std::allocator<void> > LocationIMU;

typedef boost::shared_ptr< ::dfcv_mining_msgs::LocationIMU > LocationIMUPtr;
typedef boost::shared_ptr< ::dfcv_mining_msgs::LocationIMU const> LocationIMUConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dfcv_mining_msgs::LocationIMU_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dfcv_mining_msgs::LocationIMU_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dfcv_mining_msgs::LocationIMU_<ContainerAllocator1> & lhs, const ::dfcv_mining_msgs::LocationIMU_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.roll == rhs.roll &&
    lhs.pitch == rhs.pitch &&
    lhs.yaw == rhs.yaw &&
    lhs.GPS_Millisecond == rhs.GPS_Millisecond &&
    lhs.GPS_Week == rhs.GPS_Week &&
    lhs.gyroX == rhs.gyroX &&
    lhs.gyroY == rhs.gyroY &&
    lhs.gyroZ == rhs.gyroZ &&
    lhs.accX == rhs.accX &&
    lhs.accY == rhs.accY &&
    lhs.accZ == rhs.accZ;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dfcv_mining_msgs::LocationIMU_<ContainerAllocator1> & lhs, const ::dfcv_mining_msgs::LocationIMU_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dfcv_mining_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::dfcv_mining_msgs::LocationIMU_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dfcv_mining_msgs::LocationIMU_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dfcv_mining_msgs::LocationIMU_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dfcv_mining_msgs::LocationIMU_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dfcv_mining_msgs::LocationIMU_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dfcv_mining_msgs::LocationIMU_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dfcv_mining_msgs::LocationIMU_<ContainerAllocator> >
{
  static const char* value()
  {
    return "aa175259545ea81c3129afe7e76fd2bc";
  }

  static const char* value(const ::dfcv_mining_msgs::LocationIMU_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xaa175259545ea81cULL;
  static const uint64_t static_value2 = 0x3129afe7e76fd2bcULL;
};

template<class ContainerAllocator>
struct DataType< ::dfcv_mining_msgs::LocationIMU_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dfcv_mining_msgs/LocationIMU";
  }

  static const char* value(const ::dfcv_mining_msgs::LocationIMU_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dfcv_mining_msgs::LocationIMU_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"\n"
"float32 roll\n"
"float32 pitch\n"
"float32 yaw\n"
"\n"
"uint16 GPS_Millisecond\n"
"uint16 GPS_Week\n"
"\n"
"float32 gyroX\n"
"float32 gyroY\n"
"float32 gyroZ\n"
"\n"
"float32 accX\n"
"float32 accY\n"
"float32 accZ\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::dfcv_mining_msgs::LocationIMU_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dfcv_mining_msgs::LocationIMU_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.roll);
      stream.next(m.pitch);
      stream.next(m.yaw);
      stream.next(m.GPS_Millisecond);
      stream.next(m.GPS_Week);
      stream.next(m.gyroX);
      stream.next(m.gyroY);
      stream.next(m.gyroZ);
      stream.next(m.accX);
      stream.next(m.accY);
      stream.next(m.accZ);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LocationIMU_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dfcv_mining_msgs::LocationIMU_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dfcv_mining_msgs::LocationIMU_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "roll: ";
    Printer<float>::stream(s, indent + "  ", v.roll);
    s << indent << "pitch: ";
    Printer<float>::stream(s, indent + "  ", v.pitch);
    s << indent << "yaw: ";
    Printer<float>::stream(s, indent + "  ", v.yaw);
    s << indent << "GPS_Millisecond: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.GPS_Millisecond);
    s << indent << "GPS_Week: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.GPS_Week);
    s << indent << "gyroX: ";
    Printer<float>::stream(s, indent + "  ", v.gyroX);
    s << indent << "gyroY: ";
    Printer<float>::stream(s, indent + "  ", v.gyroY);
    s << indent << "gyroZ: ";
    Printer<float>::stream(s, indent + "  ", v.gyroZ);
    s << indent << "accX: ";
    Printer<float>::stream(s, indent + "  ", v.accX);
    s << indent << "accY: ";
    Printer<float>::stream(s, indent + "  ", v.accY);
    s << indent << "accZ: ";
    Printer<float>::stream(s, indent + "  ", v.accZ);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DFCV_MINING_MSGS_MESSAGE_LOCATIONIMU_H
