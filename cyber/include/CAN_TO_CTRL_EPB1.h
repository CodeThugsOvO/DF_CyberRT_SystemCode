// Generated by gencpp from file dfcv_mining_msgs/CAN_TO_CTRL_EPB1.msg
// DO NOT EDIT!


#ifndef DFCV_MINING_MSGS_MESSAGE_CAN_TO_CTRL_EPB1_H
#define DFCV_MINING_MSGS_MESSAGE_CAN_TO_CTRL_EPB1_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace dfcv_mining_msgs
{
template <class ContainerAllocator>
struct CAN_TO_CTRL_EPB1_
{
  typedef CAN_TO_CTRL_EPB1_<ContainerAllocator> Type;

  CAN_TO_CTRL_EPB1_()
    : EPB_ParkBrKSt(0.0)  {
    }
  CAN_TO_CTRL_EPB1_(const ContainerAllocator& _alloc)
    : EPB_ParkBrKSt(0.0)  {
  (void)_alloc;
    }



   typedef float _EPB_ParkBrKSt_type;
  _EPB_ParkBrKSt_type EPB_ParkBrKSt;





  typedef boost::shared_ptr< ::dfcv_mining_msgs::CAN_TO_CTRL_EPB1_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dfcv_mining_msgs::CAN_TO_CTRL_EPB1_<ContainerAllocator> const> ConstPtr;

}; // struct CAN_TO_CTRL_EPB1_

typedef ::dfcv_mining_msgs::CAN_TO_CTRL_EPB1_<std::allocator<void> > CAN_TO_CTRL_EPB1;

typedef boost::shared_ptr< ::dfcv_mining_msgs::CAN_TO_CTRL_EPB1 > CAN_TO_CTRL_EPB1Ptr;
typedef boost::shared_ptr< ::dfcv_mining_msgs::CAN_TO_CTRL_EPB1 const> CAN_TO_CTRL_EPB1ConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dfcv_mining_msgs::CAN_TO_CTRL_EPB1_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dfcv_mining_msgs::CAN_TO_CTRL_EPB1_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dfcv_mining_msgs::CAN_TO_CTRL_EPB1_<ContainerAllocator1> & lhs, const ::dfcv_mining_msgs::CAN_TO_CTRL_EPB1_<ContainerAllocator2> & rhs)
{
  return lhs.EPB_ParkBrKSt == rhs.EPB_ParkBrKSt;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dfcv_mining_msgs::CAN_TO_CTRL_EPB1_<ContainerAllocator1> & lhs, const ::dfcv_mining_msgs::CAN_TO_CTRL_EPB1_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dfcv_mining_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::dfcv_mining_msgs::CAN_TO_CTRL_EPB1_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dfcv_mining_msgs::CAN_TO_CTRL_EPB1_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dfcv_mining_msgs::CAN_TO_CTRL_EPB1_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dfcv_mining_msgs::CAN_TO_CTRL_EPB1_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dfcv_mining_msgs::CAN_TO_CTRL_EPB1_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dfcv_mining_msgs::CAN_TO_CTRL_EPB1_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dfcv_mining_msgs::CAN_TO_CTRL_EPB1_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8edf3461867fef8e4998f32aaa764f3e";
  }

  static const char* value(const ::dfcv_mining_msgs::CAN_TO_CTRL_EPB1_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8edf3461867fef8eULL;
  static const uint64_t static_value2 = 0x4998f32aaa764f3eULL;
};

template<class ContainerAllocator>
struct DataType< ::dfcv_mining_msgs::CAN_TO_CTRL_EPB1_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dfcv_mining_msgs/CAN_TO_CTRL_EPB1";
  }

  static const char* value(const ::dfcv_mining_msgs::CAN_TO_CTRL_EPB1_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dfcv_mining_msgs::CAN_TO_CTRL_EPB1_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 EPB_ParkBrKSt\n"
;
  }

  static const char* value(const ::dfcv_mining_msgs::CAN_TO_CTRL_EPB1_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dfcv_mining_msgs::CAN_TO_CTRL_EPB1_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.EPB_ParkBrKSt);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CAN_TO_CTRL_EPB1_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dfcv_mining_msgs::CAN_TO_CTRL_EPB1_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dfcv_mining_msgs::CAN_TO_CTRL_EPB1_<ContainerAllocator>& v)
  {
    s << indent << "EPB_ParkBrKSt: ";
    Printer<float>::stream(s, indent + "  ", v.EPB_ParkBrKSt);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DFCV_MINING_MSGS_MESSAGE_CAN_TO_CTRL_EPB1_H
