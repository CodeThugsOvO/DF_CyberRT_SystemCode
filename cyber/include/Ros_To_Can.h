// Generated by gencpp from file dfcv_mining_msgs/Ros_To_Can.msg
// DO NOT EDIT!


#ifndef DFCV_MINING_MSGS_MESSAGE_ROS_TO_CAN_H
#define DFCV_MINING_MSGS_MESSAGE_ROS_TO_CAN_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace dfcv_mining_msgs
{
template <class ContainerAllocator>
struct Ros_To_Can_
{
  typedef Ros_To_Can_<ContainerAllocator> Type;

  Ros_To_Can_()
    : time_pub(0)
    , time_meas(0)
    , channel_id(0)
    , can_id(0)
    , data()  {
      data.assign(0);
  }
  Ros_To_Can_(const ContainerAllocator& _alloc)
    : time_pub(0)
    , time_meas(0)
    , channel_id(0)
    , can_id(0)
    , data()  {
  (void)_alloc;
      data.assign(0);
  }



   typedef int64_t _time_pub_type;
  _time_pub_type time_pub;

   typedef int64_t _time_meas_type;
  _time_meas_type time_meas;

   typedef int8_t _channel_id_type;
  _channel_id_type channel_id;

   typedef int32_t _can_id_type;
  _can_id_type can_id;

   typedef boost::array<uint8_t, 8>  _data_type;
  _data_type data;





  typedef boost::shared_ptr< ::dfcv_mining_msgs::Ros_To_Can_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dfcv_mining_msgs::Ros_To_Can_<ContainerAllocator> const> ConstPtr;

}; // struct Ros_To_Can_

typedef ::dfcv_mining_msgs::Ros_To_Can_<std::allocator<void> > Ros_To_Can;

typedef boost::shared_ptr< ::dfcv_mining_msgs::Ros_To_Can > Ros_To_CanPtr;
typedef boost::shared_ptr< ::dfcv_mining_msgs::Ros_To_Can const> Ros_To_CanConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dfcv_mining_msgs::Ros_To_Can_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dfcv_mining_msgs::Ros_To_Can_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace dfcv_mining_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'dfcv_mining_msgs': ['/home/yz/catkin_ws/src/dfcv_mining_msgs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::dfcv_mining_msgs::Ros_To_Can_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dfcv_mining_msgs::Ros_To_Can_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dfcv_mining_msgs::Ros_To_Can_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dfcv_mining_msgs::Ros_To_Can_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dfcv_mining_msgs::Ros_To_Can_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dfcv_mining_msgs::Ros_To_Can_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dfcv_mining_msgs::Ros_To_Can_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fbc3ba8d47f54ddd622799ad5243fa24";
  }

  static const char* value(const ::dfcv_mining_msgs::Ros_To_Can_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xfbc3ba8d47f54dddULL;
  static const uint64_t static_value2 = 0x622799ad5243fa24ULL;
};

template<class ContainerAllocator>
struct DataType< ::dfcv_mining_msgs::Ros_To_Can_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dfcv_mining_msgs/Ros_To_Can";
  }

  static const char* value(const ::dfcv_mining_msgs::Ros_To_Can_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dfcv_mining_msgs::Ros_To_Can_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int64 time_pub\n\
int64 time_meas\n\
int8 channel_id\n\
int32 can_id\n\
uint8[8] data\n\
";
  }

  static const char* value(const ::dfcv_mining_msgs::Ros_To_Can_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dfcv_mining_msgs::Ros_To_Can_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.time_pub);
      stream.next(m.time_meas);
      stream.next(m.channel_id);
      stream.next(m.can_id);
      stream.next(m.data);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Ros_To_Can_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dfcv_mining_msgs::Ros_To_Can_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dfcv_mining_msgs::Ros_To_Can_<ContainerAllocator>& v)
  {
    s << indent << "time_pub: ";
    Printer<int64_t>::stream(s, indent + "  ", v.time_pub);
    s << indent << "time_meas: ";
    Printer<int64_t>::stream(s, indent + "  ", v.time_meas);
    s << indent << "channel_id: ";
    Printer<int8_t>::stream(s, indent + "  ", v.channel_id);
    s << indent << "can_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.can_id);
    s << indent << "data[]" << std::endl;
    for (size_t i = 0; i < v.data.size(); ++i)
    {
      s << indent << "  data[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.data[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // DFCV_MINING_MSGS_MESSAGE_ROS_TO_CAN_H
