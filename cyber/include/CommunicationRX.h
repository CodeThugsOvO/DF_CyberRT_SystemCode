// Generated by gencpp from file dfcv_mining_msgs/BehaviorEx.msg
// DO NOT EDIT!


#ifndef DFCV_MINING_MSGS_MESSAGE_BEHAVIOREX_H
#define DFCV_MINING_MSGS_MESSAGE_BEHAVIOREX_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace dfcv_mining_msgs
{
template <class ContainerAllocator>
struct BehaviorEx_
{
  typedef BehaviorEx_<ContainerAllocator> Type;

  BehaviorEx_()
    : header()
    , BehaviorCoordinate_NumberBehaviorID(0)
    , BehaviorCoordinate_GearRequest(0)
    , BehaviorCoordinate_CreepMode(0)  {
    }
  BehaviorEx_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , BehaviorCoordinate_NumberBehaviorID(0)
    , BehaviorCoordinate_GearRequest(0)
    , BehaviorCoordinate_CreepMode(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _BehaviorCoordinate_NumberBehaviorID_type;
  _BehaviorCoordinate_NumberBehaviorID_type BehaviorCoordinate_NumberBehaviorID;

   typedef uint8_t _BehaviorCoordinate_GearRequest_type;
  _BehaviorCoordinate_GearRequest_type BehaviorCoordinate_GearRequest;

   typedef uint8_t _BehaviorCoordinate_CreepMode_type;
  _BehaviorCoordinate_CreepMode_type BehaviorCoordinate_CreepMode;

  typedef boost::shared_ptr< ::dfcv_mining_msgs::BehaviorEx_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dfcv_mining_msgs::BehaviorEx_<ContainerAllocator> const> ConstPtr;

}; // struct BehaviorEx_

typedef ::dfcv_mining_msgs::BehaviorEx_<std::allocator<void> > BehaviorEx;

typedef boost::shared_ptr< ::dfcv_mining_msgs::BehaviorEx > BehaviorExPtr;
typedef boost::shared_ptr< ::dfcv_mining_msgs::BehaviorEx const> BehaviorExConstPtr;

// constants requiring out of line definition


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dfcv_mining_msgs::BehaviorEx_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dfcv_mining_msgs::BehaviorEx_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dfcv_mining_msgs::BehaviorEx_<ContainerAllocator1> & lhs, const ::dfcv_mining_msgs::BehaviorEx_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.BehaviorCoordinate_NumberBehaviorID == rhs.BehaviorCoordinate_NumberBehaviorID &&
    lhs.BehaviorCoordinate_GearRequest == rhs.BehaviorCoordinate_GearRequest &&
    lhs.BehaviorCoordinate_CreepMode == rhs.BehaviorCoordinate_CreepMode;
}


  static const char* value(const ::dfcv_mining_msgs::BehaviorEx_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros




#endif // DFCV_MINING_MSGS_MESSAGE_BEHAVIOREX_H
