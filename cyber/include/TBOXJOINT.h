// Generated by gencpp from file df_msgs/TBOXJOINT.msg
// DO NOT EDIT!


#ifndef DF_MSGS_MESSAGE_TBOXJOINT_H
#define DF_MSGS_MESSAGE_TBOXJOINT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace df_msgs
{
template <class ContainerAllocator>
struct TBOXJOINT_
{
  typedef TBOXJOINT_<ContainerAllocator> Type;

  TBOXJOINT_()
    : questnum(0)
    , questtype(0)
    , slowguide(0)
    , joint_point(0)
    , joint_method(0)  {
    }
  TBOXJOINT_(const ContainerAllocator& _alloc)
    : questnum(0)
    , questtype(0)
    , slowguide(0)
    , joint_point(0)
    , joint_method(0)  {
  (void)_alloc;
    }



   typedef uint64_t _questnum_type;
  _questnum_type questnum;

   typedef uint8_t _questtype_type;
  _questtype_type questtype;

   typedef uint8_t _slowguide_type;
  _slowguide_type slowguide;

   typedef uint16_t _joint_point_type;
  _joint_point_type joint_point;

   typedef uint8_t _joint_method_type;
  _joint_method_type joint_method;





  typedef boost::shared_ptr< ::df_msgs::TBOXJOINT_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::df_msgs::TBOXJOINT_<ContainerAllocator> const> ConstPtr;

}; // struct TBOXJOINT_

typedef ::df_msgs::TBOXJOINT_<std::allocator<void> > TBOXJOINT;

typedef boost::shared_ptr< ::df_msgs::TBOXJOINT > TBOXJOINTPtr;
typedef boost::shared_ptr< ::df_msgs::TBOXJOINT const> TBOXJOINTConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::df_msgs::TBOXJOINT_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::df_msgs::TBOXJOINT_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace df_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'nav_msgs': ['/opt/ros/kinetic/share/nav_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'df_msgs': ['/home/yangchun/catkin_ws/catkin_ws/src/ROS-Academy-for-Beginners/df_msgs/msg', '/home/yangchun/catkin_ws/catkin_ws/devel/share/df_msgs/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::df_msgs::TBOXJOINT_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::df_msgs::TBOXJOINT_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::df_msgs::TBOXJOINT_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::df_msgs::TBOXJOINT_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::df_msgs::TBOXJOINT_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::df_msgs::TBOXJOINT_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::df_msgs::TBOXJOINT_<ContainerAllocator> >
{
  static const char* value()
  {
    return "968258bd0ab1454f702a79635b7a61ba";
  }

  static const char* value(const ::df_msgs::TBOXJOINT_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x968258bd0ab1454fULL;
  static const uint64_t static_value2 = 0x702a79635b7a61baULL;
};

template<class ContainerAllocator>
struct DataType< ::df_msgs::TBOXJOINT_<ContainerAllocator> >
{
  static const char* value()
  {
    return "df_msgs/TBOXJOINT";
  }

  static const char* value(const ::df_msgs::TBOXJOINT_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::df_msgs::TBOXJOINT_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#TBOXJOINT.msg\n\
\n\
uint64 questnum\n\
uint8 questtype\n\
uint8 slowguide\n\
uint16 joint_point\n\
uint8 joint_method\n\
\n\
\n\
";
  }

  static const char* value(const ::df_msgs::TBOXJOINT_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::df_msgs::TBOXJOINT_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.questnum);
      stream.next(m.questtype);
      stream.next(m.slowguide);
      stream.next(m.joint_point);
      stream.next(m.joint_method);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TBOXJOINT_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::df_msgs::TBOXJOINT_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::df_msgs::TBOXJOINT_<ContainerAllocator>& v)
  {
    s << indent << "questnum: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.questnum);
    s << indent << "questtype: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.questtype);
    s << indent << "slowguide: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.slowguide);
    s << indent << "joint_point: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.joint_point);
    s << indent << "joint_method: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.joint_method);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DF_MSGS_MESSAGE_TBOXJOINT_H
