// Generated by gencpp from file dfcv_mining_msgs/CAN_TO_CTRL_EBS.msg
// DO NOT EDIT!


#ifndef DFCV_MINING_MSGS_MESSAGE_CAN_TO_CTRL_EBS_H
#define DFCV_MINING_MSGS_MESSAGE_CAN_TO_CTRL_EBS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace dfcv_mining_msgs
{
template <class ContainerAllocator>
struct CAN_TO_CTRL_EBS_
{
  typedef CAN_TO_CTRL_EBS_<ContainerAllocator> Type;

  CAN_TO_CTRL_EBS_()
    : VehDa_mWght_mp(0.0)
    , VehDa_vEgoSpd_mp(0.0)
    , VehDa_rBrkPedl_mp(0.0)
    , VehDa_stBrkPedl_mp(0)
    , VehDa_stSrcBrk_mp(0)
    , VehDa_aEgoAcc_mp(0.0)
    , VehDa_aEgoLat_mp(0.0)
    , VehDa_yawRateEgo_mp(0.0)
    , VehDa_pFrntLe_mp(0.0)
    , VehDa_pFrntRi_mp(0.0)
    , VehDa_stXBR_mp(0)
    , VehDa_stBrkTempWarn_mp(0)
    , VehDa_stXBRActv_mp(0)
    , VehDa_aXBRLim_mp(0.0)  {
    }
  CAN_TO_CTRL_EBS_(const ContainerAllocator& _alloc)
    : VehDa_mWght_mp(0.0)
    , VehDa_vEgoSpd_mp(0.0)
    , VehDa_rBrkPedl_mp(0.0)
    , VehDa_stBrkPedl_mp(0)
    , VehDa_stSrcBrk_mp(0)
    , VehDa_aEgoAcc_mp(0.0)
    , VehDa_aEgoLat_mp(0.0)
    , VehDa_yawRateEgo_mp(0.0)
    , VehDa_pFrntLe_mp(0.0)
    , VehDa_pFrntRi_mp(0.0)
    , VehDa_stXBR_mp(0)
    , VehDa_stBrkTempWarn_mp(0)
    , VehDa_stXBRActv_mp(0)
    , VehDa_aXBRLim_mp(0.0)  {
  (void)_alloc;
    }



   typedef double _VehDa_mWght_mp_type;
  _VehDa_mWght_mp_type VehDa_mWght_mp;

   typedef double _VehDa_vEgoSpd_mp_type;
  _VehDa_vEgoSpd_mp_type VehDa_vEgoSpd_mp;

   typedef double _VehDa_rBrkPedl_mp_type;
  _VehDa_rBrkPedl_mp_type VehDa_rBrkPedl_mp;

   typedef uint8_t _VehDa_stBrkPedl_mp_type;
  _VehDa_stBrkPedl_mp_type VehDa_stBrkPedl_mp;

   typedef uint8_t _VehDa_stSrcBrk_mp_type;
  _VehDa_stSrcBrk_mp_type VehDa_stSrcBrk_mp;

   typedef double _VehDa_aEgoAcc_mp_type;
  _VehDa_aEgoAcc_mp_type VehDa_aEgoAcc_mp;

   typedef double _VehDa_aEgoLat_mp_type;
  _VehDa_aEgoLat_mp_type VehDa_aEgoLat_mp;

   typedef double _VehDa_yawRateEgo_mp_type;
  _VehDa_yawRateEgo_mp_type VehDa_yawRateEgo_mp;

   typedef double _VehDa_pFrntLe_mp_type;
  _VehDa_pFrntLe_mp_type VehDa_pFrntLe_mp;

   typedef double _VehDa_pFrntRi_mp_type;
  _VehDa_pFrntRi_mp_type VehDa_pFrntRi_mp;

   typedef uint8_t _VehDa_stXBR_mp_type;
  _VehDa_stXBR_mp_type VehDa_stXBR_mp;

   typedef uint8_t _VehDa_stBrkTempWarn_mp_type;
  _VehDa_stBrkTempWarn_mp_type VehDa_stBrkTempWarn_mp;

   typedef uint8_t _VehDa_stXBRActv_mp_type;
  _VehDa_stXBRActv_mp_type VehDa_stXBRActv_mp;

   typedef double _VehDa_aXBRLim_mp_type;
  _VehDa_aXBRLim_mp_type VehDa_aXBRLim_mp;





  typedef boost::shared_ptr< ::dfcv_mining_msgs::CAN_TO_CTRL_EBS_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dfcv_mining_msgs::CAN_TO_CTRL_EBS_<ContainerAllocator> const> ConstPtr;

}; // struct CAN_TO_CTRL_EBS_

typedef ::dfcv_mining_msgs::CAN_TO_CTRL_EBS_<std::allocator<void> > CAN_TO_CTRL_EBS;

typedef boost::shared_ptr< ::dfcv_mining_msgs::CAN_TO_CTRL_EBS > CAN_TO_CTRL_EBSPtr;
typedef boost::shared_ptr< ::dfcv_mining_msgs::CAN_TO_CTRL_EBS const> CAN_TO_CTRL_EBSConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dfcv_mining_msgs::CAN_TO_CTRL_EBS_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dfcv_mining_msgs::CAN_TO_CTRL_EBS_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace dfcv_mining_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'dfcv_mining_msgs': ['/home/yz/catkin_ws/src/dfcv_mining_msgs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::dfcv_mining_msgs::CAN_TO_CTRL_EBS_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dfcv_mining_msgs::CAN_TO_CTRL_EBS_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dfcv_mining_msgs::CAN_TO_CTRL_EBS_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dfcv_mining_msgs::CAN_TO_CTRL_EBS_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dfcv_mining_msgs::CAN_TO_CTRL_EBS_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dfcv_mining_msgs::CAN_TO_CTRL_EBS_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dfcv_mining_msgs::CAN_TO_CTRL_EBS_<ContainerAllocator> >
{
  static const char* value()
  {
    return "406dfd7f509aa16cb9d978fd0b3f037b";
  }

  static const char* value(const ::dfcv_mining_msgs::CAN_TO_CTRL_EBS_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x406dfd7f509aa16cULL;
  static const uint64_t static_value2 = 0xb9d978fd0b3f037bULL;
};

template<class ContainerAllocator>
struct DataType< ::dfcv_mining_msgs::CAN_TO_CTRL_EBS_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dfcv_mining_msgs/CAN_TO_CTRL_EBS";
  }

  static const char* value(const ::dfcv_mining_msgs::CAN_TO_CTRL_EBS_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dfcv_mining_msgs::CAN_TO_CTRL_EBS_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 VehDa_mWght_mp\n\
float64 VehDa_vEgoSpd_mp \n\
float64 VehDa_rBrkPedl_mp\n\
\n\
uint8 VehDa_stBrkPedl_mp\n\
uint8 VehDa_stSrcBrk_mp\n\
float64 VehDa_aEgoAcc_mp\n\
float64 VehDa_aEgoLat_mp\n\
float64 VehDa_yawRateEgo_mp\n\
float64 VehDa_pFrntLe_mp\n\
float64 VehDa_pFrntRi_mp\n\
uint8 VehDa_stXBR_mp\n\
uint8 VehDa_stBrkTempWarn_mp\n\
uint8 VehDa_stXBRActv_mp\n\
float64 VehDa_aXBRLim_mp\n\
\n\
\n\
\n\
";
  }

  static const char* value(const ::dfcv_mining_msgs::CAN_TO_CTRL_EBS_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dfcv_mining_msgs::CAN_TO_CTRL_EBS_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.VehDa_mWght_mp);
      stream.next(m.VehDa_vEgoSpd_mp);
      stream.next(m.VehDa_rBrkPedl_mp);
      stream.next(m.VehDa_stBrkPedl_mp);
      stream.next(m.VehDa_stSrcBrk_mp);
      stream.next(m.VehDa_aEgoAcc_mp);
      stream.next(m.VehDa_aEgoLat_mp);
      stream.next(m.VehDa_yawRateEgo_mp);
      stream.next(m.VehDa_pFrntLe_mp);
      stream.next(m.VehDa_pFrntRi_mp);
      stream.next(m.VehDa_stXBR_mp);
      stream.next(m.VehDa_stBrkTempWarn_mp);
      stream.next(m.VehDa_stXBRActv_mp);
      stream.next(m.VehDa_aXBRLim_mp);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CAN_TO_CTRL_EBS_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dfcv_mining_msgs::CAN_TO_CTRL_EBS_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dfcv_mining_msgs::CAN_TO_CTRL_EBS_<ContainerAllocator>& v)
  {
    s << indent << "VehDa_mWght_mp: ";
    Printer<double>::stream(s, indent + "  ", v.VehDa_mWght_mp);
    s << indent << "VehDa_vEgoSpd_mp: ";
    Printer<double>::stream(s, indent + "  ", v.VehDa_vEgoSpd_mp);
    s << indent << "VehDa_rBrkPedl_mp: ";
    Printer<double>::stream(s, indent + "  ", v.VehDa_rBrkPedl_mp);
    s << indent << "VehDa_stBrkPedl_mp: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.VehDa_stBrkPedl_mp);
    s << indent << "VehDa_stSrcBrk_mp: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.VehDa_stSrcBrk_mp);
    s << indent << "VehDa_aEgoAcc_mp: ";
    Printer<double>::stream(s, indent + "  ", v.VehDa_aEgoAcc_mp);
    s << indent << "VehDa_aEgoLat_mp: ";
    Printer<double>::stream(s, indent + "  ", v.VehDa_aEgoLat_mp);
    s << indent << "VehDa_yawRateEgo_mp: ";
    Printer<double>::stream(s, indent + "  ", v.VehDa_yawRateEgo_mp);
    s << indent << "VehDa_pFrntLe_mp: ";
    Printer<double>::stream(s, indent + "  ", v.VehDa_pFrntLe_mp);
    s << indent << "VehDa_pFrntRi_mp: ";
    Printer<double>::stream(s, indent + "  ", v.VehDa_pFrntRi_mp);
    s << indent << "VehDa_stXBR_mp: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.VehDa_stXBR_mp);
    s << indent << "VehDa_stBrkTempWarn_mp: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.VehDa_stBrkTempWarn_mp);
    s << indent << "VehDa_stXBRActv_mp: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.VehDa_stXBRActv_mp);
    s << indent << "VehDa_aXBRLim_mp: ";
    Printer<double>::stream(s, indent + "  ", v.VehDa_aXBRLim_mp);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DFCV_MINING_MSGS_MESSAGE_CAN_TO_CTRL_EBS_H
