// Generated by gencpp from file drdtu/Ros2canfdbus.msg
// DO NOT EDIT!


#ifndef DRDTU_MESSAGE_ROS2CANFDBUS_H
#define DRDTU_MESSAGE_ROS2CANFDBUS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace drdtu
{
template <class ContainerAllocator>
struct Ros2canfdbus_
{
  typedef Ros2canfdbus_<ContainerAllocator> Type;

  Ros2canfdbus_()
    : time_pub(0)
    , time_meas(0)
    , channel_id(0)
    , can_id(0)
    , data()  {
      data.assign(0);
  }
  Ros2canfdbus_(const ContainerAllocator& _alloc)
    : time_pub(0)
    , time_meas(0)
    , channel_id(0)
    , can_id(0)
    , data()  {
  (void)_alloc;
      data.assign(0);
  }



   typedef int64_t _time_pub_type;
  _time_pub_type time_pub;

   typedef int64_t _time_meas_type;
  _time_meas_type time_meas;

   typedef int8_t _channel_id_type;
  _channel_id_type channel_id;

   typedef int32_t _can_id_type;
  _can_id_type can_id;

   typedef boost::array<int8_t, 64>  _data_type;
  _data_type data;





  typedef boost::shared_ptr< ::drdtu::Ros2canfdbus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::drdtu::Ros2canfdbus_<ContainerAllocator> const> ConstPtr;

}; // struct Ros2canfdbus_

typedef ::drdtu::Ros2canfdbus_<std::allocator<void> > Ros2canfdbus;

typedef boost::shared_ptr< ::drdtu::Ros2canfdbus > Ros2canfdbusPtr;
typedef boost::shared_ptr< ::drdtu::Ros2canfdbus const> Ros2canfdbusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::drdtu::Ros2canfdbus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::drdtu::Ros2canfdbus_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::drdtu::Ros2canfdbus_<ContainerAllocator1> & lhs, const ::drdtu::Ros2canfdbus_<ContainerAllocator2> & rhs)
{
  return lhs.time_pub == rhs.time_pub &&
    lhs.time_meas == rhs.time_meas &&
    lhs.channel_id == rhs.channel_id &&
    lhs.can_id == rhs.can_id &&
    lhs.data == rhs.data;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::drdtu::Ros2canfdbus_<ContainerAllocator1> & lhs, const ::drdtu::Ros2canfdbus_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace drdtu

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::drdtu::Ros2canfdbus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::drdtu::Ros2canfdbus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::drdtu::Ros2canfdbus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::drdtu::Ros2canfdbus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::drdtu::Ros2canfdbus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::drdtu::Ros2canfdbus_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::drdtu::Ros2canfdbus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5b1eea458d1c954ee09c24ef3ee48fe8";
  }

  static const char* value(const ::drdtu::Ros2canfdbus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5b1eea458d1c954eULL;
  static const uint64_t static_value2 = 0xe09c24ef3ee48fe8ULL;
};

template<class ContainerAllocator>
struct DataType< ::drdtu::Ros2canfdbus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "drdtu/Ros2canfdbus";
  }

  static const char* value(const ::drdtu::Ros2canfdbus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::drdtu::Ros2canfdbus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int64 time_pub\n"
"\n"
"int64 time_meas\n"
"\n"
"int8 channel_id\n"
"\n"
"int32 can_id\n"
"\n"
"int8[64] data\n"
;
  }

  static const char* value(const ::drdtu::Ros2canfdbus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::drdtu::Ros2canfdbus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.time_pub);
      stream.next(m.time_meas);
      stream.next(m.channel_id);
      stream.next(m.can_id);
      stream.next(m.data);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Ros2canfdbus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::drdtu::Ros2canfdbus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::drdtu::Ros2canfdbus_<ContainerAllocator>& v)
  {
    s << indent << "time_pub: ";
    Printer<int64_t>::stream(s, indent + "  ", v.time_pub);
    s << indent << "time_meas: ";
    Printer<int64_t>::stream(s, indent + "  ", v.time_meas);
    s << indent << "channel_id: ";
    Printer<int8_t>::stream(s, indent + "  ", v.channel_id);
    s << indent << "can_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.can_id);
    s << indent << "data[]" << std::endl;
    for (size_t i = 0; i < v.data.size(); ++i)
    {
      s << indent << "  data[" << i << "]: ";
      Printer<int8_t>::stream(s, indent + "  ", v.data[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // DRDTU_MESSAGE_ROS2CANFDBUS_H
