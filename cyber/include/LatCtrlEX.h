// Generated by gencpp from file dfcv_mining_msgs/LatCtrlEX.msg
// DO NOT EDIT!


#ifndef DFCV_MINING_MSGS_MESSAGE_LATCTRLEX_H
#define DFCV_MINING_MSGS_MESSAGE_LATCTRLEX_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace dfcv_mining_msgs
{
template <class ContainerAllocator>
struct LatCtrlEX_
{
  typedef LatCtrlEX_<ContainerAllocator> Type;

  LatCtrlEX_()
    : header()
    , LatCtrl_EPS1CTL_ADU_KB(0)
    , LatCtrl_LateralAcceleration(0.0)
    , LatCtrl_TargetSteerAngle(0.0)
    , LatCtrl_ControlDemand(0)
    , LatCtrl_ControlModeAngleDemand(0)
    , time_pub(0)
    , time_meas(0)
    , channel_id(0)
    , can_id(0)
    , data()  {
      data.assign(0);
  }
  LatCtrlEX_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , LatCtrl_EPS1CTL_ADU_KB(0)
    , LatCtrl_LateralAcceleration(0.0)
    , LatCtrl_TargetSteerAngle(0.0)
    , LatCtrl_ControlDemand(0)
    , LatCtrl_ControlModeAngleDemand(0)
    , time_pub(0)
    , time_meas(0)
    , channel_id(0)
    , can_id(0)
    , data()  {
  (void)_alloc;
      data.assign(0);
  }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _LatCtrl_EPS1CTL_ADU_KB_type;
  _LatCtrl_EPS1CTL_ADU_KB_type LatCtrl_EPS1CTL_ADU_KB;

   typedef double _LatCtrl_LateralAcceleration_type;
  _LatCtrl_LateralAcceleration_type LatCtrl_LateralAcceleration;

   typedef double _LatCtrl_TargetSteerAngle_type;
  _LatCtrl_TargetSteerAngle_type LatCtrl_TargetSteerAngle;

   typedef uint8_t _LatCtrl_ControlDemand_type;
  _LatCtrl_ControlDemand_type LatCtrl_ControlDemand;

   typedef uint8_t _LatCtrl_ControlModeAngleDemand_type;
  _LatCtrl_ControlModeAngleDemand_type LatCtrl_ControlModeAngleDemand;

   typedef int64_t _time_pub_type;
  _time_pub_type time_pub;

   typedef int64_t _time_meas_type;
  _time_meas_type time_meas;

   typedef int8_t _channel_id_type;
  _channel_id_type channel_id;

   typedef int32_t _can_id_type;
  _can_id_type can_id;

   typedef boost::array<uint8_t, 8>  _data_type;
  _data_type data;





  typedef boost::shared_ptr< ::dfcv_mining_msgs::LatCtrlEX_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dfcv_mining_msgs::LatCtrlEX_<ContainerAllocator> const> ConstPtr;

}; // struct LatCtrlEX_

typedef ::dfcv_mining_msgs::LatCtrlEX_<std::allocator<void> > LatCtrlEX;

typedef boost::shared_ptr< ::dfcv_mining_msgs::LatCtrlEX > LatCtrlEXPtr;
typedef boost::shared_ptr< ::dfcv_mining_msgs::LatCtrlEX const> LatCtrlEXConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dfcv_mining_msgs::LatCtrlEX_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dfcv_mining_msgs::LatCtrlEX_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dfcv_mining_msgs::LatCtrlEX_<ContainerAllocator1> & lhs, const ::dfcv_mining_msgs::LatCtrlEX_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.LatCtrl_EPS1CTL_ADU_KB == rhs.LatCtrl_EPS1CTL_ADU_KB &&
    lhs.LatCtrl_LateralAcceleration == rhs.LatCtrl_LateralAcceleration &&
    lhs.LatCtrl_TargetSteerAngle == rhs.LatCtrl_TargetSteerAngle &&
    lhs.LatCtrl_ControlDemand == rhs.LatCtrl_ControlDemand &&
    lhs.LatCtrl_ControlModeAngleDemand == rhs.LatCtrl_ControlModeAngleDemand &&
    lhs.time_pub == rhs.time_pub &&
    lhs.time_meas == rhs.time_meas &&
    lhs.channel_id == rhs.channel_id &&
    lhs.can_id == rhs.can_id &&
    lhs.data == rhs.data;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dfcv_mining_msgs::LatCtrlEX_<ContainerAllocator1> & lhs, const ::dfcv_mining_msgs::LatCtrlEX_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dfcv_mining_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::dfcv_mining_msgs::LatCtrlEX_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dfcv_mining_msgs::LatCtrlEX_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dfcv_mining_msgs::LatCtrlEX_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dfcv_mining_msgs::LatCtrlEX_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dfcv_mining_msgs::LatCtrlEX_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dfcv_mining_msgs::LatCtrlEX_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dfcv_mining_msgs::LatCtrlEX_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8795da62612278a1032474029fead943";
  }

  static const char* value(const ::dfcv_mining_msgs::LatCtrlEX_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8795da62612278a1ULL;
  static const uint64_t static_value2 = 0x032474029fead943ULL;
};

template<class ContainerAllocator>
struct DataType< ::dfcv_mining_msgs::LatCtrlEX_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dfcv_mining_msgs/LatCtrlEX";
  }

  static const char* value(const ::dfcv_mining_msgs::LatCtrlEX_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dfcv_mining_msgs::LatCtrlEX_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"\n"
"uint8 LatCtrl_EPS1CTL_ADU_KB\n"
"float64 LatCtrl_LateralAcceleration\n"
"float64 LatCtrl_TargetSteerAngle\n"
"uint8 LatCtrl_ControlDemand\n"
"uint8 LatCtrl_ControlModeAngleDemand\n"
"int64 time_pub\n"
"int64 time_meas\n"
"int8 channel_id\n"
"int32 can_id\n"
"uint8[8] data\n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::dfcv_mining_msgs::LatCtrlEX_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dfcv_mining_msgs::LatCtrlEX_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.LatCtrl_EPS1CTL_ADU_KB);
      stream.next(m.LatCtrl_LateralAcceleration);
      stream.next(m.LatCtrl_TargetSteerAngle);
      stream.next(m.LatCtrl_ControlDemand);
      stream.next(m.LatCtrl_ControlModeAngleDemand);
      stream.next(m.time_pub);
      stream.next(m.time_meas);
      stream.next(m.channel_id);
      stream.next(m.can_id);
      stream.next(m.data);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LatCtrlEX_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dfcv_mining_msgs::LatCtrlEX_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dfcv_mining_msgs::LatCtrlEX_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "LatCtrl_EPS1CTL_ADU_KB: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.LatCtrl_EPS1CTL_ADU_KB);
    s << indent << "LatCtrl_LateralAcceleration: ";
    Printer<double>::stream(s, indent + "  ", v.LatCtrl_LateralAcceleration);
    s << indent << "LatCtrl_TargetSteerAngle: ";
    Printer<double>::stream(s, indent + "  ", v.LatCtrl_TargetSteerAngle);
    s << indent << "LatCtrl_ControlDemand: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.LatCtrl_ControlDemand);
    s << indent << "LatCtrl_ControlModeAngleDemand: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.LatCtrl_ControlModeAngleDemand);
    s << indent << "time_pub: ";
    Printer<int64_t>::stream(s, indent + "  ", v.time_pub);
    s << indent << "time_meas: ";
    Printer<int64_t>::stream(s, indent + "  ", v.time_meas);
    s << indent << "channel_id: ";
    Printer<int8_t>::stream(s, indent + "  ", v.channel_id);
    s << indent << "can_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.can_id);
    s << indent << "data[]" << std::endl;
    for (size_t i = 0; i < v.data.size(); ++i)
    {
      s << indent << "  data[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.data[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // DFCV_MINING_MSGS_MESSAGE_LATCTRLEX_H
