// Generated by gencpp from file dfcv_mining_msgs/CAN_TO_CTRL_EECU.msg
// DO NOT EDIT!


#ifndef DFCV_MINING_MSGS_MESSAGE_CAN_TO_CTRL_EECU_H
#define DFCV_MINING_MSGS_MESSAGE_CAN_TO_CTRL_EECU_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace dfcv_mining_msgs
{
template <class ContainerAllocator>
struct CAN_TO_CTRL_EECU_
{
  typedef CAN_TO_CTRL_EECU_<ContainerAllocator> Type;

  CAN_TO_CTRL_EECU_()
    : VehDa_prcActuTrq_mp(0)
    , VehDa_prcDrvrDmdTrq_mp(0)
    , VehDa_stSrcEngCtrl_mp(0)
    , VehDa_nEngSpd_mp(0.0)
    , VehDa_prcTrqEngNomFric_mp(0)
    , VehDa_prcTrqEstimdLoss_mp(0)
    , VehDa_stCluSwt_mp(0)
    , VehDa_trqEngRef_mp(0.0)
    , VehDa_jEng_mp(0.0)
    , VehDa_rAccrPedl_mp(0.0)  {
    }
  CAN_TO_CTRL_EECU_(const ContainerAllocator& _alloc)
    : VehDa_prcActuTrq_mp(0)
    , VehDa_prcDrvrDmdTrq_mp(0)
    , VehDa_stSrcEngCtrl_mp(0)
    , VehDa_nEngSpd_mp(0.0)
    , VehDa_prcTrqEngNomFric_mp(0)
    , VehDa_prcTrqEstimdLoss_mp(0)
    , VehDa_stCluSwt_mp(0)
    , VehDa_trqEngRef_mp(0.0)
    , VehDa_jEng_mp(0.0)
    , VehDa_rAccrPedl_mp(0.0)  {
  (void)_alloc;
    }



   typedef int16_t _VehDa_prcActuTrq_mp_type;
  _VehDa_prcActuTrq_mp_type VehDa_prcActuTrq_mp;

   typedef int16_t _VehDa_prcDrvrDmdTrq_mp_type;
  _VehDa_prcDrvrDmdTrq_mp_type VehDa_prcDrvrDmdTrq_mp;

   typedef uint8_t _VehDa_stSrcEngCtrl_mp_type;
  _VehDa_stSrcEngCtrl_mp_type VehDa_stSrcEngCtrl_mp;

   typedef double _VehDa_nEngSpd_mp_type;
  _VehDa_nEngSpd_mp_type VehDa_nEngSpd_mp;

   typedef int16_t _VehDa_prcTrqEngNomFric_mp_type;
  _VehDa_prcTrqEngNomFric_mp_type VehDa_prcTrqEngNomFric_mp;

   typedef int16_t _VehDa_prcTrqEstimdLoss_mp_type;
  _VehDa_prcTrqEstimdLoss_mp_type VehDa_prcTrqEstimdLoss_mp;

   typedef uint8_t _VehDa_stCluSwt_mp_type;
  _VehDa_stCluSwt_mp_type VehDa_stCluSwt_mp;

   typedef double _VehDa_trqEngRef_mp_type;
  _VehDa_trqEngRef_mp_type VehDa_trqEngRef_mp;

   typedef double _VehDa_jEng_mp_type;
  _VehDa_jEng_mp_type VehDa_jEng_mp;

   typedef double _VehDa_rAccrPedl_mp_type;
  _VehDa_rAccrPedl_mp_type VehDa_rAccrPedl_mp;





  typedef boost::shared_ptr< ::dfcv_mining_msgs::CAN_TO_CTRL_EECU_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dfcv_mining_msgs::CAN_TO_CTRL_EECU_<ContainerAllocator> const> ConstPtr;

}; // struct CAN_TO_CTRL_EECU_

typedef ::dfcv_mining_msgs::CAN_TO_CTRL_EECU_<std::allocator<void> > CAN_TO_CTRL_EECU;

typedef boost::shared_ptr< ::dfcv_mining_msgs::CAN_TO_CTRL_EECU > CAN_TO_CTRL_EECUPtr;
typedef boost::shared_ptr< ::dfcv_mining_msgs::CAN_TO_CTRL_EECU const> CAN_TO_CTRL_EECUConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dfcv_mining_msgs::CAN_TO_CTRL_EECU_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dfcv_mining_msgs::CAN_TO_CTRL_EECU_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace dfcv_mining_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'dfcv_mining_msgs': ['/home/yz/catkin_ws/src/dfcv_mining_msgs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::dfcv_mining_msgs::CAN_TO_CTRL_EECU_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dfcv_mining_msgs::CAN_TO_CTRL_EECU_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dfcv_mining_msgs::CAN_TO_CTRL_EECU_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dfcv_mining_msgs::CAN_TO_CTRL_EECU_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dfcv_mining_msgs::CAN_TO_CTRL_EECU_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dfcv_mining_msgs::CAN_TO_CTRL_EECU_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dfcv_mining_msgs::CAN_TO_CTRL_EECU_<ContainerAllocator> >
{
  static const char* value()
  {
    return "404e92e7756d49a8ab62fd99fbd5cd35";
  }

  static const char* value(const ::dfcv_mining_msgs::CAN_TO_CTRL_EECU_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x404e92e7756d49a8ULL;
  static const uint64_t static_value2 = 0xab62fd99fbd5cd35ULL;
};

template<class ContainerAllocator>
struct DataType< ::dfcv_mining_msgs::CAN_TO_CTRL_EECU_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dfcv_mining_msgs/CAN_TO_CTRL_EECU";
  }

  static const char* value(const ::dfcv_mining_msgs::CAN_TO_CTRL_EECU_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dfcv_mining_msgs::CAN_TO_CTRL_EECU_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int16 VehDa_prcActuTrq_mp \n\
int16 VehDa_prcDrvrDmdTrq_mp \n\
uint8 VehDa_stSrcEngCtrl_mp   \n\
float64 VehDa_nEngSpd_mp\n\
int16 VehDa_prcTrqEngNomFric_mp \n\
int16 VehDa_prcTrqEstimdLoss_mp\n\
uint8 VehDa_stCluSwt_mp\n\
float64 VehDa_trqEngRef_mp\n\
float64 VehDa_jEng_mp\n\
float64 VehDa_rAccrPedl_mp\n\
";
  }

  static const char* value(const ::dfcv_mining_msgs::CAN_TO_CTRL_EECU_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dfcv_mining_msgs::CAN_TO_CTRL_EECU_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.VehDa_prcActuTrq_mp);
      stream.next(m.VehDa_prcDrvrDmdTrq_mp);
      stream.next(m.VehDa_stSrcEngCtrl_mp);
      stream.next(m.VehDa_nEngSpd_mp);
      stream.next(m.VehDa_prcTrqEngNomFric_mp);
      stream.next(m.VehDa_prcTrqEstimdLoss_mp);
      stream.next(m.VehDa_stCluSwt_mp);
      stream.next(m.VehDa_trqEngRef_mp);
      stream.next(m.VehDa_jEng_mp);
      stream.next(m.VehDa_rAccrPedl_mp);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CAN_TO_CTRL_EECU_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dfcv_mining_msgs::CAN_TO_CTRL_EECU_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dfcv_mining_msgs::CAN_TO_CTRL_EECU_<ContainerAllocator>& v)
  {
    s << indent << "VehDa_prcActuTrq_mp: ";
    Printer<int16_t>::stream(s, indent + "  ", v.VehDa_prcActuTrq_mp);
    s << indent << "VehDa_prcDrvrDmdTrq_mp: ";
    Printer<int16_t>::stream(s, indent + "  ", v.VehDa_prcDrvrDmdTrq_mp);
    s << indent << "VehDa_stSrcEngCtrl_mp: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.VehDa_stSrcEngCtrl_mp);
    s << indent << "VehDa_nEngSpd_mp: ";
    Printer<double>::stream(s, indent + "  ", v.VehDa_nEngSpd_mp);
    s << indent << "VehDa_prcTrqEngNomFric_mp: ";
    Printer<int16_t>::stream(s, indent + "  ", v.VehDa_prcTrqEngNomFric_mp);
    s << indent << "VehDa_prcTrqEstimdLoss_mp: ";
    Printer<int16_t>::stream(s, indent + "  ", v.VehDa_prcTrqEstimdLoss_mp);
    s << indent << "VehDa_stCluSwt_mp: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.VehDa_stCluSwt_mp);
    s << indent << "VehDa_trqEngRef_mp: ";
    Printer<double>::stream(s, indent + "  ", v.VehDa_trqEngRef_mp);
    s << indent << "VehDa_jEng_mp: ";
    Printer<double>::stream(s, indent + "  ", v.VehDa_jEng_mp);
    s << indent << "VehDa_rAccrPedl_mp: ";
    Printer<double>::stream(s, indent + "  ", v.VehDa_rAccrPedl_mp);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DFCV_MINING_MSGS_MESSAGE_CAN_TO_CTRL_EECU_H
