// Generated by gencpp from file dfcv_mining_msgs/BodyControl_ADCU.msg
// DO NOT EDIT!


#ifndef DFCV_MINING_MSGS_MESSAGE_BODYCONTROL_ADCU_H
#define DFCV_MINING_MSGS_MESSAGE_BODYCONTROL_ADCU_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace dfcv_mining_msgs
{
template <class ContainerAllocator>
struct BodyControl_ADCU_
{
  typedef BodyControl_ADCU_<ContainerAllocator> Type;

  BodyControl_ADCU_()
    : GasHornActivationSwitch(0)
    , ElectricHornActivationSwitch(0)
    , ADWiperSwitch(0)
    , ADWiperControl(0)
    , ADHeadlampSwitch(0)
    , ADHeadlampControl(0)
    , TurnLampControl(0)
    , BrakelightCommand(0)
    , ADWasherSwitch(0)
    , FogLightSwitch(0)
    , AmbientLightDisplayRequest(0)
    , SeatbeltTightenRequest(0)
    , DoorEmergencyUnlocking(0)
    , SeatVibrationRequest(0)
    , HazardlightSwitch(0)
    , RearlightSwitch(0)
    , LiftSwitch(0)  {
    }
  BodyControl_ADCU_(const ContainerAllocator& _alloc)
    : GasHornActivationSwitch(0)
    , ElectricHornActivationSwitch(0)
    , ADWiperSwitch(0)
    , ADWiperControl(0)
    , ADHeadlampSwitch(0)
    , ADHeadlampControl(0)
    , TurnLampControl(0)
    , BrakelightCommand(0)
    , ADWasherSwitch(0)
    , FogLightSwitch(0)
    , AmbientLightDisplayRequest(0)
    , SeatbeltTightenRequest(0)
    , DoorEmergencyUnlocking(0)
    , SeatVibrationRequest(0)
    , HazardlightSwitch(0)
    , RearlightSwitch(0)
    , LiftSwitch(0)  {
  (void)_alloc;
    }



   typedef uint8_t _GasHornActivationSwitch_type;
  _GasHornActivationSwitch_type GasHornActivationSwitch;

   typedef uint8_t _ElectricHornActivationSwitch_type;
  _ElectricHornActivationSwitch_type ElectricHornActivationSwitch;

   typedef uint8_t _ADWiperSwitch_type;
  _ADWiperSwitch_type ADWiperSwitch;

   typedef uint8_t _ADWiperControl_type;
  _ADWiperControl_type ADWiperControl;

   typedef uint8_t _ADHeadlampSwitch_type;
  _ADHeadlampSwitch_type ADHeadlampSwitch;

   typedef uint8_t _ADHeadlampControl_type;
  _ADHeadlampControl_type ADHeadlampControl;

   typedef uint8_t _TurnLampControl_type;
  _TurnLampControl_type TurnLampControl;

   typedef uint8_t _BrakelightCommand_type;
  _BrakelightCommand_type BrakelightCommand;

   typedef uint8_t _ADWasherSwitch_type;
  _ADWasherSwitch_type ADWasherSwitch;

   typedef uint8_t _FogLightSwitch_type;
  _FogLightSwitch_type FogLightSwitch;

   typedef uint8_t _AmbientLightDisplayRequest_type;
  _AmbientLightDisplayRequest_type AmbientLightDisplayRequest;

   typedef uint8_t _SeatbeltTightenRequest_type;
  _SeatbeltTightenRequest_type SeatbeltTightenRequest;

   typedef uint8_t _DoorEmergencyUnlocking_type;
  _DoorEmergencyUnlocking_type DoorEmergencyUnlocking;

   typedef uint8_t _SeatVibrationRequest_type;
  _SeatVibrationRequest_type SeatVibrationRequest;

   typedef uint8_t _HazardlightSwitch_type;
  _HazardlightSwitch_type HazardlightSwitch;

   typedef uint8_t _RearlightSwitch_type;
  _RearlightSwitch_type RearlightSwitch;

   typedef uint8_t _LiftSwitch_type;
  _LiftSwitch_type LiftSwitch;





  typedef boost::shared_ptr< ::dfcv_mining_msgs::BodyControl_ADCU_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dfcv_mining_msgs::BodyControl_ADCU_<ContainerAllocator> const> ConstPtr;

}; // struct BodyControl_ADCU_

typedef ::dfcv_mining_msgs::BodyControl_ADCU_<std::allocator<void> > BodyControl_ADCU;

typedef boost::shared_ptr< ::dfcv_mining_msgs::BodyControl_ADCU > BodyControl_ADCUPtr;
typedef boost::shared_ptr< ::dfcv_mining_msgs::BodyControl_ADCU const> BodyControl_ADCUConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dfcv_mining_msgs::BodyControl_ADCU_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dfcv_mining_msgs::BodyControl_ADCU_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace dfcv_mining_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'dfcv_mining_msgs': ['/home/yz/catkin_ws/src/dfcv_mining_msgs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::dfcv_mining_msgs::BodyControl_ADCU_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dfcv_mining_msgs::BodyControl_ADCU_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dfcv_mining_msgs::BodyControl_ADCU_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dfcv_mining_msgs::BodyControl_ADCU_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dfcv_mining_msgs::BodyControl_ADCU_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dfcv_mining_msgs::BodyControl_ADCU_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dfcv_mining_msgs::BodyControl_ADCU_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f2c71fd794b0e92db8713d0b28ec4d57";
  }

  static const char* value(const ::dfcv_mining_msgs::BodyControl_ADCU_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf2c71fd794b0e92dULL;
  static const uint64_t static_value2 = 0xb8713d0b28ec4d57ULL;
};

template<class ContainerAllocator>
struct DataType< ::dfcv_mining_msgs::BodyControl_ADCU_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dfcv_mining_msgs/BodyControl_ADCU";
  }

  static const char* value(const ::dfcv_mining_msgs::BodyControl_ADCU_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dfcv_mining_msgs::BodyControl_ADCU_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#BodyControl_ADCU.msg\n\
\n\
uint8 GasHornActivationSwitch\n\
uint8 ElectricHornActivationSwitch\n\
uint8 ADWiperSwitch\n\
uint8 ADWiperControl\n\
uint8 ADHeadlampSwitch\n\
uint8 ADHeadlampControl\n\
uint8 TurnLampControl\n\
uint8 BrakelightCommand\n\
uint8 ADWasherSwitch\n\
uint8 FogLightSwitch\n\
uint8 AmbientLightDisplayRequest\n\
uint8 SeatbeltTightenRequest\n\
uint8 DoorEmergencyUnlocking\n\
uint8 SeatVibrationRequest\n\
uint8 HazardlightSwitch\n\
uint8 RearlightSwitch\n\
uint8 LiftSwitch\n\
";
  }

  static const char* value(const ::dfcv_mining_msgs::BodyControl_ADCU_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dfcv_mining_msgs::BodyControl_ADCU_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.GasHornActivationSwitch);
      stream.next(m.ElectricHornActivationSwitch);
      stream.next(m.ADWiperSwitch);
      stream.next(m.ADWiperControl);
      stream.next(m.ADHeadlampSwitch);
      stream.next(m.ADHeadlampControl);
      stream.next(m.TurnLampControl);
      stream.next(m.BrakelightCommand);
      stream.next(m.ADWasherSwitch);
      stream.next(m.FogLightSwitch);
      stream.next(m.AmbientLightDisplayRequest);
      stream.next(m.SeatbeltTightenRequest);
      stream.next(m.DoorEmergencyUnlocking);
      stream.next(m.SeatVibrationRequest);
      stream.next(m.HazardlightSwitch);
      stream.next(m.RearlightSwitch);
      stream.next(m.LiftSwitch);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct BodyControl_ADCU_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dfcv_mining_msgs::BodyControl_ADCU_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dfcv_mining_msgs::BodyControl_ADCU_<ContainerAllocator>& v)
  {
    s << indent << "GasHornActivationSwitch: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.GasHornActivationSwitch);
    s << indent << "ElectricHornActivationSwitch: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ElectricHornActivationSwitch);
    s << indent << "ADWiperSwitch: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ADWiperSwitch);
    s << indent << "ADWiperControl: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ADWiperControl);
    s << indent << "ADHeadlampSwitch: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ADHeadlampSwitch);
    s << indent << "ADHeadlampControl: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ADHeadlampControl);
    s << indent << "TurnLampControl: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.TurnLampControl);
    s << indent << "BrakelightCommand: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.BrakelightCommand);
    s << indent << "ADWasherSwitch: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ADWasherSwitch);
    s << indent << "FogLightSwitch: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.FogLightSwitch);
    s << indent << "AmbientLightDisplayRequest: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.AmbientLightDisplayRequest);
    s << indent << "SeatbeltTightenRequest: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.SeatbeltTightenRequest);
    s << indent << "DoorEmergencyUnlocking: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.DoorEmergencyUnlocking);
    s << indent << "SeatVibrationRequest: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.SeatVibrationRequest);
    s << indent << "HazardlightSwitch: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.HazardlightSwitch);
    s << indent << "RearlightSwitch: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.RearlightSwitch);
    s << indent << "LiftSwitch: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.LiftSwitch);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DFCV_MINING_MSGS_MESSAGE_BODYCONTROL_ADCU_H
