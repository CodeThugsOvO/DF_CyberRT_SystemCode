// Generated by gencpp from file dfcv_mining_msgs/CAN_TO_CTRL_TCU.msg
// DO NOT EDIT!


#ifndef DFCV_MINING_MSGS_MESSAGE_CAN_TO_CTRL_TCU_H
#define DFCV_MINING_MSGS_MESSAGE_CAN_TO_CTRL_TCU_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace dfcv_mining_msgs
{
template <class ContainerAllocator>
struct CAN_TO_CTRL_TCU_
{
  typedef CAN_TO_CTRL_TCU_<ContainerAllocator> Type;

  CAN_TO_CTRL_TCU_()
    : VehDa_rTraCurGear_mp(0.0)
    , VehDa_stTraCurGear_mp(0)
    , VehDa_stTraSelGear_mp(0)
    , VehDa_stTraEgd_mp(0)
    , VehDa_stTraSht_mp(0)
    , VehDa_stTraRdy4BrkRls_mp(0)
    , VehDa_stTraTrqLim_mp(0)
    , VehDa_prcTraTrqLim_mp(0)  {
    }
  CAN_TO_CTRL_TCU_(const ContainerAllocator& _alloc)
    : VehDa_rTraCurGear_mp(0.0)
    , VehDa_stTraCurGear_mp(0)
    , VehDa_stTraSelGear_mp(0)
    , VehDa_stTraEgd_mp(0)
    , VehDa_stTraSht_mp(0)
    , VehDa_stTraRdy4BrkRls_mp(0)
    , VehDa_stTraTrqLim_mp(0)
    , VehDa_prcTraTrqLim_mp(0)  {
  (void)_alloc;
    }



   typedef double _VehDa_rTraCurGear_mp_type;
  _VehDa_rTraCurGear_mp_type VehDa_rTraCurGear_mp;

   typedef int16_t _VehDa_stTraCurGear_mp_type;
  _VehDa_stTraCurGear_mp_type VehDa_stTraCurGear_mp;

   typedef int16_t _VehDa_stTraSelGear_mp_type;
  _VehDa_stTraSelGear_mp_type VehDa_stTraSelGear_mp;

   typedef uint8_t _VehDa_stTraEgd_mp_type;
  _VehDa_stTraEgd_mp_type VehDa_stTraEgd_mp;

   typedef uint8_t _VehDa_stTraSht_mp_type;
  _VehDa_stTraSht_mp_type VehDa_stTraSht_mp;

   typedef uint8_t _VehDa_stTraRdy4BrkRls_mp_type;
  _VehDa_stTraRdy4BrkRls_mp_type VehDa_stTraRdy4BrkRls_mp;

   typedef uint8_t _VehDa_stTraTrqLim_mp_type;
  _VehDa_stTraTrqLim_mp_type VehDa_stTraTrqLim_mp;

   typedef uint8_t _VehDa_prcTraTrqLim_mp_type;
  _VehDa_prcTraTrqLim_mp_type VehDa_prcTraTrqLim_mp;





  typedef boost::shared_ptr< ::dfcv_mining_msgs::CAN_TO_CTRL_TCU_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dfcv_mining_msgs::CAN_TO_CTRL_TCU_<ContainerAllocator> const> ConstPtr;

}; // struct CAN_TO_CTRL_TCU_

typedef ::dfcv_mining_msgs::CAN_TO_CTRL_TCU_<std::allocator<void> > CAN_TO_CTRL_TCU;

typedef boost::shared_ptr< ::dfcv_mining_msgs::CAN_TO_CTRL_TCU > CAN_TO_CTRL_TCUPtr;
typedef boost::shared_ptr< ::dfcv_mining_msgs::CAN_TO_CTRL_TCU const> CAN_TO_CTRL_TCUConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dfcv_mining_msgs::CAN_TO_CTRL_TCU_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dfcv_mining_msgs::CAN_TO_CTRL_TCU_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dfcv_mining_msgs::CAN_TO_CTRL_TCU_<ContainerAllocator1> & lhs, const ::dfcv_mining_msgs::CAN_TO_CTRL_TCU_<ContainerAllocator2> & rhs)
{
  return lhs.VehDa_rTraCurGear_mp == rhs.VehDa_rTraCurGear_mp &&
    lhs.VehDa_stTraCurGear_mp == rhs.VehDa_stTraCurGear_mp &&
    lhs.VehDa_stTraSelGear_mp == rhs.VehDa_stTraSelGear_mp &&
    lhs.VehDa_stTraEgd_mp == rhs.VehDa_stTraEgd_mp &&
    lhs.VehDa_stTraSht_mp == rhs.VehDa_stTraSht_mp &&
    lhs.VehDa_stTraRdy4BrkRls_mp == rhs.VehDa_stTraRdy4BrkRls_mp &&
    lhs.VehDa_stTraTrqLim_mp == rhs.VehDa_stTraTrqLim_mp &&
    lhs.VehDa_prcTraTrqLim_mp == rhs.VehDa_prcTraTrqLim_mp;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dfcv_mining_msgs::CAN_TO_CTRL_TCU_<ContainerAllocator1> & lhs, const ::dfcv_mining_msgs::CAN_TO_CTRL_TCU_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dfcv_mining_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::dfcv_mining_msgs::CAN_TO_CTRL_TCU_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dfcv_mining_msgs::CAN_TO_CTRL_TCU_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dfcv_mining_msgs::CAN_TO_CTRL_TCU_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dfcv_mining_msgs::CAN_TO_CTRL_TCU_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dfcv_mining_msgs::CAN_TO_CTRL_TCU_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dfcv_mining_msgs::CAN_TO_CTRL_TCU_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dfcv_mining_msgs::CAN_TO_CTRL_TCU_<ContainerAllocator> >
{
  static const char* value()
  {
    return "21268f5a3d484aadc756bd1a504cdca8";
  }

  static const char* value(const ::dfcv_mining_msgs::CAN_TO_CTRL_TCU_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x21268f5a3d484aadULL;
  static const uint64_t static_value2 = 0xc756bd1a504cdca8ULL;
};

template<class ContainerAllocator>
struct DataType< ::dfcv_mining_msgs::CAN_TO_CTRL_TCU_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dfcv_mining_msgs/CAN_TO_CTRL_TCU";
  }

  static const char* value(const ::dfcv_mining_msgs::CAN_TO_CTRL_TCU_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dfcv_mining_msgs::CAN_TO_CTRL_TCU_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 VehDa_rTraCurGear_mp \n"
"int16 VehDa_stTraCurGear_mp\n"
"int16 VehDa_stTraSelGear_mp\n"
"uint8 VehDa_stTraEgd_mp\n"
"uint8 VehDa_stTraSht_mp\n"
"uint8 VehDa_stTraRdy4BrkRls_mp\n"
"uint8 VehDa_stTraTrqLim_mp\n"
"uint8 VehDa_prcTraTrqLim_mp\n"
;
  }

  static const char* value(const ::dfcv_mining_msgs::CAN_TO_CTRL_TCU_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dfcv_mining_msgs::CAN_TO_CTRL_TCU_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.VehDa_rTraCurGear_mp);
      stream.next(m.VehDa_stTraCurGear_mp);
      stream.next(m.VehDa_stTraSelGear_mp);
      stream.next(m.VehDa_stTraEgd_mp);
      stream.next(m.VehDa_stTraSht_mp);
      stream.next(m.VehDa_stTraRdy4BrkRls_mp);
      stream.next(m.VehDa_stTraTrqLim_mp);
      stream.next(m.VehDa_prcTraTrqLim_mp);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CAN_TO_CTRL_TCU_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dfcv_mining_msgs::CAN_TO_CTRL_TCU_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dfcv_mining_msgs::CAN_TO_CTRL_TCU_<ContainerAllocator>& v)
  {
    s << indent << "VehDa_rTraCurGear_mp: ";
    Printer<double>::stream(s, indent + "  ", v.VehDa_rTraCurGear_mp);
    s << indent << "VehDa_stTraCurGear_mp: ";
    Printer<int16_t>::stream(s, indent + "  ", v.VehDa_stTraCurGear_mp);
    s << indent << "VehDa_stTraSelGear_mp: ";
    Printer<int16_t>::stream(s, indent + "  ", v.VehDa_stTraSelGear_mp);
    s << indent << "VehDa_stTraEgd_mp: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.VehDa_stTraEgd_mp);
    s << indent << "VehDa_stTraSht_mp: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.VehDa_stTraSht_mp);
    s << indent << "VehDa_stTraRdy4BrkRls_mp: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.VehDa_stTraRdy4BrkRls_mp);
    s << indent << "VehDa_stTraTrqLim_mp: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.VehDa_stTraTrqLim_mp);
    s << indent << "VehDa_prcTraTrqLim_mp: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.VehDa_prcTraTrqLim_mp);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DFCV_MINING_MSGS_MESSAGE_CAN_TO_CTRL_TCU_H
